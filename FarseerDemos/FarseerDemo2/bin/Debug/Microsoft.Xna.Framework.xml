<?xml version="1.0"?>
<doc>
  <assembly>
    <name />
  </assembly>
  <members>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.#ctor">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.
</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.Add(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe)">
      <summary>Adds a new keyframe to the collection, automatically sorting the contents according to keyframe times.</summary>
      <param name="item">Keyframe to be added to the channel.</param>
      <returns>Index of the new keyframe.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.Clear">
      <summary>Removes all keyframes from the collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.Contains(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe)">
      <summary>Searches the collection for the specified keyframe.</summary>
      <param name="item">Keyframe being searched for.</param>
      <returns>true if the keyframe exists; otherwise false.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.GetEnumerator">
      <summary>Returns an enumerator that iterates through the keyframes.</summary>
      <returns>Enumerator for the keyframe collection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.IndexOf(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe)">
      <summary>Determines the index for the specified keyframe.</summary>
      <param name="item">Identity of a keyframe.</param>
      <returns>Index of the  specified keyframe.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.RemoveAt(System.Int32)">
      <summary>Removes the keyframe at the specified index position.</summary>
      <param name="index">Index of the keyframe being removed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.Remove(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe)">
      <summary>Removes the specified keyframe from the collection.</summary>
      <param name="item">Keyframe being removed.</param>
      <returns>true if the keyframe was removed; otherwise false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.Count">
      <summary>Gets the number of keyframes in the collection.</summary>
      <returns>Number of keyframes.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel.Item">
      <summary>Gets the keyframe at the specified index position.</summary>
      <param name="index" />
      <returns>Retrieved keyframe.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannel" />
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannelDictionary.#ctor">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannelDictionary.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationChannelDictionary">
      <summary>Collection of animation data channels, one per bone or rigid object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContent.#ctor">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContent.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContent.Channels">
      <returns>Collection of animation channels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContent.Duration">
      <summary>Gets or sets the total length of the animation.</summary>
      <returns>Length of animation.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContent">
      <summary>Provides properties for maintaining an animation.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContentDictionary.#ctor">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContentDictionary.
  </summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationContentDictionary">
      <summary>Collection of named animations.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe.#ctor(System.TimeSpan,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe(System.TimeSpan,Microsoft.Xna.Framework.Matrix) with the specified time offsetand transform.
  </summary>
      <param name="time">Time offset of the keyframe.</param>
      <param name="transform">Position of the keyframe.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe.CompareTo(Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe)">
      <summary>Compares this instance of a keyframe to another.</summary>
      <param name="other">Keyframe being compared to.</param>
      <returns>Indication of their relative values.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe.Time">
      <summary>Gets the time offset from the start of the animation to the position described by this keyframe.</summary>
      <returns>Offset from the animation start time.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe.Transform">
      <summary>Gets or sets the position described by this keyframe.</summary>
      <returns>Position of keyframe.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.AnimationKeyframe" />
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.#ctor">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.AmbientColorKey">
      <summary>Specifies the key of the key/data pair for the ambient color property.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.DiffuseColorKey">
      <summary>Specifies the key of the key/data pair for the diffuse color.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.EmissiveColorKey">
      <summary>Specifies the key of the key/data pair for the emissive color.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.SpecularColorKey">
      <summary>Specifies the key of the key/data pair for the specular color.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.SpecularPowerKey">
      <summary>Specifies the key of the key/data pair for the specular power.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.TextureKey">
      <summary>Specifies the key of the key/data pair for the diffuse texture.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.AmbientColor">
      <summary>Gets or sets the ambient color property.</summary>
      <returns>Current ambient color value or the value to be set.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.DiffuseColor">
      <summary>Gets or sets the diffuse color property.</summary>
      <returns>Current diffuse color value or the value to be set.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.Texture">
      <summary>Gets or sets the diffuse texture property.</summary>
      <returns>Current diffuse texture value or the value to be set.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.EmissiveColor">
      <summary>Gets or sets the emissive color property.</summary>
      <returns>Current diffuse color value or the value to be set.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.SpecularColor">
      <summary>Gets or sets the specular color property.</summary>
      <returns>Current specular color value or the value to be set.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent.SpecularPower">
      <summary>Gets or sets the specular power property.</summary>
      <returns>Current specular power value or the value to be set.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BasicMaterialContent">
      <summary>
    Provides properties for modifying a traditional fixed-functionâ€“style material, as supported by most 3D modeling packages.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.#ctor">
      <summary>Initializes a new instance of BitmapContent.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of BitmapContent with the specified width or height.</summary>
      <param name="width">Width, in pixels, of the bitmap resource.</param>
      <param name="height">Height, in pixels, of the bitmap resource.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.Copy(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle)">
      <summary>Copies one bitmap into another.</summary>
      <param name="sourceBitmap">BitmapContent being copied.</param>
      <param name="sourceLocation">Region of sourceBitmap.</param>
      <param name="destinationBitmap">BitmapContent being overwritten.</param>
      <param name="destinationRegion">Region of bitmap to be overwritten.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.Copy(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent)">
      <summary>Copies one bitmap into another.</summary>
      <param name="sourceBitmap">BitmapContent being copied.</param>
      <param name="destinationBitmap">BitmapContent being overwritten.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.GetPixelData">
      <summary>Reads encoded bitmap content.</summary>
      <returns>Array containing encoded bitmap data.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.SetPixelData(System.Byte[])">
      <summary>Writes encoded bitmap content.</summary>
      <param name="sourceData">Array containing encoded bitmap data to be set.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.ToString">
      <summary>Returns a string description of the bitmap resource.</summary>
      <returns>Description of the bitmap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.TryCopyFrom(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle)">
      <summary>Attempts to copy a region from a specified bitmap.</summary>
      <param name="sourceBitmap">BitmapContent being copied.</param>
      <param name="sourceLocation">Location of sourceBitmap.</param>
      <param name="destinationRegion">Region of destination bitmap to be overwritten.</param>
      <returns>true if region copy is supported; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.TryCopyTo(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle)">
      <summary>Attempts to copy a region of the specified bitmap onto another.</summary>
      <param name="destinationBitmap">BitmapContent being overwritten.</param>
      <param name="sourceLocation">Location of the source bitmap.</param>
      <param name="destinationRegion">Region of destination bitmap to be overwritten.</param>
      <returns>true if region copy is supported; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Gets the corresponding GPU texture format for the specified bitmap type.</summary>
      <param name="format">Format being compared.
      </param>
      <returns>true if the bitmap matches format; otherwise false. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.ValidateCopyArguments(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle)">
      <summary>
    Validates the arguments to the Copy function.</summary>
      <param name="sourceBitmap">BitmapContent being copied.</param>
      <param name="sourceLocation">
        Location of sourceBitmap.
      </param>
      <param name="destinationBitmap">BitmapContent being overwritten.</param>
      <param name="destinationRegion">Region of bitmap to be overwritten.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.Height">
      <summary>Gets or sets the height of the bitmap, in pixels.</summary>
      <returns>Height of the bitmap.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent.Width">
      <summary>Gets or sets the width of the bitmap, in pixels.</summary>
      <returns>Width of the bitmap.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent">
      <summary>Provides properties and methods for creating and maintaining a bitmap resource.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneContent.#ctor">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneContent.
  </summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneContent">
      <summary>Represents an animation skeleton.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeight.#ctor(System.String,System.Single)">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeight(System.String,System.Single) with the specified name and weight.
  </summary>
      <param name="boneName">Name of the bone.</param>
      <param name="weight">Amount of influence, ranging from zero to one.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeight.BoneName">
      <summary>Gets the name of the bone.</summary>
      <returns>Name of the bone.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeight.Weight">
      <returns>Influence of the bone.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeight">
      <summary>Provides properties for managing a bone weight.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeightCollection.#ctor">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeightCollection.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeightCollection.NormalizeWeights(System.Int32)">
      <summary>Normalizes the contents of the bone weights list.</summary>
      <param name="maxWeights">Maximum number of weights allowed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeightCollection.NormalizeWeights">
      <summary>Normalizes the contents of the weights list.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.BoneWeightCollection">
      <summary>Collection of bone weights of a vertex.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt1BitmapContent.#ctor(System.Int32,System.Int32)">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt1BitmapContent(System.Int32,System.Int32) with the specified width and height.
  </summary>
      <param name="width">Width of the bitmap.</param>
      <param name="height">Height of the bitmap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt1BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Attempts to get the GPU texture format of this bitmap type.</summary>
      <param name="format">Matching GPU format.</param>
      <returns>true if the bitmap matches a GPU format; otherwise false.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt1BitmapContent">
      <summary>Provides methods and properties for managing compressed textures (DXT1). </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt3BitmapContent.#ctor(System.Int32,System.Int32)">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt3BitmapContent(System.Int32,System.Int32) with the specified width and height.
  </summary>
      <param name="width">Width of the bitmap.</param>
      <param name="height">Height of the bitmap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt3BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Attempts to get the GPU texture format of this bitmap type.</summary>
      <param name="format">Matching GPU format.
      </param>
      <returns>true if the bitmap matches a GPU format; otherwise false.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt3BitmapContent">
      <summary>Provides methods and properties for managing compressed textures (DXT3).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt5BitmapContent.#ctor(System.Int32,System.Int32)">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt5BitmapContent(System.Int32,System.Int32) with the specified width and height.
  </summary>
      <param name="width">Width of the bitmap.</param>
      <param name="height">Height of the bitmap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt5BitmapContent.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Attempts to get the GPU texture format of this bitmap type.</summary>
      <param name="format">Matching GPU format.
      </param>
      <returns>true if the bitmap matches a GPU format; otherwise false.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Dxt5BitmapContent">
      <summary>Provides methods and properties for managing compressed textures (DXT5).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.DxtBitmapContent.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.DxtBitmapContent(System.Int32,System.Int32,System.Int32) with the specified size.
  </summary>
      <param name="blockSize">Size of the block.</param>
      <param name="width">Width of the bitmap.</param>
      <param name="height">Height of the bitmap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.DxtBitmapContent.#ctor(System.Int32)">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.DxtBitmapContent(System.Int32) with the specified compression.
  </summary>
      <param name="blockSize">Size of the block.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.DxtBitmapContent.GetPixelData">
      <summary>Gets the bitmap content as an array of encoded bytes.</summary>
      <returns>Contents of the bitmap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.DxtBitmapContent.SetPixelData(System.Byte[])">
      <summary>Sets the contents of the bitmap using an encoded byte array.</summary>
      <param name="sourceData">Contents to be copied to destination bitmap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.DxtBitmapContent.TryCopyFrom(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Attempts to copy from a specified region to another.</summary>
      <param name="sourceBitmap">Bitmap being copied from.</param>
      <param name="sourceRegion">Region of bitmap being copied.</param>
      <param name="destinationRegion">Region being copied to.</param>
      <returns>trueif successful; otherwise false.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.DxtBitmapContent.TryCopyTo(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>
    Attempts to copy the specified region to another.</summary>
      <param name="destinationBitmap">Bitmap being copied to.</param>
      <param name="sourceRegion">Region of source bitmap being copied from.</param>
      <param name="destinationRegion">Region of destination bitmap.</param>
      <returns>trueif successful; otherwise false.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.DxtBitmapContent" />
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectMaterialContent.#ctor">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectMaterialContent.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectMaterialContent.EffectKey">
      <summary>Use this key search for the related effect property in the OpaqueDataDictionary object.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectMaterialContent.Effect">
      <summary>Gets or sets the effect property.</summary>
      <returns>Reference to an external DirectX Effect file.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.EffectMaterialContent">
      <summary>Provides support for representing DirectX Effect materials.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent.#ctor">
      <summary>Creates an instance of GeometryContent.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent.Indices">
      <summary>Gets the material for this geometry batch.</summary>
      <returns>Collection of associated indices.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent.MaterialContent">
      <summary>Gets or sets the material of the parent mesh.</summary>
      <returns>Parent mesh of the geometry batch.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent.Parent">
      <summary>Gets or sets the vertex data of the geometry batch.</summary>
      <returns>Vertex content of the geometry batch.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent.Vertices">
      <summary>Gets the set of vertex batches for the geometry batch.</summary>
      <returns>List of associated vertex contents.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent">
      <summary>Provides properties that define various aspects of a geometry batch.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContentCollection.GetParent(Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent)">
      <summary>Gets the parent of this object.</summary>
      <param name="child">Object whose parent is being retrieved.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContentCollection.SetParent(Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent,Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent)">
      <summary>Sets the parent of this object.</summary>
      <param name="child">Object whose parent is being set.</param>
      <param name="parent">Object being assigned as a parent.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContentCollection">
      <summary>Provides methods for maintaining a collection of geometry batches that make up a mesh.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndexCollection">
      <summary>Provides methods for maintaining a list of index values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>Determines if the specified position is in the collection.</summary>
      <param name="item">Position being searched for in the collection.</param>
      <returns>true if the position was found; otherwise false.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.CopyTo(Microsoft.Xna.Framework.Vector3[],System.Int32)">
      <summary>Copies the specfied positions to an array, starting at the specified index.</summary>
      <param name="array">Array of positions to be copied.</param>
      <param name="arrayIndex">Index of the first copied position.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.GetEnumerator">
      <summary>Gets an enumerator interface for reading the position values.</summary>
      <returns>Interface for enumerating the collection of position values.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.IndexOf(Microsoft.Xna.Framework.Vector3)">
      <summary>Gets the index of the specified position in a collection.</summary>
      <param name="item">Position being searched for.</param>
      <returns>Index of the specified position.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.Count">
      <summary>Number of positions in the collection.</summary>
      <returns>Number of positions.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection.Item">
      <summary>Gets or sets the position at the specified index.</summary>
      <param name="index" />
      <returns>Position located at index.
    </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.IndirectPositionCollection">
      <summary>Provides methods for maintaining a list of vertex positions.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.#ctor">
      <summary>Initializes a new instance of MaterialContent.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.GetReferenceTypeProperty``1(System.String)">
      <summary>Gets a reference type from the !Framework.Content.Pipeline.OpaqueDataDictionary collection.</summary>
      <param name="key">Key of the property being retrieved.</param>
      <returns>Type of the related opaque data.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.GetTexture(System.String)">
      <summary>Gets a value from the Textures collection.</summary>
      <param name="key">Key of the texture being retrieved.</param>
      <returns>Reference to a texture from the collection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.GetValueTypeProperty``1(System.String)">
      <summary>Gets a value type from the !Framework.Content.Pipeline.OpaqueDataDictionary collection.</summary>
      <param name="key">Key of the value type being retrieved.</param>
      <returns>Index of the value type beng retrieved.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.SetProperty``1(System.String,`0)">
      <summary>Sets a value in the contained OpaqueDataDictionary object.</summary>
      <param name="key">Name of the key being modified.</param>
      <param name="value">Value being set.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.SetTexture(System.String,Microsoft.Xna.Framework.Content.Pipeline.ExternalReference.{Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent})">
      <summary>Sets a value in the contained TextureReferenceDictionary object.</summary>
      <param name="key">Name of the key being modified.</param>
      <param name="value">Value being set.
      </param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent.Textures">
      <summary>Gets the texture collection of the material.</summary>
      <returns>Collection of textures used by the material.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent">
      <summary>Provides methods and properties for maintaining a collection of named texture references.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.AddTriangleVertex(System.Int32)">
      <summary>Adds a vertex into the index collection.</summary>
      <param name="indexIntoVertexCollection">Index of the inserted vertex, in the collection. This corresponds to the value returned by MeshBuilder.CreatePosition.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.CreatePosition(System.Single,System.Single,System.Single)">
      <summary>Inserts the specified vertex position into the vertex channel.</summary>
      <param name="x">Value of the x component of the vector.</param>
      <param name="y">Value of the y component of the vector.</param>
      <param name="z">Value of the z component of the vector.</param>
      <returns>Index of the inserted vertex.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.CreatePosition(Microsoft.Xna.Framework.Vector3)">
      <summary>Inserts the specified vertex position into the vertex channel at the specified index.</summary>
      <param name="pos">Value of the vertex being inserted.</param>
      <returns>Index of the vertex being inserted.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.CreateVertexChannel``1(System.String)">
      <param name="usage">Describes how the channel is used. Use this parameter as a look-up into a VertexChannelCollection. It is strongly recommended that you choose a usage from the following list.BinormalColorNormalTangentTextureCoordinateWeightsFor more information, see VertexChannelNames.</param>
      <returns>Index identifying the new data channel. Use this as a parameter when calling MeshBuilder.SetVertexChannelData.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.FinishMesh">
      <summary>Ends the creation of a mesh.</summary>
      <returns>Resultant mesh.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.SetMaterial(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MaterialContent)">
      <summary>Specifies the material used by the current mesh.</summary>
      <param name="material">The material to be used by the mesh.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.SetOpaqueData(Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary)">
      <summary>Initializes the opaque data for a specific mesh object.</summary>
      <param name="opaqueData">Opaque data to be applied to the GeometryContent object of the next triangle.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.SetVertexChannelData(System.Int32,System.Object)">
      <summary>Sets the specified vertex data with new data.</summary>
      <param name="vertexDataIndex">Index of the vertex data channel being set. This should match the index returned by MeshBuilder.CreateVertexChannel``1(System.String).</param>
      <param name="channelData">New data values for the vertex data. The data type being set must match the data type for the vertex channel specified by vertexDataIndex.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.StartMesh(System.String)">
      <summary>Initializes the creation of a mesh.</summary>
      <param name="name">Name of the mesh.</param>
      <returns>Object used when building the mesh.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.MergeDuplicatePositions">
      <summary>Gets or sets the current value for position merging of the mesh.</summary>
      <returns>Current value of the property.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.MergePositionTolerance">
      <returns>Tolerance value used by the mesh.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.Name">
      <returns>Name of the MeshContent object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder.SwapWindingOrder">
      <summary>Reverses the triangle winding order of the specified mesh.</summary>
      <returns>Current value of the winding order.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshBuilder">
      <summary>Provides support for writing a custom importer for mesh objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent.#ctor">
      <summary>Initializes a new instance of MeshContent.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent.Geometry">
      <summary>Gets the list of geometry batches for the mesh.</summary>
      <returns>Collection of geometry batches.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent.Positions">
      <summary>Gets the list of vertex position values.</summary>
      <returns>Collection of vertex positions.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent">
      <summary>Provides properties and methods that define various aspects of a mesh.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.CalculateNormals(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent,System.Boolean)">
      <summary>Computes new normals for the specified mesh.</summary>
      <param name="mesh">Mesh containing the normals being computed.</param>
      <param name="overwriteExistingNormals">true if existing normals are to be discarded; false otherwise. Existing normals are searched for as if they are a vertex data channel (of type Microsoft.Xna.Framework.Vector3) with the name VertexChannelNames.Normal.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.CalculateTangentFrames(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent,System.String,System.String,System.String)">
      <summary>Compute tangent frames for the given mesh.</summary>
      <param name="mesh">The target mesh used to create the tangent frame. All geometies in this mesh must have normal vertex channels.</param>
      <param name="textureCoordinateChannelName">The texture coordinate channel used for computing the tangent frame.</param>
      <param name="tangentChannelName">Target channel name used to store calculated tangents. A tangent channel is not generated if  or an empty string is specified.</param>
      <param name="binormalChannelName">Target channel name used to store calculated bi-normals. A tangent channel is not generated if  or an empty string is specified.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.MergeDuplicatePositions(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent,System.Single)">
      <summary>Processes the PositionCollection collection of the specified mesh, merging any values that are closer together than the specified tolerance threshold.</summary>
      <param name="mesh">Mesh to be processed.</param>
      <param name="tolerance">Tolerance to be used when determining duplicate positions. Pass a value of 0 to merge only those values that are exactly identical.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.MergeDuplicateVertices(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent)">
      <summary>
    Processes the VertexContent.PositionIndices and VertexChannel data of the specified mesh, merging any duplicate vertices.
</summary>
      <param name="mesh">Mesh to be processed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.MergeDuplicateVertices(Microsoft.Xna.Framework.Content.Pipeline.Graphics.GeometryContent)">
      <summary>
    Processes the VertexContent.PositionIndices and VertexChannel data of the specified geometry batch, merging any duplicate vertices.
</summary>
      <param name="geometry">Geometry batch to be processed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.OptimizeForCache(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent)">
      <summary>Reorders the indices and vertices of the mesh for optimal GPU cache performance.</summary>
      <param name="mesh">Mesh to be optimized.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.SwapWindingOrder(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshContent)">
      <summary>Reverses the triangle winding order of the specified mesh.</summary>
      <param name="mesh">The mesh to be modified.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper.TransformScene(Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent,Microsoft.Xna.Framework.Matrix)">
      <summary>Applies a transformation to the contents of a scene hierarchy.</summary>
      <param name="scene">Scene hierarchy being transformed.</param>
      <param name="transform">Matrix used in the transformation</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MeshHelper">
      <summary>Provides methods for manipulating mesh data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChain.#ctor(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent)">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChain(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent) with the specified mipmap.</summary>
      <param name="bitmap">Image containing a mipmap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChain.#ctor">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChain.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChain.op_Implicit(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent)">
      <summary>TBD</summary>
      <param name="bitmap">TBD</param>
      <returns>TBD</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChain">
      <summary>Provides methods for accessing a mipmap chain.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChainCollection">
      <summary>Provides methods for maintaining a mipmap chain.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.ModelContent">
      <summary>Base class for storing design-time data for a game asset.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.ModelMeshContent">
      <summary>Stores design time data for a mesh game asset.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.ModelMeshContentCollection">
      <summary>A collection of ModelMeshContent objects.
</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.ModelMeshPartContent">
      <summary>Stores design time data for a mesh part.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.ModelMeshPartContentCollection">
      <summary>Collection of ModelMeshPartContent objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent.#ctor">
      <summary>Creates an instance of NodeContent.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent.AbsoluteTransform">
      <summary>Gets the value of the local NodeContent.Transform property, multiplied by the NodeContent.AbsoluteTransform of the parent.</summary>
      <returns>Matrix of the NodeContent object.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent.Animations">
      <summary>Gets the set of animations belonging to this node.</summary>
      <returns>Collection of animations for this content item.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent.Children">
      <summary>Gets the children of the NodeContent object.</summary>
      <returns>Collection of children.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent.Parent">
      <summary>Gets the parent of this NodeContent object.</summary>
      <returns>Parent of the NodeContent object, or null if this object is the root of the scene.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent.Transform">
      <summary>Gets the transform matrix of the scene.</summary>
      <returns>Transform matrix used by the scene.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContent">
      <summary>Provides a base class for graphics types that define local coordinate systems.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.NodeContentCollection">
      <summary>Provides a collection of all NodeContent objects in a spatial hierarchy.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.#ctor(System.Int32,System.Int32)">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1(System.Int32,System.Int32) with the specified width and height.
  </summary>
      <param name="width">Width of the blank pixel bitmap.</param>
      <param name="height">Height of the blank pixel bitmap.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.#ctor">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.GetPixelData">
      <summary>Gets the bitmap content as an array of encoded bytes.</summary>
      <returns>Contents of the bitmap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.GetPixel(System.Int32,System.Int32)">
      <summary>Gets the pixel value at the specified location in the bitmap.</summary>
      <param name="x">The x component of a bitmap pixel.</param>
      <param name="y">The y component of a bitmap pixel.</param>
      <returns>Value of the pixel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.GetRow(System.Int32)">
      <summary>Gets an array containing a single row of bitmap data.</summary>
      <param name="y">The y component of the bitmap row.</param>
      <returns>Array containing the bitmap row data.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.ReplaceColor(`0,`0)">
      <summary>Searches for all pixels matching the specified color and replaces them with a new value.</summary>
      <param name="originalColor">Color being searched for.</param>
      <param name="newColor">Color used to replace originalColor.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.SetPixelData(System.Byte[])">
      <summary>Sets the bitmap content using the specified encoded byte array.</summary>
      <param name="sourceData">New bitmap content.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.SetPixel(System.Int32,System.Int32,`0)">
      <summary>Sets the pixel value at the specified location in the bitmap.</summary>
      <param name="x">The x component of a bitmap pixel.</param>
      <param name="y">The y component of a bitmap pixel.</param>
      <param name="value">New pixel value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.ToString">
      <summary>Gets a string description of the bitmap.</summary>
      <returns>Description of the bitmap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.TryCopyFrom(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle)">
      <summary>Attempts to copy a region from the specified bitmap.</summary>
      <param name="sourceBitmap">Bitmap content being copied.</param>
      <param name="sourceLocation">Location of the upper-left region of sourceBitmap being copied from.</param>
      <param name="destinationRegion">Region of destination bitmap to be overwritten.</param>
      <returns>true if region copy is supported; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.TryCopyTo(Microsoft.Xna.Framework.Content.Pipeline.Graphics.BitmapContent,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Rectangle)">
      <summary>Attempts to copy a region to the specified bitmap.</summary>
      <param name="destinationBitmap">Bitmap to be copied to.</param>
      <param name="sourceLocation">Location of upper-left region to be copied.</param>
      <param name="destinationRegion">Target region for the copied content.</param>
      <returns>true if region copy is supported; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1.TryGetFormat(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Gets the GPU texture format that corresponds to the specified bitmap type.</summary>
      <param name="format">Format being compared.</param>
      <returns>true if the bitmap matches format; otherwise false.
    </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PixelBitmapContent`1">
      <summary>Provides methods for maintaining a 2D array of pixel values.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.PositionCollection">
      <summary>Provides a collection of vertex position values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Texture2DContent.#ctor">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.Texture2DContent.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Texture2DContent.Mipmaps">
      <summary>Gets or sets the collection of mipmaps containing the texture image data.</summary>
      <returns>Mipmap chain containing the texture images of an object.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.Texture2DContent">
      <summary>Represents a regular two-dimensional texture.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent.#ctor(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChainCollection)">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent(Microsoft.Xna.Framework.Content.Pipeline.Graphics.MipmapChainCollection) with the specified face collection.</summary>
      <param name="faces">Mipmap chain containing the face collection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent.ConvertBitmapType(System.Type)">
      <summary>Converts all bitmaps for this texture to a different format.</summary>
      <param name="newBitmapType">Type being converted to. The new type must be a subclass of BitmapContent, such as PixelBitmapContent`1 or DxtBitmapContent.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent.GenerateMipmaps(System.Boolean)">
      <summary>Generates a full set of mipmaps for the texture.</summary>
      <param name="overwriteExistingMipmaps">true if the existing mipmap set is replaced with the new set; otherwise false.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent.Validate(System.Boolean)">
      <summary>Verifies that all contents of this texture are present and correct.</summary>
      <param name="facesMustHaveSameMipCount">Result of the validation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent.Validate">
      <summary>Verifies that all contents of this texture are present and correct.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent.Faces">
      <summary>Collection of image faces that hold a single mipmap chain for a regular 2D texture, six chains for a cube map, or an arbitrary number for volume and array textures.</summary>
      <returns>Collection of object faces.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureContent">
      <summary>Provides a base class for all texture objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureCubeContent.#ctor">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureCubeContent.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureCubeContent.Validate">
      <summary>Verifies that all contents of the cube map are present and correct.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureCubeContent">
      <summary>Provides validation for a cube map texture, which contains an array of six image faces.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureReferenceDictionary.#ctor">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureReferenceDictionary.
  </summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.TextureReferenceDictionary">
      <summary>Provides a collection of named references to texture files.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VectorConverter.GetConverter``2">
      <summary>Gets a Converter delegate that can convert one packed vector representation to another.</summary>
      <returns>A Converter delegate that encodes or decodes TInput to TOutput.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VectorConverter.TryGetSurfaceFormat(System.Type,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Gets the GPU texture format that corresponds to a managed vector type.</summary>
      <param name="vectorType">Can be one of the following:!Framework.Graphics.PackedVector.IPackedVectorSystem.SingleSystem.Single!Framework.Vector2!Framework.Vector3!Framework.Vector4</param>
      <param name="surfaceFormat">Surface format being compared.</param>
      <returns>true if a match is found; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VectorConverter.TryGetVectorType(Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Type)">
      <summary>Searches for a managed vector type that corresponds to a GPU texture format.</summary>
      <param name="surfaceFormat">Surface format being compared.</param>
      <param name="vectorType">Corresponding managed vector type.
      </param>
      <returns>true if a match is found; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VectorConverter.TryGetVectorType(Microsoft.Xna.Framework.Graphics.VertexElementFormat,System.Type)">
      <summary>Searches for a managed vector type that corresponds to a GPU vertex format.</summary>
      <param name="vertexElementFormat">Texture format being matched.</param>
      <param name="vectorType">Corresponding managed vector type.</param>
      <returns>true if a match is found; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VectorConverter.TryGetVertexElementFormat(System.Type,Microsoft.Xna.Framework.Graphics.VertexElementFormat)">
      <summary>Gets the GPU vertex format that corresponds to a managed vector type.</summary>
      <param name="vectorType">Can be one of the following:!Framework.Graphics.PackedVector.IPackedVectorSystem.SingleSystem.Single!Framework.Vector2!Framework.Vector3!Framework.Vector4</param>
      <param name="vertexElementFormat">Corresponding vertex element type.</param>
      <returns>true if a match is found; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VectorConverter">
      <summary>Provides methods for converting data between different packed vector representations.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexBufferContent.#ctor(System.Int32)">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexBufferContent(System.Int32) of the specified size.</summary>
      <param name="size">Size of the new vertex buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexBufferContent.#ctor">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexBufferContent.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexBufferContent.SizeOf(System.Type)">
      <summary>Gets the size of the specified type, in bytes.</summary>
      <param name="type">Type being computed.</param>
      <returns>Size of the type.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexBufferContent.Write(System.Int32,System.Int32,System.Type,System.Collections.IEnumerable)">
      <param name="offset">Offset to begin writing.</param>
      <param name="stride">Stride of the data being written, in bytes.</param>
      <param name="dataType">Type of data being written</param>
      <param name="data">Enumerated collection of data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexBufferContent.Write``1(System.Int32,System.Int32,System.Collections.Generic.IEnumerable.{`0})">
      <param name="offset">Offset to begin writing.</param>
      <param name="stride">Stride of the data being written, in bytes.</param>
      <param name="data">Enumerated collection of data.
      </param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexBufferContent.VertexData">
      <returns>Raw data of the packed vertex data.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexBufferContent">
      <summary>Provides methods and properties for managing a design-time vertex buffer that holds packed vertex data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.Contains(System.Object)">
      <summary>Determines whether the specified element is in the channel.</summary>
      <param name="value">Element being searched for.</param>
      <returns>true if the element is present; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the channel to an array, starting at the specified index.</summary>
      <param name="array">Array that will receive the copied channel elements.</param>
      <param name="index">Starting index for copy operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.GetEnumerator">
      <summary>Gets an enumerator interface for reading channel content.</summary>
      <returns>Enumeration of the channel content.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.IndexOf(System.Object)">
      <summary>Gets the index of the specified item.</summary>
      <param name="value">Item whose index is to be retrieved.</param>
      <returns>Index of specified item.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.ReadConvertedContent``1">
      <summary>Reads channel content and automatically converts it to the specified vector format.</summary>
      <returns>Vector format to convert returned data to.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.Count">
      <summary>Gets the number of elements in the vertex channel</summary>
      <returns>Number of elements.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.ElementType">
      <summary>Gets the type of data contained in this channel.</summary>
      <returns>Type of data stored in the vertex channel.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.Item">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index" />
      <returns>Element at the specified index.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel.Name">
      <summary>Gets the name of the vertex channel.</summary>
      <returns>Name of the channel.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel">
      <summary>Provides methods and properties for maintaining a vertex channel.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Add(System.String,System.Type,System.Collections.IEnumerable)">
      <summary>Adds a new vertex channel to the end of the collection.</summary>
      <param name="name">Name of the new channel.</param>
      <param name="elementType">Type of data to be contained in the new channel.</param>
      <param name="channelData">Initial data for the new channel. If null, the channel is filled with the default value for that type.</param>
      <returns>The newly added vertex channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.System.Collections.Generic.ICollection&lt;Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel&gt;.Add(Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel)">
      <summary>Adds a new vertex channel to the collection.</summary>
      <param name="item">Vertex channel to be added.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Add``1(System.String,System.Collections.Generic.IEnumerable.{`0})">
      <summary>Adds a new vertex channel to the end of the collection.</summary>
      <param name="name">Name of the new channel.</param>
      <param name="channelData">Initial data for the new channel. If null, the channel is filled with the default value for that type.
      </param>
      <returns>The newly added vertex channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Clear">
      <summary>Removes all vertex channels from the collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Contains(Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel)">
      <summary>Determines whether the collection contains the specified vertex channel.</summary>
      <param name="item">Name of the channel being searched for.</param>
      <returns>true if the channel was found; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Contains(System.String)">
      <summary>Determines whether the collection contains the specified vertex channel.</summary>
      <param name="name">Name of the channel being searched for.</param>
      <returns>true if the channel was found; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.GetEnumerator">
      <summary>Gets an enumerator that iterates through the vertex channels of a collection.</summary>
      <returns>Enumerator for the collection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Get``1(System.String)">
      <summary>Gets the vertex channel with the specified name and content type.</summary>
      <param name="name">Name of a vertex channel.</param>
      <returns>Type of a vertex channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Get``1(System.Int32)">
      <summary>Gets the vertex channel with the specified index and content type.</summary>
      <param name="index">Index of a vertex channel.</param>
      <returns>Type of a vertex channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.IndexOf(Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel)">
      <summary>Determines the index of the specified vertex channel.</summary>
      <param name="item">Vertex channel being searched for.</param>
      <returns>Index of the vertex channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.IndexOf(System.String)">
      <summary>Determines the index of a vertex channel with the specified name.</summary>
      <param name="name">Name of the vertex channel being searched for.</param>
      <returns>Index of the vertex channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Insert(System.Int32,System.String,System.Type,System.Collections.IEnumerable)">
      <summary>Inserts a new vertex channel at the specified position.</summary>
      <param name="index">Index for channel insertion.</param>
      <param name="name">Name of the new channel.</param>
      <param name="elementType">Type of the new channel.</param>
      <param name="channelData">Initial data for the new channel. If null, it is filled with the default value.</param>
      <returns>The inserted vertex channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Insert``1(System.Int32,System.String,System.Collections.Generic.IEnumerable.{`0})">
      <summary>Inserts a new vertex channel at the specified position.</summary>
      <param name="index">Index for channel insertion.</param>
      <param name="name">Name of the new channel.</param>
      <param name="channelData">Type of the new channel.
      </param>
      <returns>The inserted vertex channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.RemoveAt(System.Int32)">
      <summary>Removes the vertex channel at the specified index position.</summary>
      <param name="index">Index of the vertex channel being removed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Remove(Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel)">
      <summary>Removes the specified vertex channel from the collection.</summary>
      <param name="item">Name of the vertex channel being removed.</param>
      <returns>true if the channel was removed; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Remove(System.String)">
      <summary>Removes the specified vertex channel from the collection.</summary>
      <param name="name">Name of the vertex channel being removed.</param>
      <returns>true if the channel was removed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Count">
      <summary>Gets the number of vertex channels in the collection.</summary>
      <returns>Number of vertex channels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.System.Collections.Generic.ICollection&lt;Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel&gt;.IsReadOnly">
      <summary>Determines whether the collection is read-only.</summary>
      <returns>true if the collection is read-only; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Item">
      <summary>Gets or sets the vertex channel with the specified name.</summary>
      <param name="name" />
      <returns>A vertex channel object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection.Item">
      <summary>Gets or sets the vertex channel at the specified index position.</summary>
      <param name="index" />
      <returns>A vertex channel object.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelCollection">
      <summary>Provides methods and properties for managing a list of vertex data channels.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Binormal(System.Int32)">
      <summary>Gets the name of a binormal vector channel with the specified index.</summary>
      <param name="index">Zero-based index of the vector channel being retrieved.</param>
      <returns>Name of the retrieved vector channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Color(System.Int32)">
      <summary>Gets the name of a color channel with the specified index.</summary>
      <param name="index">Zero-based index of the color channel being retrieved.</param>
      <returns>Name of the retrieved color channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.DecodeBaseName(System.String)">
      <summary>Gets a channel base name stub from the encoded string format.</summary>
      <param name="encodedName">Encoded string to be decoded.</param>
      <returns>Extracted base name.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.DecodeUsageIndex(System.String)">
      <summary>Gets a channel usage index from the encoded format.</summary>
      <param name="encodedName">Encoded name to be decoded.</param>
      <returns>Resulting channel usage index.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.EncodeName(Microsoft.Xna.Framework.Graphics.VertexElementUsage,System.Int32)">
      <summary>Combines a vertex declaration usage and usage index into a string name.</summary>
      <param name="vertexElementUsage">A vertex declaration.</param>
      <param name="usageIndex">An index for the vertex declaration.</param>
      <returns>Resulting encoded name.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.EncodeName(System.String,System.Int32)">
      <summary>Combines a channel name stub and usage index into a string name.</summary>
      <param name="baseName">A channel base name stub.</param>
      <param name="usageIndex">A channel usage index.</param>
      <returns>Resulting encoded name.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Normal(System.Int32)">
      <summary>Gets the name of the normal channel with the specified index.</summary>
      <param name="usageIndex">Zero-based index of the normal channel being retrieved.</param>
      <returns>Normal channel at the specified index.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Normal">
      <summary>Gets the name of the primary normal channel.</summary>
      <returns>Primary normal channel name.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Tangent(System.Int32)">
      <summary>Gets the name of the tangent vector channel with the specified index.</summary>
      <param name="index">Zero-based index of the tangent vector channel being retrieved.</param>
      <returns>Name of the retrieved tangent vector channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.TextureCoordinate(System.Int32)">
      <summary>Gets the name of the texture coordinate channel with the specified index.</summary>
      <param name="index">Zero-based index of the texture coordinate channel being retrieved.</param>
      <returns>Name of the retrieved texture coordinate channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.TryDecodeUsage(System.String,Microsoft.Xna.Framework.Graphics.VertexElementUsage)">
      <summary>Gets a vertex declaration usage enumeration from the encoded string format.</summary>
      <param name="encodedName">Encoded name of a vertex declaration.</param>
      <param name="usage">Value of the declaration usage for the vertex declaration.</param>
      <returns>true if the encoded name maps to a VertexElementUsage enumeration value; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Weights(System.Int32)">
      <summary>Gets the name of an animation weights channel at the specified index.</summary>
      <param name="usageIndex">Index of the animation weight channel to be retrieved.</param>
      <returns>Name of the retrieved animation weights channel.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames.Weights">
      <summary>Gets the name of the primary animation weights channel.</summary>
      <returns>Name of the primary animation weights channel.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannelNames">
      <summary>Provides properties for managing a collection of vertex channel names.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.Contains(`0)">
      <summary>Determines whether the specified element is in the channel.</summary>
      <param name="item">Element being searched for.</param>
      <returns>true if the element is present; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the channel to an array, starting at the specified index.</summary>
      <param name="array">Array that will receive the copied channel elements.</param>
      <param name="arrayIndex">Starting index for copy operation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.GetEnumerator">
      <summary>Gets an enumerator interface for reading channel content.</summary>
      <returns>Enumeration of the channel content.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.IndexOf(`0)">
      <summary>Gets the index of the specified item.</summary>
      <param name="item">Item whose index is to be retrieved.</param>
      <returns>Index of specified item.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.ReadConvertedContent``1">
      <summary>Reads channel content and automatically converts it to the specified vector format.</summary>
      <returns>Enumeration of retrieved channel data.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.ElementType">
      <summary>Gets the type of data contained in this channel. </summary>
      <returns>Type of data stored in the vertex channel.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1.Item">
      <summary>Gets or sets the element at the specified index. </summary>
      <param name="index" />
      <returns>Element at the specified index.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexChannel`1">
      <summary>Provides methods and properties for maintaining a vertex channel.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.AddRange(System.Collections.Generic.IEnumerable.{System.Int32})">
      <summary>Appends multiple vertex indices to the end of the VertexContent.PositionIndices collection.</summary>
      <param name="positionIndexCollection">Index into the MeshContent.Positions member of the parent.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.Add(System.Int32)">
      <summary>Appends a new vertex index to the end of the VertexContent.PositionIndices collection.</summary>
      <param name="positionIndex">Index of the new entry. This can be added to the GeometryContent.Indices member of the parent.</param>
      <returns>Index into the MeshContent.Positions member of the parent.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.CreateVertexBuffer(Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexBufferContent,Microsoft.Xna.Framework.Graphics.VertexElement[])">
      <summary>Converts design time vertex position and channel data into a vertex buffer format that is recognizable by a graphics device.</summary>
      <param name="vertexBuffer">A packed vertex buffer.</param>
      <param name="vertexElements">Description of the vertex format.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.InsertRange(System.Int32,System.Collections.Generic.IEnumerable.{System.Int32})">
      <summary>
    Inserts multiple vertex indices to the VertexContent.PositionIndices collection.
  </summary>
      <param name="index">Vertex index to be inserted.</param>
      <param name="positionIndexCollection">Position of the first element of the inserted range in the collection.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.Insert(System.Int32,System.Int32)">
      <summary>
    Inserts a new vertex index to the VertexContent.PositionIndices collection.
  </summary>
      <param name="index">Vertex index to be inserted.</param>
      <param name="positionIndex">Position of new vertex index in collection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.RemoveAt(System.Int32)">
      <summary>Removes a vertex index from the specified location in both VertexContent.PositionIndices and VertexChannel&amp;lt;T&amp;gt;.</summary>
      <param name="index">Index of the vertex to be removed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.RemoveRange(System.Int32,System.Int32)">
      <summary>
    Removes a range of vertex indices from the specified location in both VertexContent.PositionIndices and VertexChannel&amp;lt;T&amp;gt;.
  </summary>
      <param name="index">Index of the first vertex index to be removed.</param>
      <param name="count">Number of indices to remove.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.Channels">
      <summary>Gets the list of named vertex data channels in the VertexContent.</summary>
      <returns>Collection of vertex data channels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.PositionIndices">
      <summary>Gets the list of position indices.</summary>
      <returns>Position of the position index being retrieved.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent.Positions">
      <summary>Gets position data from the parent mesh object.</summary>
      <returns>Collection of vertex positions for the mesh.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.Graphics.VertexContent">
      <summary>Provides methods and properties for maintaining the vertex data of a GeometryContent.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.#ctor(`0)">
      <summary>Creates an instance of ChildCollection.</summary>
      <param name="parent">Parent object of the child objects returned in the collection.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.ClearItems">
      <summary>Removes all children from the collection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.GetParent(`1)">
      <summary>Gets the parent of a child object.</summary>
      <param name="child">The child of the parent being retrieved.</param>
      <returns>The parent of the child object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.InsertItem(System.Int32,`1)">
      <summary>Inserts a child object into the collection at the specified location.</summary>
      <param name="index">The position in the collection.</param>
      <param name="item">The child object being inserted.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.RemoveItem(System.Int32)">
      <summary>Removes a child object from the collection.</summary>
      <param name="index">The index of the item being removed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.SetItem(System.Int32,`1)">
      <summary>Modifies the value of the child object at the specified location.</summary>
      <param name="index">The index of the child object being modified.</param>
      <param name="item">The new value for the child object.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2.SetParent(`1,`0)">
      <summary>Modifies the value of the parent object of the specified child object.</summary>
      <param name="child">The child of the parent being modified.</param>
      <param name="parent">The new value for the parent object.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ChildCollection`2">
      <summary>Provides a collection of child objects for a content item.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.GetCurrentFilename(Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)">
      <summary>Gets the filename currently being processed, for use in warning and error messages.</summary>
      <param name="contentIdentity">Identity of a content item. If specified, Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.GetCurrentFilename(Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)
        uses this value to refine the search. If no value os specified, the current ContentBuildLogger.PushFile(System.String) state is used.</param>
      <returns>Name of the file being processed.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.LogImportantMessage(System.String,System.Object[])">
      <summary>Outputs a high-priority status message from a content importer or processor.</summary>
      <param name="message">Message being reported.</param>
      <param name="messageArgs">Arguments for the reported message.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.LogMessage(System.String,System.Object[])">
      <summary>Outputs a low priority status message from a content importer or processor.</summary>
      <param name="message">Message being reported.</param>
      <param name="messageArgs">Arguments for the reported message.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.LogWarning(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity,System.String,System.Object[])">
      <summary>Outputs a warning message from a content importer or processor.</summary>
      <param name="helpLink">Link to an existing online help topic containing related information.</param>
      <param name="contentIdentity">Identity of the content item that generated the message.</param>
      <param name="message">Message being reported.</param>
      <param name="messageArgs">Arguments for the reported message.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.PopFile">
      <summary>Outputs a message indicating that a content asset has completed processing.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger.PushFile(System.String)">
      <summary>Outputs a message indicating that a content asset has begun processing.</summary>
      <param name="filename">Name of the file containing future messages.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentBuildLogger">
      <summary>Provides methods for reporting informational messages or warnings from content importers and processors.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.#ctor(System.String)">
      <summary>
    Initializes a new instance of ContentIdentity with the specified values.
  </summary>
      <param name="sourceFilename">The absolute path to the file name of the asset source.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.#ctor(System.String,System.String)">
      <summary>
    Initializes a new instance of ContentIdentity with the specified values.
  </summary>
      <param name="sourceFilename">The absolute path to the file name of the asset source.</param>
      <param name="sourceTool">The name of the DCC tool that created the asset.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.#ctor">
      <summary>
    Initializes a new instance of ContentIdentity.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.#ctor(System.String,System.String,System.String)">
      <summary>
    Initializes a new instance of ContentIdentity with the specified values.
  </summary>
      <param name="sourceFilename">The absolute path to the file name of the asset source.</param>
      <param name="sourceTool">The name of the DCC tool that created the asset.</param>
      <param name="fragmentIdentifier">Specific location of the content item within the larger source file. For example, this could be a line number in the file.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.FragmentIdentifier">
      <summary>Gets or sets the specific location of the content item within the larger source file.</summary>
      <returns>Location of the content item. This location can be in various forms. For example, this could indicate a line number within the source file.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.SourceFilename">
      <summary>Gets or sets the file name of the asset source.</summary>
      <returns>The absolute path to the file name of the asset source.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity.SourceTool">
      <summary>Gets or sets the creation tool of the asset.</summary>
      <returns>The name of the DCC tool that created the asset.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity">
      <summary>Provides properties that define error-related values such as the source file and creation tool of the game asset.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute.#ctor(System.String[])">
      <summary>Initializes a new instance of ContentImporterAttribute and sets the file name extensions supported by the importer.
  </summary>
      <param name="fileExtensions">The list of file name extensions supported by the importer. Prefix each extension with a '.'.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of ContentImporterAttribute and sets the file name extension supported by the importer.</summary>
      <param name="fileExtension">The list of file name extensions supported by the importer. Prefix each extension with a '.'.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute.CacheImportedData">
      <summary>Gets and sets the caching of the content during importation.</summary>
      <returns>If true, imported content is cached in an intermediate file (managed by XNA). By default, caching is not enabled.Caching provides significantly faster iteration times when changing the processing code for a file format. A good example would be a third-party DCC that needs to execute before importation can occur. However, caching is not appropriate for all importersâ€”for example, caching bulky content that is quick to import, such as bitmap images.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute.DisplayName">
      <returns>Name displayed in the user interface.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute.FileExtensions">
      <summary>Gets the supported file name extensions of the importer.</summary>
      <returns>An enumerated list of supported file name extensions. Extensions are prefixed by '.' .</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterAttribute">
      <summary>Provides properties that identify and provide metadata about the importer, such as supported file extensions and caching information.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext.Logger">
      <summary>Gets the logger for an importer.</summary>
      <returns>Logger that contains information on warnings and debug messages generated during importation.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext">
      <summary>Provides properties that define logging behavior for the importer.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentImporter`1.#ctor">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.ContentImporter`1.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentImporter`1.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
      <param name="filename">Name of a game asset file.</param>
      <param name="context">
        Contains information for importing a game asset, such as a logger interface.
      </param>
      <returns>Resulting game asset.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentImporter`1">
      <summary>Implements a file format importer for use with game assets.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentItem.#ctor">
      <summary>
    Initializes a new instance of ContentItem.
  </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentItem.Identity">
      <summary>Gets or sets the identity of the content item.</summary>
      <returns>The identity of the content item.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentItem.Name">
      <summary>Gets or sets the name of the content item.</summary>
      <returns>The name of the content item.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentItem.OpaqueData">
      <summary>Gets the opaque data of the content item.</summary>
      <returns>The opaque data of the content item, stored as a set of key/value pairs.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentItem">
      <summary>Provides properties that define various aspects of content stored in the XNA intermediate format.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorAttribute.#ctor">
      <summary>Initializes an instance of Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorAttribute.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorAttribute.DisplayName">
      <returns>Name displayed in the user interface.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorAttribute">
      <summary>Gets any existing content processor components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.BuildAndLoadAsset``2(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference.{`0},System.String,System.Type,Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary)">
      <summary>Triggers a nested build of the specified asset and then loads the result into memory.</summary>
      <param name="sourceAsset">Reference to the asset to be built.</param>
      <returns>Copy of the final converted content object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.BuildAsset``2(Microsoft.Xna.Framework.Content.Pipeline.ExternalReference.{`0},System.String,System.String,System.Type,Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary)">
      <summary>Triggers a nested build of the specified asset.</summary>
      <param name="sourceAsset">Reference to the asset to be built.</param>
      <returns>A reference to the final compiled content. This file may not be up to date when the method returns but will be available to be loaded by the game at run time.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.Convert``2(`0)">
      <summary>Converts a content item object using the specified content processor.</summary>
      <param name="input">Type of the content item object being converted.</param>
      <returns>The converted output type.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.Convert``2(`0,System.Type)">
      <summary>Converts a content item object using the specified content processor.</summary>
      <param name="input">Type of the content item object being converted.</param>
      <param name="processorType">Type of the processor used in the conversion.</param>
      <returns>The converted output type.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.BuildConfiguration">
      <summary>Gets the name of the current content build configuration.</summary>
      <returns>Name of the build configuration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.Logger">
      <summary>Gets the logger interface used for status messages or warnings.</summary>
      <returns>Logger interface used by the processor.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.Parameters">
      <summary>Gets the collection of parameters used by the content processor.</summary>
      <returns>Collection of content processor parameters.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext.TargetPlatform">
      <summary>Gets the current content build target platform.</summary>
      <returns>Name of the target platform for the current content build.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext">
      <summary>Provides access to custom processor parameters, methods for converting member data, and triggering nested builds.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2.#ctor">
      <summary>Initializes a new instance of the Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2 class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2.Process(`0,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
      <summary>Processes the specified input data and returns the result.</summary>
      <param name="input">Existing content object being processed.</param>
      <param name="context">Contains any required custom process parameters.</param>
      <returns>A typed object representing the processed input.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2.ITypedContentProcessor.Process(System.Object,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
      <summary>Processes the specified input data using the content processor.
  </summary>
      <param name="input">Game asset being processed.</param>
      <param name="context">
        Contains information for processing a game asset.
      </param>
      <returns>Resulting processed game asset.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentProcessor`2">
      <summary>Provides a base class to use when developing custom processor components. All processors must derive from this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of ContentSerializerAttribute with the specified XML element name.</summary>
      <param name="elementName">Name of the XML element to be serialized.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerAttribute.#ctor">
      <summary>Initializes a new instance of ContentSerializerAttribute.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerAttribute.AllowNull">
      <summary>Determines whether the member is to have a null value.</summary>
      <returns>true if the member has a null value; false otherwise. The default value is true.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerAttribute.CollectionItemName">
      <summary>Gets or sets the XML element name for each item in a collection.</summary>
      <returns>Name for each collection item. The default value is "Item".</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerAttribute.ElementName">
      <summary>Gets or sets the XML element name.</summary>
      <returns>Name of the managed type member to be serialized. The default value is the name of the managed type member.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerAttribute.FlattenContent">
      <summary>Determines whether the member contents is written directly into the current XML context, rather than wrapping the member in a new XML element.</summary>
      <returns>true if the contents is not wrapped; false otherwise. The default value is false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerAttribute.Optional">
      <summary>Determines whether an element is serialized depending on certain conditions.</summary>
      <returns>true if the element is optional and can be skipped or ignored during serialization; false otherwise. The default value is false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerAttribute.SharedResource">
      <summary>Determines whether the member is referenced from multiple parents.</summary>
      <returns>true if the element is optional and can be skipped or ignored during serialization; false otherwise. The default value is false.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerAttribute">
      <summary>Provides methods and properties for marking a field or property for serialization purposes.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerCollectionItemNameAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of ContentSerializerCollectionItemNameAttribute with the specified XML element name.</summary>
      <param name="collectionItemName">Name of the XML element to be serialized.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerCollectionItemNameAttribute.CollectionItemName">
      <summary>Gets or sets the XML element name for each item in the collection.</summary>
      <returns>Element name of the item.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerCollectionItemNameAttribute">
      <summary>Provides methods and properties for marking collection items for serialization purposes.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerIgnoreAttribute.#ctor">
      <summary>Initializes a new instance of ContentSerializerIgnoreAttribute.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ContentSerializerIgnoreAttribute">
      <summary>Enables the marking of public fields or properties as non-serialized.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ExternalReference`1.#ctor(System.String)">
      <summary>
    Initializes a new instance of ExternalReference.
  </summary>
      <param name="filename">The name of the referenced file.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.ExternalReference`1.#ctor">
      <summary>
    Initializes a new instance of ExternalReference.
  </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.ExternalReference`1.Filename">
      <summary>Gets and sets the file name of an ExternalReference.</summary>
      <returns>The absolute file name of the external data reference.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ExternalReference`1">
      <summary>Specifies external references to a data file for the content item.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.IContentImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
      <summary>Imports an asset from the specified file.</summary>
      <param name="filename">Name of the game asset file.</param>
      <param name="context">
        A ContentImporterContext class containing information for importing a game asset, such as a logger interface.
      </param>
      <returns>Resulting game asset.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.IContentImporter">
      <summary>Accesses a statically typed ContentImporter`1 instance from generic code using dynamic typing.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.IContentProcessor.Process(System.Object,Microsoft.Xna.Framework.Content.Pipeline.ContentProcessorContext)">
      <summary>Processes the specified input data and returns the result.</summary>
      <param name="input">Existing content object being processed.</param>
      <param name="context">Contains any required custom process parameters.</param>
      <returns>An object representing the processed input.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.IContentProcessor.InputType">
      <summary>Gets the object type returned by IContentProcessor.Process.</summary>
      <returns>Type of object returned by the processor.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.IContentProcessor.OutputType">
      <summary>
    Gets the expected object type of the input parameter to IContentProcessor.Process.
  </summary>
      <returns>Object type of the input parameter.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.ITypedContentProcessor">
      <summary>Provides methods and properties for accessing a statically typed ContentProcessor subclass, using dynamically typed object data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.IntermediateImporter.#ctor">
      <summary>Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.IntermediateImporter.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.IntermediateImporter.Import(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext)">
      <summary>Called by the framework when data from an intermediate XML format.</summary>
      <param name="filename">The name of the intermediate XML file to be imported.</param>
      <param name="context">A Microsoft.Xna.Framework.Content.Pipeline.ContentImporterContext class containing information for importing an intermediate XML file.</param>
      <returns>Representation of that object using the XNA intermediate format.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.IntermediateImporter">
      <summary>Provides support for implementing an importer that reads intermediate XML files.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the InvalidContentException class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If innerException is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.#ctor(System.String)">
      <summary>Initializes a new instance of the InvalidContentException class with the specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.#ctor(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity,System.Exception)">
      <summary>
    Initializes a new instance of the InvalidContentException class with the specified error message, the identity of the content throwing the exception, and a reference to the inner exception that is the cause of this exception.
  </summary>
      <param name="message">A message that describes the error.</param>
      <param name="contentIdentity">Information about the content item that caused this error, including the file name. In some cases, a location within the file (of the problem) is specified.</param>
      <param name="innerException">The exception that is the cause of the current exception. If innerException is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.#ctor(System.String,Microsoft.Xna.Framework.Content.Pipeline.ContentIdentity)">
      <summary>
    Initializes a new instance of the InvalidContentException class with the specified error message and the identity of the content throwing the exception.
  </summary>
      <param name="message">A message that describes the error.</param>
      <param name="contentIdentity">Information about the content item that caused this error, including the file name. In some cases, a location within the file (of the problem) is specified.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
    Initializes a new instance of the InvalidContentException class with information on serialization and streaming context for the related content item.</summary>
      <param name="serializationInfo">Information necessary for serialization and deserialization of the content item.</param>
      <param name="streamingContext">Information necessary for the source and destination of a given serialized stream. Also provides an additional caller-defined context.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.#ctor">
      <summary>Initializes a new instance of the InvalidContentException class</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, returns information about the exception.</summary>
      <param name="info">Information necessary for serialization and deserialization of the content item.</param>
      <param name="context">Information necessary for the source and destination of a given serialized stream. Also provides an additional caller-defined context.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException.ContentIdentity">
      <summary>Gets or sets the identity of the content item that caused the exception.</summary>
      <returns>The identity of the bad content item.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.InvalidContentException">
      <summary>Thrown when errors are encountered in content during processing.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.#ctor">
      <summary>Initializes an instance of NamedValueDictionary.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.AddItem(System.String,`0)">
      <summary>Adds an element to the dictionary.</summary>
      <param name="key">Identity of the key of the new element.</param>
      <param name="value">The value of the new element.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Add(System.String,`0)">
      <summary>Adds the specified key and value to the dictionary.</summary>
      <param name="key">Identity of the key of the new data pair.</param>
      <param name="value">The value of the new data pair.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.ClearItems">
      <summary>Removes all elements from the dictionary.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Clear">
      <summary>Removes all keys and values from the dictionary.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.ContainsKey(System.String)">
      <summary>Determines whether the specified key is present in the dictionary.</summary>
      <param name="key">Identity of a key.</param>
      <returns>true if the value is present; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.GetEnumerator">
      <summary>Gets an enumerator that iterates through items in a dictionary.</summary>
      <returns>Enumerator for iterating through the dictionary.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.RemoveItem(System.String)">
      <summary>Removes the specified element from the dictionary.</summary>
      <param name="key">Identity of the key of the data pair to be removed.</param>
      <returns>true if the value is present; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Remove(System.String)">
      <summary>Removes the specified key and value from the dictionary.</summary>
      <param name="key">Identity of the key to be removed.</param>
      <returns>true if the value is present; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.SetItem(System.String,`0)">
      <summary>Modifies the value of an existing element.</summary>
      <param name="key">Identity of the element to be modified.</param>
      <param name="value">The value to be set.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.TryGetValue(System.String,`0)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">Identity of the key of the element whose value is to be retrieved.</param>
      <param name="value">The current value of the element.</param>
      <returns>true if the value is present; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Count">
      <summary>Gets the number of items in the dictionary.</summary>
      <returns>Number of items.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.DefaultSerializerType">
      <summary>Gets a type hint for the intermediate serializer.</summary>
      <returns>Type to be serialized.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Item">
      <summary>Gets or sets the specified item.</summary>
      <param name="key" />
      <returns>Identity of a key.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Keys">
      <summary>Gets all keys contained in the dictionary.</summary>
      <returns>Collection of keys for the dictionary.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1.Values">
      <summary>Gets all values contained in the dictionary.</summary>
      <returns>Collection of values for the dictionary.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.NamedValueDictionary`1">
      <summary>Base class for dictionaries that map string identifiers to data values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary.#ctor">
      <summary>Initializes a new instance of OpaqueDataDictionary.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary.GetContentAsXml">
      <returns>Data contents of the entry.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary.GetValue``1(System.String,`0)">
      <summary>Gets the value of the specified key/value pair of the asset.</summary>
      <param name="key">The name of the key.</param>
      <param name="defaultValue">The value to return if the key cannot be found. This can be  for reference types, 0 for primitive types, and a zero-filled structure for structure types.</param>
      <returns>The value of the retrieved opaque data.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary.ContentAsXml">
      <summary>Gets the content of the opaque data as an XML string.</summary>
      <returns>Value of the opaque data.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.OpaqueDataDictionary">
      <summary>Provides properties that define opaque data for a game asset.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.#ctor">
      <summary>
    Initializes a new instance of Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.Update(System.Collections.Generic.IEnumerable.{System.String})">
      <summary>Updates the scanner object with the latest available assembly states.</summary>
      <param name="pipelineAssemblies">Enumerated list of available assemblies.</param>
      <returns>true if an actual scan was required, indicating the collection contents may have changed. false if no assembly changes were detected since the previous call.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.Errors">
      <summary>Gets the list of error messages produced by the last call to Update.</summary>
      <returns>Collection of the latest error descriptions.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ImporterAttributes">
      <summary>Gets a dictionary mapping importer names to their associated metadata attributes.</summary>
      <returns>Importer names and their related metadata values.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ImporterNames">
      <summary>Gets the names of all available importers.</summary>
      <returns>List of available importer names.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ImporterOutputTypes">
      <summary>Gets a dictionary mapping importer names to the fully qualified name of their return types.</summary>
      <returns>Importer names and their related return types.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ProcessorAttributes">
      <summary>Gets a dictionary mapping processor names to their associated metadata attributes.</summary>
      <returns>Processor names and their related metadata values.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ProcessorInputTypes">
      <summary>Gets a dictionary mapping processor names to the fully qualified name of supported input types.</summary>
      <returns>Processor names and the input types they support.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ProcessorNames">
      <summary>Gets the names of all available importers.</summary>
      <returns>List of available processor names.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner.ProcessorOutputTypes">
      <summary>Gets a dictionary mapping processor names to the fully qualified name of their output types.</summary>
      <returns>Processor names and their related output types.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.PipelineComponentScanner" />
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the PipelineException class with the specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If innerException is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineException.#ctor(System.String)">
      <summary>
    Initializes a new instance of the PipelineException class with the specified error message.
  </summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineException.#ctor(System.String,System.Object[])">
      <summary>Initializes a new instance of the PipelineException class with the specified error message.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="messageArgs">Array of strings specifying message-related arguments.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
    Creates an instance of PipelineException with information on serialization and streaming context for the related content item.
  </summary>
      <param name="serializationInfo">Information necessary for serialization and deserialization of the content item.</param>
      <param name="streamingContext">Information necessary for the source and destination of a given serialized stream. Also provides an additional caller-defined context.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Content.Pipeline.PipelineException.#ctor">
      <summary>Creates an instance of PipelineException.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.PipelineException">
      <summary>Thrown when errors are encountered during a content pipeline build.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Content.Pipeline.TargetPlatform">
      <summary>Defines the target platform for the content build.</summary>
      <param name="Unknown">Content pipeline target is unknown.</param>
      <param name="Windows">Content pipeline target is Windows.</param>
      <param name="Xbox360">Content pipeline target is Xbox 360.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AlreadyInitializedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AlreadyInitializedException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">Message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AlreadyInitializedException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AlreadyInitializedException">
      <summary>Exception thrown when an attempt is made to initialize an AudioEngine after it has already been initialized.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.GetDelayTimes">
      <summary>Gets the delay time array, which receives delays for each destination channel in milliseconds.</summary>
      <returns>The delay time array.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.GetMatrixCoefficients">
      <summary>Gets a matrix coefficient table representing the volume level of each source channel present in each destination channel.</summary>
      <returns>The array representing the matrix coefficient table.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.SetDelayTimes(System.Single[])">
      <summary>Sets the delay time array, which receives delays for each destination channel in milliseconds.</summary>
      <param name="delayTimes">The delay time array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.SetMatrixCoefficients(System.Single[])">
      <summary>Sets a matrix coefficient table representing the volume level of each source channel present in each destination channel.</summary>
      <param name="matrixCoefficients">The array representing the matrix coefficient table.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.DestinationChannelCount">
      <summary>Number of destination channels for audio.</summary>
      <returns>The number of destination channels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.DopplerFactor">
      <summary>Doppler shift factor.</summary>
      <returns>Doppler shift factor.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.EmitterToListenerAngle">
      <summary>The emitter-to-listener interior angle, expressed in radians with respect to the emitter's front orientation. </summary>
      <returns>Emitter-to-listener interior angle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.EmitterToListenerDistance">
      <summary>Distance in user-defined world units from the listener to the emitter base position.</summary>
      <returns>Emitter-to-listener distance.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.EmitterVelocityComponent">
      <summary>Component of emitter velocity vector projected onto the emitter-to-listener vector in user-defined world units per second. This is used to determine doppler shift.</summary>
      <returns>Emitter velocity component.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.ListenerVelocityComponent">
      <summary>Component of listener velocity vector projected onto the emitter-to-listener vector in user-defined world units per second. This is used to determine doppler shift.</summary>
      <returns>Listener velocity component.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.LpfDirectCoefficient">
      <summary>LPF direct-path coefficient. </summary>
      <returns>LPF direct-path coefficient. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.LpfReverbCoefficient">
      <summary>Specifies the low pass filter (LPF) reverb-path coefficient.</summary>
      <returns>LPF reverb-path coefficient.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.ReverbLevel">
      <summary>Reverb send level.</summary>
      <returns>Reverb send level.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DDspSettings.SourceChannelCount">
      <summary>Number of source channels. This must match the number of channels on the respective emitter.</summary>
      <returns>Number of source channels.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.Audio3DDspSettings">
      <summary>Receives 3D audio calculation results from a call to AudioEngine.Calculate3DAudio, and is sent to AudioEngine.Apply3DAudio to apply the 3D settings to a particular cue.
</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DEmitter.op_Equality(Microsoft.Xna.Framework.Audio.Audio3DEmitter,Microsoft.Xna.Framework.Audio.Audio3DEmitter)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DEmitter.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to compare to.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DEmitter.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DEmitter.op_Inequality(Microsoft.Xna.Framework.Audio.Audio3DEmitter,Microsoft.Xna.Framework.Audio.Audio3DEmitter)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DEmitter.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DEmitter.ChannelCount">
      <summary>Specifies the number of sound channels. Cannot be 0.</summary>
      <returns>Number of sound channels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DEmitter.ChannelRadius">
      <summary>Specifies the channel radius. Must be greater than or equal to 0.0.</summary>
      <returns>Channel radius.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DEmitter.DopplerScaler">
      <summary>Specifies the Doppler shift scalar used to exaggerate Doppler shift effect. This does not affect any other calculations. </summary>
      <returns>Doppler shift scalar, from 0.0 to float.MaxValue.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DEmitter.Forward">
      <summary>Specifies the orientation vector that defines the forward-facing direction for the emitter. This vector must be orthonormal with respect to Audio3DEmitter.Up.</summary>
      <returns>The forward vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DEmitter.Position">
      <summary>Specifies the position in user-defined world units. Does not affect Audio3DEmitter.Velocity.</summary>
      <returns>Position vector in world units.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DEmitter.Up">
      <summary>Specifies the orientation vector that defines the upward-facing direction for the emitter. This vector must be orthonormal with respect to Audio3DEmitter.Forward.
  </summary>
      <returns>The upward vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DEmitter.Velocity">
      <summary>Specifies the velocity vector in user-defined world units per second. This value is used only for Doppler calculations and does not affect Audio3DEmitter.Position.</summary>
      <returns>Velocity vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.Audio3DEmitter">
      <summary>Represents an emitter of a sound in 3D space.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DListener.op_Equality(Microsoft.Xna.Framework.Audio.Audio3DListener,Microsoft.Xna.Framework.Audio.Audio3DListener)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DListener.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object to compare to.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DListener.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DListener.op_Inequality(Microsoft.Xna.Framework.Audio.Audio3DListener,Microsoft.Xna.Framework.Audio.Audio3DListener)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Audio3DListener.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DListener.Forward">
      <summary>Specifies the orientation vector that defines the forward-facing direction for the emitter. This vector must be orthonormal with respect to Audio3DListener.Up.
  </summary>
      <returns>The forward vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DListener.Position">
      <summary>Specifies the position in user-defined world units. Does not affect Audio3DListener.Velocity.
  </summary>
      <returns>The position vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DListener.Up">
      <summary>Specifies the orientation vector that defines the upward-facing direction for the emitter. This vector must be orthonormal with respect to Audio3DListener.Forward.
  </summary>
      <returns>The upward vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Audio3DListener.Velocity">
      <summary>Specifies the velocity vector in user-defined world units per second. This value is used only for Doppler calculations and does not affect Audio3DListener.Position.
  </summary>
      <returns>The velocity vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.Audio3DListener">
      <summary>Represents a listener of sounds in 3D space.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Pause">
      <summary>Pauses all sounds associated with this category.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Resume">
      <summary>Resumes all paused sounds associated with this category.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.SetVolume(System.Single)">
      <summary>Sets the volume of all sounds associated with this category.</summary>
      <param name="volume">Volume value, between 0 and 1.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioCategory.Stop(Microsoft.Xna.Framework.Audio.AudioStopOptions)">
      <summary>Stops all sounds associated with this category.</summary>
      <param name="options">Enumerated value specifying how the sounds should be stopped.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioCategory.Name">
      <summary>Specifies the friendly name of this category.</summary>
      <returns>Friendly name of this category.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioCategory">
      <summary>Represents a particular category of sounds.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.String)">
      <summary>Initializes a new instance of this class, using a path to an XACT global settings file.</summary>
      <param name="settingsFile">Path to a global settings file.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.IO.Stream,System.Int32,System.TimeSpan,System.Guid,Microsoft.Xna.Framework.Audio.AudioSpeakers)">
      <summary>Initializes a new instance of this class, using streaming settings data, a specific audio renderer, and a specific speaker configuration.</summary>
      <param name="settingsData">Stream that holds data from a global settings file.</param>
      <param name="numberBytes">The number of bytes in the stream specified by settingsData.</param>
      <param name="lookAheadTime">Interactive audio and branch event look-ahead time, in milliseconds.</param>
      <param name="rendererId">ID that specifies the audio renderer to use.</param>
      <param name="speakers">The requested speaker configuration to output to, as a AudioSpeakers value. Currently can only be Stereo or Surround5dot1.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of this class, using streaming settings data.</summary>
      <param name="settingsData">Stream that holds data from a global settings file.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.#ctor(System.String,System.TimeSpan,System.Guid,Microsoft.Xna.Framework.Audio.AudioSpeakers)">
      <summary>Initializes a new instance of this class, using a settings file, a specific audio renderer, and a specific speaker configuration.</summary>
      <param name="settingsFile">Path to a global settings file.</param>
      <param name="lookAheadTime">Interactive audio and branch event look-ahead time, in milliseconds.</param>
      <param name="rendererId">ID that specifies the audio renderer to use.</param>
      <param name="speakers">The requested speaker configuration to output to, as a AudioSpeakers value. Currently can only be Stereo or Surround5dot1.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.AudioEngine.CuePrepared">
      <summary>Event raised when a cue is prepared to play.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.AudioEngine.CueStarted">
      <summary>Event raised when a cue has started playback.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.AudioEngine.CueStopped">
      <summary>Event raised when a cue has stopped playback.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.AudioEngine.Disposing">
      <summary>
        Occurs when AudioEngine.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.AudioEngine.MarkerHit">
      <summary>Event raised when a marker has been hit during cue playback.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.AudioEngine.WaveBankPrepared">
      <summary>Event raised when a wave bank has been prepared.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.AudioEngine.WaveStarted">
      <summary>Event raised when a wave has begun playback.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.AudioEngine.WaveStopped">
      <summary>Event raised when a wave has stopped playback.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Audio.AudioEngine.ContentVersion">
      <summary>Specifies the current content version.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Apply3DAudio(Microsoft.Xna.Framework.Audio.Cue,Microsoft.Xna.Framework.Audio.Audio3DDspSettings)">
      <summary>Applies values returned from AudioEngine.Calculate3DAudio to apply 3D effects to a cue.</summary>
      <param name="cue">The cue to apply 3D effects to.</param>
      <param name="settings">Settings returned from a call to AudioEngine.Calculate3DAudio.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Calculate3DAudio(Microsoft.Xna.Framework.Audio.Audio3DListener,Microsoft.Xna.Framework.Audio.Audio3DEmitter)">
      <summary>Calculates 3D audio settings using a listener and emitter. The data returned can be passed to AudioEngine.Apply3DAudio to apply the settings to a cue.</summary>
      <param name="listener">The listener of the sound.</param>
      <param name="emitter">The emitter of the sound.</param>
      <returns>3D audio settings calculated between emitter and listener.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.raise_CuePrepared(System.Object,Microsoft.Xna.Framework.Audio.CueEventArgs)">
      <summary>Raises a AudioEngine.CuePrepared event.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">CueEventArgs object that contains specifics about the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.raise_CueStarted(System.Object,Microsoft.Xna.Framework.Audio.CueEventArgs)">
      <summary>Raises a AudioEngine.CueStarted event.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">CueEventArgs object that contains specifics about the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.raise_CueStopped(System.Object,Microsoft.Xna.Framework.Audio.CueEventArgs)">
      <summary>Raises a AudioEngine.CueStopped event.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">CueEventArgs object that contains specifics about the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the AudioEngine.Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.op_Equality(Microsoft.Xna.Framework.Audio.AudioEngine,Microsoft.Xna.Framework.Audio.AudioEngine)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare.</param>
      <returns>true if the objects are equivalent; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.GetCategory(System.String)">
      <summary>Gets an audio category.</summary>
      <param name="name">Friendly name of the category to get.</param>
      <returns>Audio category.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.GetGlobalVariable(System.String)">
      <summary>Gets the value of a global variable.</summary>
      <param name="name">Friendly name of the variable.</param>
      <returns>Value of the variable.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.op_Inequality(Microsoft.Xna.Framework.Audio.AudioEngine,Microsoft.Xna.Framework.Audio.AudioEngine)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.raise_MarkerHit(System.Object,Microsoft.Xna.Framework.Audio.MarkerEventArgs)">
      <summary>Raises a AudioEngine.MarkerHit event.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">MarkerEventArgs object that contains specifics about the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.SetGlobalVariable(System.String,System.Single)">
      <summary>Sets the value of a global variable.</summary>
      <param name="name">Value of the global variable.</param>
      <param name="value">Friendly name of the global variable.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.Update">
      <summary>Performs periodic work required by the audio engine.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.raise_WaveBankPrepared(System.Object,Microsoft.Xna.Framework.Audio.WaveBankEventArgs)">
      <summary>Raises a AudioEngine.WaveBankPrepared event.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">WaveBankEventArgs object that contains specifics about the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.raise_WaveStarted(System.Object,Microsoft.Xna.Framework.Audio.WaveEventArgs)">
      <summary>Raises a AudioEngine.WaveStarted event.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">WaveEventArgs object that contains specifics about the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.AudioEngine.raise_WaveStopped(System.Object,Microsoft.Xna.Framework.Audio.WaveEventArgs)">
      <summary>Raises a AudioEngine.WaveStopped event.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">WaveEventArgs object that contains specifics about the event.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEngine.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEngine.RendererDetails">
      <summary>Gets a collection of audio renderers.</summary>
      <returns>Collection of audio renderers.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.AudioEngine.Speakers">
      <summary>Gets the configuration of speakers the audio engine is using.</summary>
      <returns>Enumerated value that identifies the speaker configuration.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioEngine">
      <summary>Represents the audio engine. Applications use the methods of the audio engine to instantiate and manipulate core audio objects.
</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.op_Equality(Microsoft.Xna.Framework.Audio.Cue,Microsoft.Xna.Framework.Audio.Cue)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">The object to compare.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.GetVariable(System.String)">
      <summary>Retrieves a cue-instance variable value based on its friendly name.</summary>
      <param name="name">Friendly name of the variable.</param>
      <returns>Value of the variable.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.op_Inequality(Microsoft.Xna.Framework.Audio.Cue,Microsoft.Xna.Framework.Audio.Cue)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.Pause">
      <summary>Pauses playback.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.Play">
      <summary>Requests playback of a prepared or preparing Cue.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.Resume">
      <summary>Resumes playback of a paused Cue.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.SetMatrixCoefficients(System.Int32,System.Int32,System.Single[])">
      <summary>Sets channel volume mapping values.</summary>
      <param name="sourceChannelCount">The number of source channels the matrix was calculated for.</param>
      <param name="destinationChannelCount">The number of channels the final mix is to be calculated for. This value may be 2 (Stereo) or 6 (5.1 surround).</param>
      <param name="matrixCoefficients">The number of channels the final mix is to be calculated for. This value may be 2 (Stereo) or 6 (5.1 surround).</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.SetVariable(System.String,System.Single)">
      <summary>Sets the value of a cue-instance variable based on its friendly name.</summary>
      <param name="name">Friendly name of the variable to set.</param>
      <param name="value">Value to assign to the variable.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.Cue.Stop(Microsoft.Xna.Framework.Audio.AudioStopOptions)">
      <summary>Stops playback of a Cue.</summary>
      <param name="options">Enumerated value specifying how the sound should stop. If set to None, the sound will play any release phase or transition specified in the audio designer. If set to Immediate, the sound will stop immediately, ignoring any release phases or transitions.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsCreated">
      <summary>Returns whether the cue has been created.</summary>
      <returns>true if the cue is created; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsPaused">
      <summary>Returns whether the cue is currently paused.</summary>
      <returns>true if the cue is paused; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsPlaying">
      <summary>Returns whether the cue is playing.</summary>
      <returns>true if the cue is playing; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsPrepared">
      <summary>Returns whether the cue is prepared to play.</summary>
      <returns>true if the cue is prepared to play; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsPreparing">
      <summary>Returns whether the cue is preparing to play.</summary>
      <returns>true if the cue is preparing to play; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsStopped">
      <summary>Returns whether the cue is currently stopped.</summary>
      <returns>true if the cue is stopped; false if otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.IsStopping">
      <summary>Returns whether the cue is stopping playback.</summary>
      <returns>true if the cue is stopping; false if otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.Cue.Name">
      <summary>Returns the friendly name of the cue.</summary>
      <returns>Friendly name of the cue.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.Cue">
      <summary>Defines methods for managing the playback of sounds.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.CueEventArgs.Cue">
      <summary>Specifies the Cue associated with this event.</summary>
      <returns>Cue associated with this event.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.CueEventArgs.SoundBank">
      <summary>Specifies the SoundBank that holds the cue associated with this event.</summary>
      <returns>SoundBank that holds the cue.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.CueEventArgs.TimeStamp">
      <summary>Specifies the time stamp that identifies when this event was sent.</summary>
      <returns>Time stamp in milliseconds.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.CueEventArgs">
      <summary>Arguments passed with a Cue Event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.ExpiredException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.ExpiredException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.ExpiredException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.ExpiredException">
      <summary>Exception that is thrown if the engine is a pre-release version and has expired.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InCallbackException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InCallbackException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InCallbackException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InCallbackException">
      <summary>Exception thrown when an invalid method has been called during a callback.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InstanceLimitFailedToPlayException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InstanceLimitFailedToPlayException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InstanceLimitFailedToPlayException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InstanceLimitFailedToPlayException">
      <summary>Exception thrown when a sound or cue has reached an instance limit and can not be played.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidCategoryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidCategoryException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidCategoryException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InvalidCategoryException">
      <summary>Exception thrown when the specified category is invalid.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidCueException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidCueException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidCueException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InvalidCueException">
      <summary>Exception thrown when the specified cue is invalid.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidDataException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidDataException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InvalidDataException">
      <summary>Exception thrown when the specified data used by a method is invalid.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidEntryCountException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidEntryCountException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidEntryCountException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InvalidEntryCountException">
      <summary>Exception thrown when an entry count for a wave or sound bank is invalid.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidSoundOffsetOrIndexException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidSoundOffsetOrIndexException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidSoundOffsetOrIndexException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InvalidSoundOffsetOrIndexException">
      <summary>Exception thrown when a specified sound offset or index is invalid.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidTrackIndexException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidTrackIndexException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidTrackIndexException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InvalidTrackIndexException">
      <summary>Exception thrown when the specified track index is invalid.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidUsageException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidUsageException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidUsageException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InvalidUsageException">
      <summary>Exception thrown when the specified method cannot be used in the manner requested.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidVariableIndexException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidVariableIndexException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidVariableIndexException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InvalidVariableIndexException">
      <summary>Exception thrown when the specified variable index is invalid.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidWaveIndexException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidWaveIndexException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.InvalidWaveIndexException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.InvalidWaveIndexException">
      <summary>Exception thrown when the specified wave index is invalid.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.MarkerEventArgs.Cue">
      <summary>Specifies the Cue associated with this event.</summary>
      <returns>Cue associated with this event.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.MarkerEventArgs.SoundBank">
      <summary>Specifies the SoundBank that holds the cue associated with this event.</summary>
      <returns>SoundBank that holds the cue.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.MarkerEventArgs.TimeStamp">
      <summary>Specifies the time stamp that identifies when this event was sent.</summary>
      <returns>Time stamp in milliseconds.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.MarkerEventArgs.Value">
      <summary>Specifies the marker value.</summary>
      <returns>Marker value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.MarkerEventArgs">
      <summary>Arguments passed with a Marker Event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoGlobalSettingsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoGlobalSettingsException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoGlobalSettingsException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.NoGlobalSettingsException">
      <summary>Exception thrown when initializing an AudioEngine without a global settings file.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoNotificationCallbackException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoNotificationCallbackException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoNotificationCallbackException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.NoNotificationCallbackException">
      <summary>Exception thrown when no notification callback has been registered with the AudioEngine.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoRendererException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoRendererException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoRendererException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.NoRendererException">
      <summary>Exception thrown when no audio renderer has been provided to the AudioEngine.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NotificationRegisteredException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NotificationRegisteredException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NotificationRegisteredException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.NotificationRegisteredException">
      <summary>Exception thrown when multiple notifications are registered with the AudioEngine.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NotInitializedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NotInitializedException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NotInitializedException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.NotInitializedException">
      <summary>Exception thrown when attempting to use the AudioEngine without first initializing it.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoWaveBankException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoWaveBankException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.NoWaveBankException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.NoWaveBankException">
      <summary>Exception thrown when no wave bank exists for the requested operation.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.ReadFileException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.ReadFileException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.ReadFileException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.ReadFileException">
      <summary>Exception thrown when an error occurs reading a file.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.RendererDetail.op_Equality(Microsoft.Xna.Framework.Audio.RendererDetail,Microsoft.Xna.Framework.Audio.RendererDetail)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.RendererDetail.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to compare to this object.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.RendererDetail.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.RendererDetail.op_Inequality(Microsoft.Xna.Framework.Audio.RendererDetail,Microsoft.Xna.Framework.Audio.RendererDetail)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.RendererDetail.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.RendererDetail.FriendlyName">
      <summary>Gets the human-readable name for the renderer.</summary>
      <returns>The name of the renderer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.RendererDetail.RendererId">
      <summary>Specifies the GUID that identifies the renderer.</summary>
      <returns>GUID of the renderer.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.RendererDetail">
      <summary>Represents an audio renderer, which is a device that can render audio to a user.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SelectVariationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SelectVariationException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SelectVariationException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.SelectVariationException">
      <summary>Exception thrown when an error occurs selecting a variation to play on a sound.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)">
      <summary>Initializes a new instance of this class using a sound bank from file.</summary>
      <param name="audioEngine">Audio engine that will be associated with this sound bank.</param>
      <param name="filename">Path to the sound bank file.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.IO.Stream,System.Int32)">
      <summary>Initializes a new instance of this class using streaming sound bank data.</summary>
      <param name="audioEngine">Audio engine that will be associated with this sound bank.</param>
      <param name="soundBankData">Stream that holds the data from the sound bank file.</param>
      <param name="numberBytes">Number of bytes in the soundBankData stream.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.IO.Stream)">
      <summary>Initializes a new instance of this class using streaming sound bank data.</summary>
      <param name="audioEngine">Audio engine that will be associated with this sound bank.</param>
      <param name="soundBankData">Stream that holds the data from the sound bank file.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.SoundBank.Disposing">
      <summary>
        Occurs when SoundBank.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the SoundBank.Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.op_Equality(Microsoft.Xna.Framework.Audio.SoundBank,Microsoft.Xna.Framework.Audio.SoundBank)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">The object to compare.</param>
      <returns>true if the objects are equivalent; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.GetCue(System.String)">
      <summary>Gets a cue from the sound bank.</summary>
      <param name="name">Friendly name of the cue to get.</param>
      <returns>Cue object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.SoundBank.op_Inequality(Microsoft.Xna.Framework.Audio.SoundBank,Microsoft.Xna.Framework.Audio.SoundBank)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundBank.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.SoundBank.IsInUse">
      <summary>Returns whether the sound bank is currently in use.</summary>
      <returns>true if the sound bank is in use; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.SoundBank">
      <summary>Represents a sound bank, which is a collection of cues.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.UnknownEventException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.UnknownEventException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.UnknownEventException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.UnknownEventException">
      <summary>Exception thrown when the requested event cannot be found.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String)">
      <summary>Initializes a new, in-memory instance of this class using a specified AudioEngine and path to a wave bank file.</summary>
      <param name="audioEngine">Instance of an AudioEngine to associate this wave bank with.</param>
      <param name="nonStreamingWaveBankFilename">Path to the wave bank file to load.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.String,System.Int32,System.Int32)">
      <summary>Initializes a new, streaming instance of this class, using a provided AudioEngine and streaming wave bank parameters.</summary>
      <param name="audioEngine">Instance of an AudioEngine to associate this wave bank with.</param>
      <param name="streamingWaveBankFilename">Path to the wave bank file to stream from.</param>
      <param name="offset">Offset within the wave bank data file. This offset must be DVD sector aligned.</param>
      <param name="packetsize">Stream packet size, in sectors, to use for each stream. The minimum value is 2.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.IO.Stream,System.Int32)">
      <summary>
    Initializes a new, in-memory instance of this class using a specified AudioEngine and wave bank stream data.
  </summary>
      <param name="audioEngine">Audio engine that will be associated with this wave bank.</param>
      <param name="nonStreamingWaveBankData">Stream that represents the wave bank data from file.</param>
      <param name="numberBytes">Number of bytes in the nonStreamingWaveBankData stream.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.#ctor(Microsoft.Xna.Framework.Audio.AudioEngine,System.IO.Stream)">
      <summary>
    Initializes a new, in-memory instance of this class using a specified AudioEngine and wave bank stream data.
  </summary>
      <param name="audioEngine">Audio engine that will be associated with this wave bank.</param>
      <param name="nonStreamingWaveBankData">Stream that represents the wave bank data from file.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Audio.WaveBank.Disposing">
      <summary>
        Occurs when WaveBank.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the WaveBank.Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.op_Equality(Microsoft.Xna.Framework.Audio.WaveBank,Microsoft.Xna.Framework.Audio.WaveBank)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare.</param>
      <returns>true if the objects are equivalent; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBank.op_Inequality(Microsoft.Xna.Framework.Audio.WaveBank,Microsoft.Xna.Framework.Audio.WaveBank)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.WaveBank.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.WaveBank.IsInUse">
      <summary>Returns whether the wave bank is currently in use.</summary>
      <returns>true if the wave bank is in use; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.WaveBank.IsPrepared">
      <summary>Returns whether the wave bank is prepared to play.</summary>
      <returns>true if the wave bank is prepared; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.WaveBank">
      <summary>Represents a wave bank, which is a collection of wave files.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.WaveBankEventArgs.TimeStamp">
      <summary>Specifies the time stamp that identifies when this event was sent.</summary>
      <returns>Time stamp in milliseconds.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.WaveBankEventArgs.WaveBank">
      <summary>Specifies the WaveBank associated with this event.</summary>
      <returns>WaveBank associated with this event.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.WaveBankEventArgs">
      <summary>Arguments sent with a Wave Bank Event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBankNotPreparedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBankNotPreparedException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Audio.WaveBankNotPreparedException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.WaveBankNotPreparedException">
      <summary>Exception thrown when attempting to play a wave from a wave bank that has not been prepared.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.WaveEventArgs.Cue">
      <summary>Specifies the Cue associated with this event.</summary>
      <returns>Cue associated with this event.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.WaveEventArgs.SoundBank">
      <summary>Specifies the SoundBank that holds the cue associated with this event.</summary>
      <returns>SoundBank that holds the cue.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.WaveEventArgs.TimeStamp">
      <summary>Specifies the time stamp that identifies when this event was sent.</summary>
      <returns>Time stamp in milliseconds.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Audio.WaveEventArgs.WaveBank">
      <summary>Specifies the WaveBank that holds the wave associated with this event.</summary>
      <returns>WaveBank that holds the wave.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.WaveEventArgs">
      <summary>Arguments sent with a Wave Event.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioSpeakers">
      <summary>Describes speaker configurations used by the audio engine.</summary>
      <param name="Center">Do not use.</param>
      <param name="Left">Do not use.</param>
      <param name="LeftSurround">Do not use.</param>
      <param name="LowFrequencyEffect">Do not use.</param>
      <param name="Right">Do not use.</param>
      <param name="RightSurround">Do not use.</param>
      <param name="Stereo">Identifies a stereo (2-speaker) configuration.</param>
      <param name="Surround5Dot1">Identifies a 5.1 (5 speakers, 1 LFE) configuration.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Audio.AudioStopOptions">
      <summary>Controls how Cue objects should stop when Cue.Stop is called.</summary>
      <param name="AsAuthored">Indicates the cue should stop normally, playing any release phase or transition specified in the content.</param>
      <param name="Immediate">Indicates the cue should stop immediately, ignoring any release phase or transition specified in the content.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Components.GraphicsComponent.DeviceCreated">
      <summary>Raised when a new graphics device is created.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Components.GraphicsComponent.DeviceDisposing">
      <summary>Raised when the GraphicsComponent is being disposed.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Components.GraphicsComponent.DeviceResetting">
      <summary>Raised when the GraphicsComponent is about to be reset.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Components.GraphicsComponent.DeviceReset">
      <summary>Raised when the GraphicsComponent is reset.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Components.GraphicsComponent.ModifyDevice">
      <summary>Raised just before creating the !Framework.Graphics.GraphicsDevice.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Components.GraphicsComponent.DefaultMinimumBackBufferHeight">
      <summary>Specifies the default minimum back-buffer height.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Components.GraphicsComponent.DefaultMinimumBackBufferWidth">
      <summary>Specifies the default minimum back-buffer width.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Components.GraphicsComponent.ValidAdapterFormats">
      <summary>Specifies the set of adapter formats supported by the GraphicsComponent.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Components.GraphicsComponent.ValidBackBufferFormats">
      <summary>Specifies the set of back buffer formats supported by the GraphicsComponent.
  </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Components.GraphicsComponent.ValidDeviceTypes">
      <summary>Specifies the set of valid device types supported by the GraphicsComponent.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.ApplyChanges">
      <summary>Applies any changes to device-related properties, changing the graphics device as necessary.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.CanResetDevice(Microsoft.Xna.Framework.Components.GraphicsDeviceInformation)">
      <summary>Determines whether the given GraphicsDeviceInformation is compatible with the existing graphics device.</summary>
      <param name="newDeviceInfo">Information describing the desired device configuration.</param>
      <returns>true if a device reset can be used to get a device compatible with the GraphicsDeviceInformation; false otherwise.
    </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the GraphicsComponent and optionally releases the managed resources.
  </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.EnsureDevice">
      <summary>
    Ensures that the graphics device is in a usable state.   This method should be called in Game.Draw before any other drawing in a frame.
  </summary>
      <returns>true if the graphics device is in a usable state; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.FindBestDevice(System.Boolean)">
      <summary>Finds the best device configuration that is compatible with the current device preferences.</summary>
      <param name="anySuitableDevice">true if the GraphicsComponent.FindBestDevice can select devices from any available adapter; false if only the current adapter should be considered.
      </param>
      <returns>The best device configuration found.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.OnDeviceCreated">
      <summary>Called when a device is created. Raises the GraphicsComponent.DeviceCreated event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.OnDeviceDisposing">
      <summary>Called when a device is being disposed. Raises the GraphicsComponent.DeviceDisposing event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.OnDeviceResetting">
      <summary>
    Called when the device is about to be reset. Raises the GraphicsComponent.DeviceResetting event.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.OnDeviceReset">
      <summary>Called when the device has been reset.  Raises the GraphicsComponent.DeviceReset event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.OnGameChanging(Microsoft.Xna.Framework.Game)">
      <summary>Attaches the GraphicsComponent to a game and creates the graphics device if necessary.</summary>
      <param name="previousGame">The previous game this component was attached to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.OnModifyDevice(Microsoft.Xna.Framework.Components.GraphicsDeviceInformation)">
      <summary>Called when the graphics device has been modified.  Raises the GraphicsComponent.ModifyDevice event.</summary>
      <param name="graphicsDeviceInformation">The GraphicsDeviceInformation to modify.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.RankDevices(System.Collections.Generic.List.{Microsoft.Xna.Framework.Components.GraphicsDeviceInformation})">
      <summary>Ranks the given list of devices that satisfy the given preferences.</summary>
      <param name="foundDevices">The list of devices to rank.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsComponent.ToggleFullScreen">
      <summary>Toggles between full screen and windowed mode.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Components.GraphicsComponent.AllowMultiSampling">
      <summary>Gets or sets a value that indicates whether to enable a multisampled back buffer.</summary>
      <returns>Value indicating whether multisample is enabled on the back buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Components.GraphicsComponent.BackBufferFormat">
      <summary>Gets or sets the format of the back buffer.</summary>
      <returns>The format of the back buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Components.GraphicsComponent.BackBufferHeight">
      <summary>Gets or sets the preferred back-buffer height.</summary>
      <returns>The preferred back-buffer height.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Components.GraphicsComponent.BackBufferWidth">
      <summary>Gets or sets the preferred back-buffer width.</summary>
      <returns>The preferred back-buffer width.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Components.GraphicsComponent.DepthStencilFormat">
      <summary>Gets or sets the format of the depth stencil.</summary>
      <returns>The format of the depth stencil.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Components.GraphicsComponent.GraphicsDevice">
      <summary>Gets the !Framework.Graphics.GraphicsDevice associated with the GraphicsComponent.</summary>
      <returns>
        The !Framework.Graphics.GraphicsDevice associated with the GraphicsComponent.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Components.GraphicsComponent.IsFullScreen">
      <summary>
    Gets or sets a value that indicates whether the device should start in full screen mode.
  </summary>
      <returns>Value that indicates whether the device should start in full screen mode.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Components.GraphicsComponent.MinimumPixelShaderProfile">
      <summary>Gets or sets the minimum pixel shader version required by the GraphicsComponent.</summary>
      <returns>
        The minimum pixel shader version required by the GraphicsComponent.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Components.GraphicsComponent.MinimumVertexShaderProfile">
      <summary>
    Gets or sets the minimum vertex shader version required by the GraphicsComponent.
  </summary>
      <returns>
        The minimum vertex shader version required by the GraphicsComponent.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Components.GraphicsComponent.SynchronizeWithVerticalRetrace">
      <summary> Gets or sets a value that indicates whether to sync to the vertical trace (vsync) when presenting
    the back buffer.
  </summary>
      <returns>
        Value that indicates whether to sync to the vertical trace (vsync) when presenting
        the back buffer.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Components.GraphicsComponent">
      <summary>
    A component that handles the configuration and management of the graphics device.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsDeviceInformation.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Components.GraphicsDeviceInformation.CreateParameters">
      <summary>
    Specifies the creation parameters to use when creating a graphics device.
  </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Components.GraphicsDeviceInformation.PresentationParameters">
      <summary>
    Specifies the presentation parameters to use when creating a graphics device.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsDeviceInformation.Clone">
      <summary>Creates a clone of this object.</summary>
      <returns>The cloned object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsDeviceInformation.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">
        The System.Object to compare with the current GraphicsDeviceInformation.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.GraphicsDeviceInformation.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Components.GraphicsDeviceInformation">
      <summary>Holds the settings for creating a graphics device on Windows.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.NoSuitableGraphicsDeviceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Components.NoSuitableGraphicsDeviceException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Components.NoSuitableGraphicsDeviceException">
      <summary>Thrown when no available graphics device fits the given device preferences.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates an instance of BoundingBox.</summary>
      <param name="min">The minimum point the BoundingBox includes.</param>
      <param name="max">The maximum point the BoundingBox includes.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.Max">
      <summary>The maximum point the BoundingBox contains.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingBox.Min">
      <summary>
    The minimum point the BoundingBox contains.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Tests whether the BoundingBox contains a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to test for overlap.</param>
      <returns>Enumeration indicating the extent of overlap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Tests whether the BoundingBox contains a BoundingFrustum.</summary>
      <param name="frustum">
        The BoundingFrustum to test for overlap.
      </param>
      <returns>Enumeration indicating the extent of overlap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Tests whether the BoundingBox contains another BoundingBox.</summary>
      <param name="box">
        The BoundingBox to test for overlap.
      </param>
      <returns>Enumeration indicating the extent of overlap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>Tests whether the BoundingBox contains a point.</summary>
      <param name="point">The point to test for overlap.</param>
      <returns>Enumeration indicating the extent of overlap.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromPoints(System.Collections.Generic.IEnumerable.{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates the smallest BoundingBox that will contain a group of points.</summary>
      <param name="points">A list of points the BoundingBox should contain. </param>
      <returns>The created BoundingBox.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateFromSphere(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Creates the smallest BoundingBox that will contain the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to contain.</param>
      <returns>The created BoundingBox.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.CreateMerged(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>Creates the smallest BoundingBox that contains the two specified BoundingBoxs.</summary>
      <param name="original">One of the BoundingBoxs to contain.</param>
      <param name="additional">One of the BoundingBoxs to contain.</param>
      <returns>The created BoundingBox.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.op_Equality(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Determines whether two instances of BoundingBox are equal.
  </summary>
      <param name="a">BoundingBox to compare.
      </param>
      <param name="b">BoundingBox to compare.
      </param>
      <returns>true if the two BoundingBoxs are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Equals(System.Object)">
      <summary>
    Determines whether two instances of BoundingBox are equal.
  </summary>
      <param name="obj">
        The System.Object to compare with the current BoundingBox.
      </param>
      <returns>true if the specified System.Object is equal to the current BoundingBox; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Equals(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Determines whether two instances of BoundingBox are equal.
  </summary>
      <param name="other">
        The BoundingBox to compare with the current BoundingBox.
      </param>
      <returns>true if the specified BoundingBox is equal to the current BoundingBox; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetCorners">
      <summary>
    Gets an array of points that make up the corners of the BoundingBox.
  </summary>
      <returns>
        Array of points that make up the corners of the BoundingBox.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>
        A hash code for the current BoundingBox.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.op_Inequality(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Determines whether two instances of BoundingBox are not equal.
  </summary>
      <param name="a">The object to the left of the inequality operator.</param>
      <param name="b">The object to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingBox intersects a BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <returns>true if the BoundingBox and BoundingSphere intersect; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current BoundingBox intersects a Plane.</summary>
      <param name="plane">The Plane to check for intersection with.</param>
      <returns>An enumeration indicating whether the BoundingBox intersects the Plane.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Checks whether the current BoundingBox intersects a BoundingFrustum.
  </summary>
      <param name="frustum">The BoundingFrustum to check for intersection with.</param>
      <returns>true if the BoundingBox and BoundingFrustum intersect; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Checks whether the current BoundingBox intersects another BoundingBox.
  </summary>
      <param name="box">The BoundingBox to check for intersection with.</param>
      <returns>true if the BoundingBoxs intersect; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>
    Checks whether the current BoundingBox intersects a Ray.
  </summary>
      <param name="ray">The Ray to check for intersection with.</param>
      <returns>An a nullable value indicating where the BoundingBox and Ray intersect.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingBox.ToString">
      <summary>
    Returns a System.String that represents the current BoundingBox.
  </summary>
      <returns>System.String representation of the current BoundingBox.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingBox">
      <summary>Defines a box-shaped 3D volume.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.#ctor(Microsoft.Xna.Framework.Matrix)">
      <summary>Creates a new instance of BoundingFrustum.</summary>
      <param name="value">Combined matrix that usually takes view * projection matrix.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingFrustum contains the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check against the  current BoundingFrustum.</param>
      <returns>Enumeration indicating the relationship of the current BoundingFrustum to the specified BoundingSphere.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Checks whether the current BoundingFrustum contains the specified BoundingFrustum.
  </summary>
      <param name="frustum">
        The BoundingFrustum to check against the  current BoundingFrustum.
      </param>
      <returns>
        Enumeration indicating the relationship of the current BoundingFrustum to the specified BoundingFrustum.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Checks whether the current BoundingFrustum contains the specified BoundingBox.
  </summary>
      <param name="box">
        The BoundingBox to check against the  current BoundingFrustum.
      </param>
      <returns>
        Enumeration indicating the relationship of the current BoundingFrustum to the specified BoundingBox.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>
    Checks whether the current BoundingFrustum contains the specified point.
  </summary>
      <param name="point">
        The point to check against the  current BoundingFrustum.
      </param>
      <returns>
        Enumeration indicating the relationship of the current BoundingFrustum to the specified point.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Equality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Determines whether two instances of BoundingFrustum are equal.
  </summary>
      <param name="a">The BoundingFrustum to the left of the equality operator.</param>
      <param name="b">The BoundingFrustum to the right of the equality operator.</param>
      <returns>true if left is equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Determines whether the specified BoundingFrustum is equal to the current BoundingFrustum.
  </summary>
      <param name="other">
        The BoundingFrustum to compare with the current BoundingFrustum.
      </param>
      <returns>true if the specified BoundingFrustum is equal to the current BoundingFrustum; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Equals(System.Object)">
      <summary>
    Determines whether the specified System.Object is equal to the BoundingFrustum.
  </summary>
      <param name="obj">The System.Object to compare with the current BoundingFrustum.</param>
      <returns>true if the specified System.Object is equal to the current BoundingFrustum; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetCorners">
      <summary>
    Gets an array of points that make up the corners of the BoundingFrustum.
  </summary>
      <returns>
        Array of points that make up the corners of the BoundingFrustum.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>A hash code for the current BoundingFrustum.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.op_Inequality(Microsoft.Xna.Framework.BoundingFrustum,Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Determines whether two instances of BoundingFrustum are not equal.</summary>
      <param name="a">The BoundingFrustum to the left of the inequality operator.</param>
      <param name="b">The BoundingFrustum to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingFrustum intersects the specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection.</param>
      <returns>true if the BoundingFrustum intersects the BoundingSphere; false otherwise. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current BoundingFrustum intersects the specified Plane.</summary>
      <param name="plane">The Plane to check for intersection.</param>
      <returns>An enumeration indicating whether BoundingFrustum intersects the specified Plane.
    </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Checks whether the current BoundingFrustum intersects the specified BoundingFrustum.
  </summary>
      <param name="frustum">The BoundingFrustum to check for intersection.</param>
      <returns>true if the current BoundingFrustum intersects the specified BoundingFrustum; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Checks whether the current BoundingFrustum intersects the specified BoundingBox.
  </summary>
      <param name="box">The BoundingBox to check for intersection.</param>
      <returns>true if the BoundingFrustum intersects the BoundingBox; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>
    Checks whether the current BoundingFrustum intersects the specified Ray.
  </summary>
      <param name="ray">The Ray to check for intersection.</param>
      <returns>A nullable value indicating whether the current BoundingFrustum intersects the specified Ray.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingFrustum.ToString">
      <summary>Returns a System.String that represents the current BoundingFrustum.</summary>
      <returns>System.String representation of the current BoundingFrustum.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Bottom">
      <summary>Gets the bottom plane of the BoundingFrustum.</summary>
      <returns>Returns the bottom plane of the BoundingFrustum.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Far">
      <summary>Gets the far plane of the BoundingFrustum.</summary>
      <returns>Returns the far plane of the BoundingFrustum.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Left">
      <summary>Gets the left plane of the BoundingFrustum.</summary>
      <returns>Returns the left plane of the BoundingFrustum.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Matrix">
      <summary>Gets the Matrix that was used to instantiate this bounding frustum.</summary>
      <returns>
        the Matrix that was used to instantiate this bounding frustum.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Near">
      <summary>Gets the near plane of the BoundingFrustum.</summary>
      <returns>Returns the near plane of the BoundingFrustum.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Right">
      <summary>Gets the right plane of the BoundingFrustum.</summary>
      <returns>Returns the right plane of the BoundingFrustum.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.BoundingFrustum.Top">
      <summary>Gets the top plane of the BoundingFrustum.</summary>
      <returns>Returns the top plane of the BoundingFrustum.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingFrustum">
      <summary>Defines a frustum.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new instance of BoundingSphere.</summary>
      <param name="center">Center point of the sphere.</param>
      <param name="radius">Radius of the sphere.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingSphere.Center">
      <summary>The center point of the sphere.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.BoundingSphere.Radius">
      <summary>The radius of the sphere.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>
    Checks whether the current BoundingSphere contains the specified BoundingSphere.
  </summary>
      <param name="sphere">The BoundingSphere to check against the  current BoundingSphere.</param>
      <returns>An enumeration indicating the relationship of the BoundingSpheres.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Checks whether the current BoundingSphere contains the specified BoundingFrustum.
  </summary>
      <param name="frustum">
        The BoundingFrustum to check against the  current BoundingSphere.
      </param>
      <returns>
        An enumeration indicating the relationship of the specified BoundingFrustum to the current BoundingSphere.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Checks whether the current BoundingSphere contains the specified BoundingBox.
  </summary>
      <param name="box">
        The BoundingBox to check against the  current BoundingSphere.
      </param>
      <returns>
        An enumeration indicating the relationship of the specified BoundingBox to the current BoundingSphere.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Contains(Microsoft.Xna.Framework.Vector3)">
      <summary>
    Checks whether the current BoundingSphere contains the specified point.
  </summary>
      <param name="point">The point to check against the  current BoundingSphere.</param>
      <returns>
        An enumeration indicating the relationship of the specified point to the current BoundingSphere.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromBoundingBox(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Creates the smallest BoundingSphere that can contain a specified BoundingBox. </summary>
      <param name="box">The BoundingBox to create the BoundingSphere from.</param>
      <returns>The created BoundingSphere.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromFrustum(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Creates the smallest BoundingSphere that can contain a specified BoundingFrustum.  </summary>
      <param name="frustum">The BoundingFrustum to create the BoundingSphere with.</param>
      <returns>The created BoundingSphere.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateFromPoints(System.Collections.Generic.IEnumerable.{Microsoft.Xna.Framework.Vector3},System.Single)">
      <summary>Creates a BoundingSphere that can contain a specified list of points.</summary>
      <param name="points">List of points the BoundingSphere must contain.</param>
      <returns>The created BoundingSphere.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.CreateMerged(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Creates a BoundingSphere that contains the two specified BoundingSpheres.</summary>
      <param name="original">BoundingSphere to be merged.</param>
      <param name="additional">BoundingSphere to be merged.</param>
      <returns>The created BoundingSphere.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Equality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>
    Determines whether two instances of BoundingSphere are equal.
  </summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if left is equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>
    Determines whether the specified BoundingSphere is equal to the current BoundingSphere.
  </summary>
      <param name="other">
        The BoundingSphere to compare with the current BoundingSphere.
      </param>
      <returns>true if the specified BoundingSphere is equal to the current BoundingSphere; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Equals(System.Object)">
      <summary>
    Determines whether the specified System.Object is equal to the BoundingSphere.
  </summary>
      <param name="obj">
        The System.Object to compare with the current BoundingSphere.
      </param>
      <returns>true if the specified System.Object is equal to the current BoundingSphere; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>
        A hash code for the current BoundingSphere.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.op_Inequality(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.BoundingSphere)">
      <summary>
    Determines whether two instances of BoundingSphere are not equal.
  </summary>
      <param name="a">The BoundingSphere to the left of the inequality operator.</param>
      <param name="b">The BoundingSphere to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current BoundingSphere intersects with a specified BoundingSphere. </summary>
      <param name="sphere">The BoundingSphere to check for intersection with the current BoundingSphere.</param>
      <returns>true if the BoundingSpheres intersect; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Plane)">
      <summary>Checks whether the current BoundingSphere intersects with a specified Plane.</summary>
      <param name="plane">The Plane to check for intersection with the current BoundingSphere.</param>
      <returns>An enumeration indicating the relationship between the BoundingSphere and the Plane. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Checks whether the current BoundingSphere intersects with a specified BoundingFrustum.
  </summary>
      <param name="frustum">
        The BoundingFrustum to check for intersection with the current BoundingSphere.
      </param>
      <returns>true if the BoundingFrustum and BoundingSphere intersect; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Checks whether the current BoundingSphere intersects with a specified BoundingBox.
  </summary>
      <param name="box">
        The BoundingBox to check for intersection with the current BoundingSphere.
      </param>
      <returns>true if the BoundingBox and BoundingSphere intersect; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.Intersects(Microsoft.Xna.Framework.Ray)">
      <summary>
    Checks whether the current BoundingSphere intersects with a specified Ray.
  </summary>
      <param name="ray">
        The Ray to check for intersection with the current BoundingSphere.
      </param>
      <returns>Nullable value indicating the relationship of the Ray and the BoundingSphere.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.BoundingSphere.ToString">
      <summary>
    Returns a System.String that represents the current BoundingSphere.
  </summary>
      <returns>System.String representation of the current BoundingSphere.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.BoundingSphere">
      <summary>Defines a sphere.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CouldNotFindDependencyException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CouldNotFindDependencyException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CouldNotFindDependencyException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.CouldNotFindDependencyException">
      <summary>Thrown when a required dll could not be found.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.#ctor">
      <summary>Initializes a new instance of Curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.Clone">
      <summary>Creates a copy of the Curve.</summary>
      <returns>
        The copy of the Curve.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Curve.Evaluate(System.Single)">
      <summary>Finds the value at a position on the Curve.</summary>
      <param name="position">
      The position on the Curve.</param>
      <returns>Value at the position on the Curve.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.IsConstant">
      <summary>Gets a value indicating whether the curve is constant.</summary>
      <returns>true is the curve is constant (has one or fewer points); false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.Keys">
      <summary>The points that make up the curve.</summary>
      <returns>Points that make up the curve.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.PostLoop">
      <summary>Specifies how to handle weighting values that are greater than the last control point in the curve.</summary>
      <returns>Specifies how to handle weighting values.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Curve.PreLoop">
      <summary>Specifies how to handle weighting values that are less than the first control point in the curve.</summary>
      <returns>Specifies how to handle weighting values.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Curve">
      <summary>Represents a curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of CurveKey.</summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of CurveKey.</summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
      <param name="tangentIn">Tangent approaching point from the previous point in the curve.</param>
      <param name="tangentOut">Tangent leaving point toward next point in the curve.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.CurveContinuity)">
      <summary>Initializes a new instance of CurveKey.</summary>
      <param name="position">Position in the curve.</param>
      <param name="value">Value of the control point.</param>
      <param name="tangentIn">Tangent approaching point from the previous point in the curve.</param>
      <param name="tangentOut">Tangent leaving point toward next point in the curve.</param>
      <param name="continuity">Enum indicating whether the curve is discrete or continuous.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Clone">
      <summary>Creates a copy of the CurveKey.</summary>
      <returns>The copy of the CurveKey.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.CompareTo(Microsoft.Xna.Framework.CurveKey)">
      <summary>Compares this instance to another CurveKey and returns an indication of their relative values.</summary>
      <param name="other">CurveKey to compare to. </param>
      <returns>Zero if the positions are the same; -1 if this CurveKey comes before  other and 1 if this CurveKey comes after other.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.op_Equality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether two CurveKey instances are equal.</summary>
      <param name="a">CurveKey on the left of the equal sign.</param>
      <param name="b">CurveKey on the right of the equal sign.</param>
      <returns>true if the CurveKeys are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Equals(Microsoft.Xna.Framework.CurveKey)">
      <summary>
    Determines whether the specified System.Object is equal to the CurveKey.
  </summary>
      <param name="other">
        The System.Object to compare with the current CurveKey.
      </param>
      <returns>true if the specified System.Object is equal to the current CurveKey; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>Value that is true if the current instance is equal to the specified object, or false if it is not.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>Hashcode for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKey.op_Inequality(Microsoft.Xna.Framework.CurveKey,Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether two CurveKey instances are not equal.</summary>
      <param name="a">CurveKey on the left of the equal sign.</param>
      <param name="b">CurveKey on the right of the equal sign.</param>
      <returns>true /&gt; if the CurveKeys are not equal; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Continuity">
      <summary>Describes whether the segment between this point and the next point in the curve is discrete or continuous.</summary>
      <returns>Describes the continuity between this point and the next.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Position">
      <summary>Position of the CurveKey in the curve.</summary>
      <returns>Position of the CurveKey in the curve.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.TangentIn">
      <summary>Describes the tangent when approaching this point from the previous point in the curve.</summary>
      <returns>The tangent when approaching.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.TangentOut">
      <summary>Describes the tangent when leaving this point to the next point in the curve.</summary>
      <returns>The tangent when leaving.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKey.Value">
      <summary>Describes the value of this point.</summary>
      <returns>The value of the point.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveKey">
      <summary>Represents a point in a multi point curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.#ctor">
      <summary>Initializes a new instance of CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Add(Microsoft.Xna.Framework.CurveKey)">
      <summary>Adds a CurveKey to the CurveKeyCollection.</summary>
      <param name="item">The CurveKey to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clear">
      <summary>Removes all CurveKeys from the CurveKeyCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Clone">
      <summary>Creates a copy of the CurveKeyCollection.</summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Contains(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines whether the CurveKeyCollection contains a specific CurveKey.</summary>
      <param name="item">true if the CurveKey is found in the CurveKeyCollection; false otherwise.</param>
      <returns>The CurveKey to locate in the CurveKeyCollection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.CopyTo(Microsoft.Xna.Framework.CurveKey[],System.Int32)">
      <summary>Copies the CurveKeys of the CurveKeyCollection to an array, starting at the array index provided.</summary>
      <param name="array">The destination of the CurveKeys copied from CurveKeyCollection. The array must have zero-based indexing. </param>
      <param name="arrayIndex">The zero-based index in the array to start copying from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the CurveKeyCollection.</summary>
      <returns>An enumerator for the CurveKeyCollection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.System.Collections.IEnumerable.GetEnumerator">
      <summary>Returns an enumerator that iterates through the CurveKeyCollection.</summary>
      <returns>An enumerator for the CurveKeyCollection.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.IndexOf(Microsoft.Xna.Framework.CurveKey)">
      <summary>Determines the index of a CurveKey in the CurveKeyCollection.</summary>
      <param name="item">CurveKey to locate in the CurveKeyCollection.</param>
      <returns>The index of the CurveKey if found in the CurveKeyCollection; âˆ’1 otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.RemoveAt(System.Int32)">
      <summary>Removes the CurveKey at the specfied index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.CurveKeyCollection.Remove(Microsoft.Xna.Framework.CurveKey)">
      <summary>Removes the first occurrence of a specific CurveKey from the CurveKeyCollection.</summary>
      <param name="item">The CurveKey to remove from the CurveKeyCollection.</param>
      <returns>true if CurveKey is successfully removed; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Count">
      <summary>Gets the number of elements contained in the CurveKeyCollection.</summary>
      <returns>The number of elements in the CurveKeyCollection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.IsReadOnly">
      <summary>Returns a value indicating whether the CurveKeyCollection is read-only.</summary>
      <returns>true if the CurveKeyCollection is read-only; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.CurveKeyCollection.Item">
      <summary>Gets or sets the element at the specified index.</summary>
      <param name="index">The array index of the element.</param>
      <returns>The CurveKey at the specified index.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveKeyCollection">
      <summary>Contains the CurveKeys making up a Curve.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Game.Activated">
      <summary>Raised when the game gains focus.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Game.Deactivated">
      <summary>Raised when the game loses focus.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Game.Disposed">
      <summary>Raised when the game is being disposed.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Game.Exiting">
      <summary>Raised when the game is exiting.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Game.Starting">
      <summary>Raised after the game is initialized but before the first frame.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Game.UnhandledException">
      <summary>Raised when an unhandled exception reaches the main loop of the game.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Dispose(System.Boolean)">
      <summary>
    Releases all resources used by the Game class.
  </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.DrawComponents">
      <summary>Calls the GameComponent.Draw method of each registered GameComponent.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Draw">
      <summary>Called when the game determines it is time to draw a frame.  Override this method with game-specific rendering code.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Exit">
      <summary>Exits the game.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Finalize">
      <summary>
    Allows a Game to attempt to free resources and perform other cleanup operations before garbage collection reclaims the Game.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.OnActivated">
      <summary>Raises the Game.Activated event.  Override to add code to handle when the game gains focus.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.OnDeactivated">
      <summary>Raises the Game.Deactivated event.  Override to add code to handle when the game loses focus.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.OnExiting">
      <summary>Raises an Game.Exiting event.  Override to add code to handle when the game is exiting.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.OnStarting">
      <summary>Raises the Game.Starting event.  Override to add code to setup the game before the first frame.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.OnUnhandledException(Microsoft.Xna.Framework.UnhandledExceptionEventArgs)">
      <summary>Raises an Game.UnhandledException event.  Override to add code to handle when an unhandled exception reaches the main loop of the game.
  </summary>
      <param name="e">Arguments to pass to the Game.UnhandledException event.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Run">
      <summary>Starts the game.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Tick">
      <summary>Updates the game's clock and calls Game.Update and Game.Draw.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.UpdateComponents">
      <summary>
    Calls the GameComponent.Update method of each registered GameComponent.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Game.Update">
      <summary>Called when the game has determined that game logic needs to be processed.  Override this method with game specific logic.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.AllowUserResizing">
      <summary>Specifies whether to allow the user to resize the game window.</summary>
      <returns>true if user resizing is allowed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.ElapsedRealTime">
      <summary>Gets the amount of clock time passed since the last frame.</summary>
      <returns>Amount of clock time passed since the last frame.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.ElapsedTime">
      <summary>Gets the amount of time that has passed since the last call to Game.Update.</summary>
      <returns>The amount of time passed.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.GameComponents">
      <summary>Gets the collection of GameComponents owned by the game.</summary>
      <returns>The collection of game GameComponents.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.GameServices">
      <summary>Gets the GameServiceContainer holding all the services attached to the Game.</summary>
      <returns>
        The GameServiceContainer holding all the services attached to the Game.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.GameTime">
      <summary>Gets the current game time, taking into account the type of game loop (fixed or variable).
  </summary>
      <returns>The current game time.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.InactiveSleepTime">
      <summary>Gets or sets the time to sleep when the game is inactive.</summary>
      <returns>The time to sleep when the game is inactive.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.IsActive">
      <summary>Indicates whether the game is currently the active application.</summary>
      <returns>true if the game is active; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.IsFixedTimeStep">
      <summary>Gets or sets a value indicating whether to use fixed time steps.</summary>
      <returns>true if using fixed time steps; false otherwise.  
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.IsMouseVisible">
      <summary>
    Gets or sets a value that indicating whether the mouse cursor should be visible.
  </summary>
      <returns>true if the mouse cursor should be visible; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.IsRunningSlowly">
      <summary>
    Gets a value indicating that the game loop is taking longer than its Game.TargetElapsedTime.
    In this case, the game loop can be considered to be running too slowly and should do something to "catch up."
  </summary>
      <returns>true if the game loop is taking longer than Game.TargetElapsedTime; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.Site">
      <summary>
    Gets or sets the designer host's site.
  </summary>
      <returns>
        Designer host's site.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.TargetElapsedTime">
      <summary>Gets or sets the target time between calls to Game.Update when Game.IsFixedTimeStep is true.</summary>
      <returns>The target time period for the game loop.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Game.Window">
      <summary>Gets the underlying operating system window.</summary>
      <returns>The underlying operating system window.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Game">
      <summary>The main game component which will contain a game's logic and rendering code.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameComponent.Disposed">
      <summary>Raised when the GameComponent is disposed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the GameComponent and optionally releases the managed resources.
  </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.Draw">
      <summary>Called when the GameComponent needs to be drawn. Override this method with component-specific draw code.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.Finalize">
      <summary>
    Allows a GameComponent to attempt to free resources and perform other cleanup operations before garbage collection reclaims the GameComponent.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.OnGameChanging(Microsoft.Xna.Framework.Game)">
      <summary>Called when the Game associated with a GameComponent changes.</summary>
      <param name="previousGame">The previous Game the GameComponent was associated with.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.Start">
      <summary>Called after game initialization but before the first frame of the game.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponent.Update">
      <summary>Called when the GameComponent needs to be updated.  Override this method with component-specific update code.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameComponent.Game">
      <summary>
    Gets and sets the Game associated with this GameComponent.
  </summary>
      <returns>
        The Game associated with this GameComponent.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameComponent.Site">
      <summary>Gets or sets the System.ComponentModel.ISite associated with the GameComponent.</summary>
      <returns>
        The System.ComponentModel.ISite associated with the GameComponent.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameComponent">
      <summary>Base class for all XNA game components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameComponentCollection.#ctor(Microsoft.Xna.Framework.Game)">
      <summary>Creates a new instance of GameComponentCollection. </summary>
      <param name="game">The Game to associate with the collection.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameComponentCollection">
      <summary>A collection of game components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameEventArgs.#ctor(Microsoft.Xna.Framework.Game)">
      <summary>Creates an instance of GameEventArgs.</summary>
      <param name="game">The game associated with this event.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameEventArgs.Game">
      <summary>Gets the Game associated with this event.</summary>
      <returns>The Game associated with this event.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameEventArgs">
      <summary>Provides data for Game events.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameServiceContainer.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameServiceContainer.AddService(System.Type,System.Object)">
      <summary>Adds a service to the GameServiceContainer.</summary>
      <param name="type">The type of service to add.</param>
      <param name="provider">The service provider to add.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameServiceContainer.GetService(System.Type)">
      <summary>Gets the object providing a specified service.</summary>
      <param name="type">The type of service.</param>
      <returns>The object providing the service.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameServiceContainer.GetService``1">
      <summary>Gets the object providing a specified service.</summary>
      <returns>The object providing the service.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameServiceContainer.RemoveService(System.Type)">
      <summary>Removes the object providing a specified service.</summary>
      <param name="type">The type of service.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameServiceContainer">
      <summary>A collection of game services.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameWindow.ClientSizeChanged">
      <summary>Triggered when the size of the GameWindow changes.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.GameWindow.ScreenDeviceNameChanged">
      <summary>Raised when the GameWindow moves to a different display.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.BeginScreenDeviceChange(System.Boolean)">
      <summary>Starts a device transition (windowed to fullscreen or vice versa).</summary>
      <param name="willBeFullScreen">Specifies whether the device will be in fullscreen mode upon completion of the change.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.EndScreenDeviceChange(System.String)">
      <summary>Completes a device transition.</summary>
      <param name="screenDeviceName">
        The desktop screen to move the window to.  
        This should be the screen device name of the graphics device that has transitioned to fullscreen.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.EndScreenDeviceChange(System.String,System.Int32,System.Int32)">
      <summary>Completes a device transition.</summary>
      <param name="screenDeviceName">
        The desktop screen to move the window to.
        This should be the screen device name of the graphics device that has transitioned to fullscreen.
      </param>
      <param name="clientWidth">The new width of the game's client window.</param>
      <param name="clientHeight">The new height of the game's client window.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.OnActivated">
      <summary>Called when the GameWindow gets focus.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.OnClientSizeChanged">
      <summary>Called when the size of the client window changes.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.OnDeactivated">
      <summary>Called when the GameWindow loses focus.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.OnPaint">
      <summary>Called when the GameWindow needs to be painted.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.OnScreenDeviceNameChanged">
      <summary>Called when the GameWindow is moved to a different screen.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.GameWindow.SetTitle(System.String)">
      <summary>Sets the title of the GameWindow.</summary>
      <param name="title">The new title of the GameWindow.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameWindow.ClientHeight">
      <summary>Gets the height of the system window.</summary>
      <returns>The height of the system window.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameWindow.ClientWidth">
      <summary>Gets the width of the system window.</summary>
      <returns>The width of the system window.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameWindow.Handle">
      <summary>Gets the handle to the system window.</summary>
      <returns>The handle to the system window.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameWindow.ScreenDeviceName">
      <summary>Gets the device name of the screen the window is currently in.</summary>
      <returns>The device name of the screen.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.GameWindow.Title">
      <summary>Gets and sets the title of the system window.</summary>
      <returns>The title of the system window.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.GameWindow">
      <summary>The system window associated with a Game.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.E">
      <summary>Represents the mathematical constant e.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Log10E">
      <summary>Represents the log base ten of e.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Log2E">
      <summary>Represents the log base two of e.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver2">
      <summary>Represents the value of pi divided by two.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.PiOver4">
      <summary>Represents the value of pi divided by four.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.Pi">
      <summary>Represents the value of pi.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.MathHelper.TwoPi">
      <summary>Represents the value of pi times two.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Barycentric(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Returns a point in barycentric coordinates, using the specified values.  </summary>
      <param name="value1">One point making up a triangle.</param>
      <param name="value2">One point making up a triangle.</param>
      <param name="value3">One point making up a triangle.</param>
      <param name="amount1">Weighting factor towards value2.</param>
      <param name="amount2">Weighting factor towards value3.</param>
      <returns>Point in barycentric coordinates.  </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.CatmullRom(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <returns>A position that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Clamp(System.Single,System.Single,System.Single)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Distance(System.Single,System.Single)">
      <summary>Calculates the absolute value of the difference of two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <returns>Distance between the two values.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Hermite(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position.</param>
      <param name="tangent1">Source tangent.</param>
      <param name="value2">Source position.</param>
      <param name="tangent2">Source tangent.</param>
      <param name="amount">Weighting factor.</param>
      <returns>The result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Lerp(System.Single,System.Single,System.Single)">
      <summary>Linearly interpolates between two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <returns>Interpolated value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Max(System.Single,System.Single)">
      <summary>Returns the greater of two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <returns>The greater value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.Min(System.Single,System.Single)">
      <summary>Returns the lowest of two values.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <returns>The lower value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.SmoothStep(System.Single,System.Single,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <returns>Interpolated value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.ToDegrees(System.Single)">
      <summary>Converts radians to degrees.</summary>
      <param name="radians">The angle in radians.</param>
      <returns>The angle in degrees.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.MathHelper.ToRadians(System.Single)">
      <summary>Converts degrees to radians.</summary>
      <param name="degrees">The angle in degrees.</param>
      <returns>The angle in radians.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.MathHelper">
      <summary>Contains commonly used precalculated values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Matrix.</summary>
      <param name="m11">Value to initialize m11 to.</param>
      <param name="m12">Value to initialize m12 to.</param>
      <param name="m13">Value to initialize m13 to.</param>
      <param name="m14">Value to initialize m14 to.</param>
      <param name="m21">Value to initialize m21 to.</param>
      <param name="m22">Value to initialize m22 to.</param>
      <param name="m23">Value to initialize m23 to.</param>
      <param name="m24">Value to initialize m24 to.</param>
      <param name="m31">Value to initialize m31 to.</param>
      <param name="m32">Value to initialize m32 to.</param>
      <param name="m33">Value to initialize m33 to.</param>
      <param name="m34">Value to initialize m34 to.</param>
      <param name="m41">Value to initialize m41 to.</param>
      <param name="m42">Value to initialize m42 to.</param>
      <param name="m43">Value to initialize m43 to.</param>
      <param name="m44">Value to initialize m44 to.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M11">
      <summary>Value at row 1 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M12">
      <summary>Value at row 1 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M13">
      <summary>Value at row 1 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M14">
      <summary>Value at row 1 column 4 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M21">
      <summary>Value at row 2 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M22">
      <summary>Value at row 2 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M23">
      <summary>Value at row 2 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M24">
      <summary>Value at row 2 column 4 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M31">
      <summary>Value at row 3 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M32">
      <summary>Value at row 3 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M33">
      <summary>Value at row 3 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M34">
      <summary>Value at row 3 column 4 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M41">
      <summary>Value at row 4 column 1 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M42">
      <summary>Value at row 4 column 2 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M43">
      <summary>Value at row 4 column 3 of the matrix.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Matrix.M44">
      <summary>Value at row 4 column 4 of the matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Addition(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Adds a matrix to another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Add(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Adds a matrix to another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable.{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a spherical billboard that rotates around specfied object position.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="cameraUpVector">The up vector of the camera.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <returns>The created billboard matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateConstrainedBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Nullable.{Microsoft.Xna.Framework.Vector3},System.Nullable.{Microsoft.Xna.Framework.Vector3})">
      <summary>Creates a cylindrical billboard that rotates around a specfied axis.</summary>
      <param name="objectPosition">Position of the object the billboard will rotate around.</param>
      <param name="cameraPosition">Position of the camera.</param>
      <param name="rotateAxis">Axis to rotate the billboard around.</param>
      <param name="cameraForwardVector">Optional forward vector of the camera.</param>
      <returns>The created billboard matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new Matrix that rotates around an arbitrary vector.</summary>
      <param name="axis">The axis to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
      <returns>The created Matrix</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateLookAt(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Builds a look-at matrix.</summary>
      <param name="cameraPosition">The position of the camera.</param>
      <param name="cameraTarget">The position for the camera to look at.</param>
      <param name="cameraUpVector">The world's up, usually [0, 1, 0].</param>
      <returns>The created look-at matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, orthogonal projection matrix.</summary>
      <param name="left">Minimum x-value of the view volume.</param>
      <param name="right">Maximum x-value of the view volume.</param>
      <param name="bottom">Minimum y-value of the view volume.</param>
      <param name="top">Maximum y-value of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
      <returns>The projection matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds an orthogonal projection matrix.</summary>
      <param name="width">Width of the view volume.</param>
      <param name="height">Height of the view volume.</param>
      <param name="zNearPlane">Minimum z-value of the view volume.</param>
      <param name="zFarPlane">Maximum z-value of the view volume.</param>
      <returns>The projection matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a perspective projection matrix based on a field of view.</summary>
      <param name="fieldOfView">Field of view in radians.</param>
      <param name="aspectRatio">Aspect ratio, defined as view space width divided by height.</param>
      <param name="zNearPlane">Z-value of the near view-plane.</param>
      <param name="zFarPlane">Z-value of the far view-plane.</param>
      <returns>The perspective projection matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, perspective projection matrix.</summary>
      <param name="left">Minimum x-value of the view volume at the near view-plane.</param>
      <param name="right">Maximum x-value of the view volume at the near view-plane.</param>
      <param name="bottom">Minimum y-value of the view volume at the near view-plane.</param>
      <param name="top">Maximum y-value of the view volume at the near view-plane.</param>
      <param name="zNearPlane">Z-value of the near view-plane.</param>
      <param name="zFarPlane">Z-value of the far view-plane.</param>
      <returns>The created projection matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a perspective projection matrix.</summary>
      <param name="width">Width of the view volume at the near view-plane.</param>
      <param name="height">Height of the view volume at the near view-plane.</param>
      <param name="zNearPlane">Z-value of the near view-plane.</param>
      <param name="zFarPlane">Z-value of the far view-plane.</param>
      <returns>The projection matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationX(System.Single)">
      <summary>Returns an x-axis rotation matrix.</summary>
      <param name="radians">The rotation in radians.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationY(System.Single)">
      <summary>Returns a y-axis rotation matrix.</summary>
      <param name="radians">The rotation in radians.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateRotationZ(System.Single)">
      <summary>Returns a z-axis rotation matrix.</summary>
      <param name="radians">The rotation in radians.</param>
      <returns>The rotation matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single)">
      <summary>Creates a scale Matrix.</summary>
      <param name="scale">Amount to scale by.</param>
      <returns>The created scale Matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a scale Matrix.</summary>
      <param name="scales">Amounts to scale by on the x, y and z axis.</param>
      <returns>The created scale Matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateScale(System.Single,System.Single,System.Single)">
      <summary>
    Creates a scale Matrix.
  </summary>
      <param name="xScale">Value to scale by on the x-axis.</param>
      <param name="yScale">Value to scale by on the y-axis.</param>
      <param name="zScale">Value to scale by on the z-axis.</param>
      <returns>
        The created scale Matrix.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(Microsoft.Xna.Framework.Vector3)">
      <summary>
    Creates a translation Matrix</summary>
      <param name="position">Amounts to translate by on the x, y and z axis.</param>
      <returns>The created translation Matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>
    Creates a translation Matrix</summary>
      <param name="xPosition">Value to translate by on the x-axis.</param>
      <param name="yPosition">Value to translate by on the y-axis.</param>
      <param name="zPosition">Value to translate by on the z-axis.</param>
      <returns>The created translation Matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Determinant">
      <summary>Calculates the determinant of the matrix.</summary>
      <returns>The determinant of the matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
      <returns>Result of the division.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Divide(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Divides the components of a matrix by the corresponding components of another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">The divisor.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Division(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Divides the components of a matrix by a scalar.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="divider">The divisor.</param>
      <returns>The result of the division.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Equality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Compares a matrix for equality with another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>true if the matrices are equal, false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Equals(Microsoft.Xna.Framework.Matrix)">
      <summary>
    Determines whether the specified System.Object is equal to the Matrix.
  </summary>
      <param name="other">
        The System.Object to compare with the current Matrix.
      </param>
      <returns>true if the specified System.Object is equal to the current Matrix; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>Value that is true if the current instance is equal to the specified object, or false if it is not.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.FromQuaternion(Microsoft.Xna.Framework.Quaternion)">
      <summary>Creates a rotation Matrix from a Quaternion.</summary>
      <param name="quaternion">Quaternion to create the Matrix from.</param>
      <returns>The created Matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.GetHashCode">
      <summary>Returns the hashcode of this object.</summary>
      <returns>Hashcode of this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Inequality(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Tests a matrix for inequality with another matrix.</summary>
      <param name="matrix1">The matrix on the left of the equal sign.</param>
      <param name="matrix2">The matrix on the right of the equal sign.</param>
      <returns>true if the matrices are not equal, false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Invert(Microsoft.Xna.Framework.Matrix)">
      <summary>Calculates the inverse of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <returns>The inverse of the matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Lerp(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Linearly interpolates between the corresponding values of two matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <param name="amount">Interpolation value.</param>
      <returns>Resulting matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by another matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(System.Single,Microsoft.Xna.Framework.Matrix)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="matrix">Source matrix.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="factor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Multiply(Microsoft.Xna.Framework.Matrix,System.Single)">
      <summary>Multiplies a matrix by a scalar value.</summary>
      <param name="matrix">Source matrix.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Negate(Microsoft.Xna.Framework.Matrix)">
      <summary>Negate individual elements of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <returns>Negated matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_Subtraction(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Subtracts matrices.</summary>
      <param name="matrix1">Source matrix.</param>
      <param name="matrix2">Source matrix.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Subtract(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>Subtracts matrices.</summary>
      <param name="matrix1">Source vector.</param>
      <param name="matrix2">Source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.ToString">
      <summary>Obtains a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.Transpose(Microsoft.Xna.Framework.Matrix)">
      <summary>Transposes the rows and columns of a matrix.</summary>
      <param name="matrix">Source matrix.</param>
      <returns>Transposed matrix.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Matrix.op_UnaryNegation(Microsoft.Xna.Framework.Matrix)">
      <summary>Negate individual elements of a matrix.</summary>
      <param name="matrix1">Source matrix.</param>
      <returns>Negated matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Backward">
      <summary>Gets and sets the backward vector of the Matrix.</summary>
      <returns>The backward vector of the Matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Down">
      <summary>Gets and sets the down vector of the Matrix.</summary>
      <returns>The down vector of the Matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Forward">
      <summary>Gets and sets the forward vector of the Matrix.</summary>
      <returns>The forward vector of the Matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Identity">
      <summary>Returns an instance of the identity matrix.</summary>
      <returns>The identity matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Left">
      <summary>Gets and sets the left vector of the Matrix.</summary>
      <returns>The left vector of the Matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Right">
      <summary>Gets and sets the right vector of the Matrix.</summary>
      <returns>The right vector of the Matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Translation">
      <summary>Gets and sets the translation vector of the Matrix.</summary>
      <returns>The translation vector of the Matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Matrix.Up">
      <summary>Gets and sets the up vector of the Matrix.</summary>
      <returns>The up vector of the Matrix.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Matrix">
      <summary>Defines a matrix.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.ModifyDeviceEventArgs.#ctor(Microsoft.Xna.Framework.Components.GraphicsDeviceInformation)">
      <summary>Creates an instance of ModifyDeviceEventArgs.</summary>
      <param name="graphicsDeviceInformation">Object describing the new state of the device.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.ModifyDeviceEventArgs.GraphicsDeviceInformation">
      <summary>Gets the Components.GraphicsDeviceInformation associated with the Components.GraphicsComponent.ModifyDevice event.</summary>
      <returns>
        The Components.GraphicsDeviceInformation associated with the Components.GraphicsComponent.ModifyDevice event.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.ModifyDeviceEventArgs">
      <summary>Holds data for the Components.GraphicsComponent.ModifyDevice event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a new instance of Plane.</summary>
      <param name="normal">The normal vector to the Plane.</param>
      <param name="distance">The Plane's distance along its normal from the origin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
    Creates a new instance of Plane.
  </summary>
      <param name="a">X component of the normal defining the Plane.</param>
      <param name="b">Y component of the normal defining the Plane.</param>
      <param name="c">Z component of the normal defining the Plane.</param>
      <param name="d">Distance of the Plane along its normal from the origin.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>
    Creates a new instance of Plane.
  </summary>
      <param name="value">Vector4 with X, Y and Z components defining the normal of the Plane.
      The W component defines the distance of the Plane along the normal from the origin. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>
    Creates a new instance of Plane.
  </summary>
      <param name="point1">
        One point of a triangle defining the Plane. 
      </param>
      <param name="point2">
        One point of a triangle defining the Plane.
      </param>
      <param name="point3">
        One point of a triangle defining the Plane.
      </param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Plane.Distance">
      <summary>The distance of the Plane along its normal from the origin. </summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Plane.Normal">
      <summary>The normal vector of the Plane.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.op_Equality(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Plane)">
      <summary>
    Determines whether two instances of Plane are equal.
  </summary>
      <param name="lhs">The object to the left of the equality operator.</param>
      <param name="rhs">The object to the right of the equality operator.</param>
      <returns>true if left is equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Equals(Microsoft.Xna.Framework.Plane)">
      <summary>
    Determines whether the specified Plane is equal to the Plane.
  </summary>
      <param name="other">
        The Plane to compare with the current Plane.
      </param>
      <returns>true if the specified Plane is equal to the current Plane; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Equals(System.Object)">
      <summary>
    Determines whether the specified System.Object is equal to the Plane.
  </summary>
      <param name="obj">
        The System.Object to compare with the current Plane.
      </param>
      <returns>true if the specified System.Object is equal to the current Plane; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>
        A hash code for the current Plane.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.op_Inequality(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Plane)">
      <summary>
    Determines whether two instances of Plane are not equal.
  </summary>
      <param name="lhs">The object to the left of the inequality operator.</param>
      <param name="rhs">The object to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the current Plane intersects a specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with.</param>
      <returns>An enumeration indicating the relationship between the Plane and the BoundingSphere.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>Checks whether the current Plane intersects a specified BoundingFrustum.</summary>
      <param name="frustum">The BoundingFrustum to check for intersection with.</param>
      <returns>An enumeration indicating the relationship between the Plane and the BoundingFrustum.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>Checks whether the current Plane intersects a specified BoundingBox.</summary>
      <param name="box">The BoundingBox to test for intersection with.</param>
      <returns>An enumeration indicating the relationship between the Plane and the BoundingBox.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.ToString">
      <summary>
    Returns a System.String that represents the current Plane.
  </summary>
      <returns>System.String representation of the current Plane.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Plane.Transform(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms the specified Plane by a Matrix. </summary>
      <param name="plane">The Plane to transform.</param>
      <param name="matrix">The Matrix to transform the Plane with.</param>
      <returns>The transformed Plane.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Plane.A">
      <summary>Returns the X component of the normal vector defining the Plane.</summary>
      <returns>
        The X component of the normal vector defining the Plane.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Plane.B">
      <summary>
    Returns the Y component of the normal vector defining the Plane.
  </summary>
      <returns>
        The Y component of the normal vector defining the Plane.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Plane.C">
      <summary>
    Returns the Z component of the normal vector defining the Plane.
  </summary>
      <returns>
        The Z component of the normal vector defining the Plane.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Plane.D">
      <summary>
    Returns the plane's distance from the origin along the normal vector of the Plane.
  </summary>
      <returns>
        The plane's distance from the origin along the normal vector of the Plane.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Plane">
      <summary>Defines a plane.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of Point.</summary>
      <param name="x">The x-coordinate of the Point.</param>
      <param name="y">The y-coordinate of the Point.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.#ctor(Microsoft.Xna.Framework.Point)">
      <summary>Initializes a new instance of Point.</summary>
      <param name="point">Point to initialize this Point with.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Point.X">
      <summary>Specifies the x-coordinate of the Point.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Point.Y">
      <summary>Specifies the y-coordinate of the Point.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.op_Equality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
      <summary>
	  Determines whether two Point instances are equal.
  </summary>
      <param name="a">Point on the left side of the equal sign.
	  </param>
      <param name="b">Point on the right side of the equal sign.
	  </param>
      <returns>true if a and bare equal; false otherwise.
	  </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.Equals(Microsoft.Xna.Framework.Point)">
      <summary>
    Determines whether two Point instances are equal.
  </summary>
      <param name="other">The Point to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.Equals(System.Object)">
      <summary>
	  Determines whether two Point instances are equal.
  </summary>
      <param name="obj">The object to compare this instance to.</param>
      <returns>true if the instances are equal; false otherwise.
	  </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>The hash code for this instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.op_Inequality(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
      <summary>
	  Determines whether two Point instances are not equal.
  </summary>
      <param name="a">The Point on the left side of the equal sign.</param>
      <param name="b">The Point on the right side of the equal sign.</param>
      <returns>true if the instances are not equal; false otherwise.
	  </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Point.ToString">
      <summary>
	  Returns a System.String that represents the current Point.
  </summary>
      <returns>A System.String that represents the current Point.  </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Point.Zero">
      <summary>Returns the point (0,0).</summary>
      <returns>The point (0,0).</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Point">
      <summary>Defines a point in 2D space.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Quaternion.</summary>
      <param name="x">The x value of the quaternion.</param>
      <param name="y">The y value of the quaternion.</param>
      <param name="z">The z value of the quaternion.</param>
      <param name="w">The w value of the quaternion.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Initializes a new instance of Quaternion.</summary>
      <param name="vectorPart">The vector component of the quaternion.</param>
      <param name="scalarPart">The rotation component of the quaternion.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.W">
      <summary>Specifies the rotation component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.X">
      <summary>Specifies the x value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.Y">
      <summary>Specifies the y value of the vector component of the quaternion.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Quaternion.Z">
      <summary>Specifies the z value of the vector component of the quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Addition(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Adds two Quaternions.</summary>
      <param name="quaternion1">Quaternion to add.</param>
      <param name="quaternion2">Quaternion to add.</param>
      <returns>Result of adding the Quaternions.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Add(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Adds two Quaternions.</summary>
      <param name="quaternion1">Quaternion to add.</param>
      <param name="quaternion2">Quaternion to add.</param>
      <returns>Result of adding the Quaternions.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromAxisAngle(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Creates a Quaternion from a vector and an angle to rotate about the vector.</summary>
      <param name="axis">The vector to rotate around.</param>
      <param name="angle">The angle to rotate around the vector.</param>
      <returns>The created Quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.CreateFromRotationMatrix(Microsoft.Xna.Framework.Matrix)">
      <summary>Creates a Quaternion from a rotation Matrix.</summary>
      <param name="matrix">
        The rotation Matrix to create the Quaternion from.
      </param>
      <returns>The created Quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Divide(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides a Quaternion by another Quaternion.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">The divisor.</param>
      <returns>Result of the division.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Division(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides a Quaternion by another Quaternion.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">The divisor.</param>
      <returns>Result of the division.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Dot(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Calculates the dot product of two Quaternions.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
      <returns>Dot product of the Quaternions.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Equality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Compares two Quaternions for equality.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
      <returns>true if the Quaternions are equal, false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(Microsoft.Xna.Framework.Quaternion)">
      <summary>
    Determines whether the specified System.Object is equal to the Quaternion.
  </summary>
      <param name="other">
        The Quaternion to compare with the current Quaternion.
      </param>
      <returns>true if the specified System.Object is equal to the current Quaternion; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.GetHashCode">
      <summary>Get the hash code of this object.</summary>
      <returns>The hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Inequality(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Compare two Quaternions for inequality.</summary>
      <param name="quaternion1">Source Quaternion.</param>
      <param name="quaternion2">Source Quaternion.</param>
      <returns>true if the Quaternions are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Inverse(Microsoft.Xna.Framework.Quaternion)">
      <summary>Returns the inverse of a Quaternion.</summary>
      <param name="quaternion">Source Quaternion.</param>
      <returns>The inverse of the Quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.LengthSquared">
      <summary>Calculates the length squared of a Quaternion.</summary>
      <returns>The length squared of the Quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Length">
      <summary>Calculates the length of a Quaternion.</summary>
      <returns>The length of the Quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Lerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Linearly interpolates between two quaternions.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value indicating how far to interpolate between the quaternions.</param>
      <returns>The resulting quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Multiplies two quaternions.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Multiplies two quaternions.</summary>
      <param name="quaternion1">The quaternion on the left of the multiplication.</param>
      <param name="quaternion2">The quaternion on the right of the multiplication.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Multiply(Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Multiplies a quaternion by a scalar value.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Scalar value.</param>
      <returns>The result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Negate(Microsoft.Xna.Framework.Quaternion)">
      <summary>Flips the sign of each component of the quaternion.</summary>
      <param name="quatenrion">Source quaternion.</param>
      <returns>Negated quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Normalize(Microsoft.Xna.Framework.Quaternion)">
      <summary>Divides each component of the quaternion by the length of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
      <returns>Normalized quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
      <summary>Interpolates btween two quaternions, using spherical linear interpolation.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <param name="amount">Value that indicates how far to interpolate between the quaternions.</param>
      <returns>Result of the interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_Subtraction(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.Subtract(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion)">
      <summary>Subtracts a quaternion from another quaternion.</summary>
      <param name="quaternion1">Source quaternion.</param>
      <param name="quaternion2">Source quaternion.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.ToString">
      <summary>Retireves a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Quaternion.op_UnaryNegation(Microsoft.Xna.Framework.Quaternion)">
      <summary>Flips the sign of each component of the quaternion.</summary>
      <param name="quaternion">Source quaternion.</param>
      <returns>Negated quaternion.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Quaternion">
      <summary>Defines a quaternion.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a new instance of Ray.</summary>
      <param name="position">The starting point of the Ray.</param>
      <param name="direction">The direction of the Ray.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Ray.Direction">
      <summary>Specifies the direction the Ray is pointing.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Ray.Position">
      <summary>Specifies the starting point of the Ray.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.op_Equality(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Ray)">
      <summary>
    Determines whether two instances of Ray are equal.
  </summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if left is equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Equals(System.Object)">
      <summary>
    Determines whether two instances of Ray are equal.
  </summary>
      <param name="obj">
        The System.Object to compare with the current Ray.
      </param>
      <returns>true if the specified System.Object is equal to the current Ray; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Equals(Microsoft.Xna.Framework.Ray)">
      <summary>
    Determines whether the specified Ray is equal to the current Ray.
  </summary>
      <param name="other">
        The Ray to compare with the current Ray.
      </param>
      <returns>true if the specified Ray is equal to the current Ray; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>
        A hash code for the current Ray.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.op_Inequality(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Ray)">
      <summary>
    Determines whether two instances of Ray are not equal.
  </summary>
      <param name="a">The object to the left of the inequality operator.</param>
      <param name="b">The object to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingSphere)">
      <summary>Checks whether the Ray intersects a specified BoundingSphere.</summary>
      <param name="sphere">The BoundingSphere to check for intersection with the Ray.</param>
      <returns>Class indicating the relationship between the Ray and BoundingSphere.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingFrustum)">
      <summary>
    Checks whether the Ray intersects a specified BoundingFrustum.
  </summary>
      <param name="frustum">
        The BoundingFrustum to check for intersection with the Ray.
      </param>
      <returns>Class indicating the relationship between the Ray and BoundingFrustum.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.Intersects(Microsoft.Xna.Framework.BoundingBox)">
      <summary>
    Checks whether the Ray intersects a specified BoundingBox.
  </summary>
      <param name="box">
        The BoundingBox to check for intersection with the Ray.
      </param>
      <returns>Class indicating the relationship between the Ray and BoundingBox.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Ray.ToString">
      <summary>
    Returns a System.String that represents the current Ray.
  </summary>
      <returns>System.String representation of the current Ray.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Ray">
      <summary>Defines a ray.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of Rectangle.</summary>
      <param name="x">The x-coordinate of the rectangle.</param>
      <param name="y">The y-coordinate of the rectangle.</param>
      <param name="width">Width of the rectangle.</param>
      <param name="height">Height of the rectangle.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.Height">
      <summary>Specifies the height of the rectangle.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.Width">
      <summary>Specifies the width of the rectangle.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.X">
      <summary>Specifies the x-coordinate of the rectangle.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Rectangle.Y">
      <summary>Specifies the y-coordinate of the rectangle.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.op_Equality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Compares two rectangles for equality.</summary>
      <param name="a">Source rectangle.</param>
      <param name="b">Source rectangle.</param>
      <returns>true if the rectangles are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Equals(Microsoft.Xna.Framework.Rectangle)">
      <summary>
    Determines whether the specified System.Object is equal to the Rectangle.
  </summary>
      <param name="other">
        The System.Object to compare with the current Rectangle.
      </param>
      <returns>true if the specified System.Object is equal to the current Rectangle; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.GetHashCode">
      <summary>Gets the hash code for this object.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.op_Inequality(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
      <summary>Compares two rectangles for inequality.</summary>
      <param name="a">Source rectangle.</param>
      <param name="b">Source rectangle.</param>
      <returns>true if the rectangles are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Inflate(System.Int32,System.Int32)">
      <summary>Pushes the edges of the Rectangle out by the horizontal and vertical values specified.</summary>
      <param name="horizontalValue">Value to push the sides out by.</param>
      <param name="verticalValue">Value to push the top and bottom out by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(System.Int32,System.Int32)">
      <summary>Changes the position of the Rectangle.</summary>
      <param name="offsetX">Change in the x position.</param>
      <param name="offsetY">Change in the y position.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.Offset(Microsoft.Xna.Framework.Point)">
      <summary>Changes the position of the Rectangle.</summary>
      <param name="offset">The values to adjust the position of the Rectangle by.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Rectangle.ToString">
      <summary>Retrieves a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Bottom">
      <summary>Returns the y coordinate of the bottom of the rectangle.</summary>
      <returns>The y coordinate of the bottom of the rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Empty">
      <summary>Returns a Rectangle with all of its values set to zero.</summary>
      <returns>An empty Rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Left">
      <summary>Returns the x coordinate of the left side of the rectangle.</summary>
      <returns>The x coordinate of the left side of the rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Right">
      <summary>Returns the x coordinate of the right side of the rectangle.</summary>
      <returns>The x coordinate of the right side of the rectangle.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Rectangle.Top">
      <summary>Returns the y coordinate of the top of the rectangle.</summary>
      <returns>The y coordinate of the top of the rectangle.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Rectangle">
      <summary>Defines a rectangle.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.UnhandledExceptionEventArgs.#ctor(System.Exception)">
      <summary>Creates an instance of UnhandledExceptionEventArgs. </summary>
      <param name="exception">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="P:Microsoft.Xna.Framework.UnhandledExceptionEventArgs.Exception">
      <summary>
    Gets and sets the exception that is the cause of the current exception.
  </summary>
      <returns>The exception that is the cause of the current exception.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.UnhandledExceptionEventArgs.RethrowException">
      <summary>
    Gets or sets a value that specifies whether the exception should be rethrown.
  </summary>
      <returns>Value that specifies whether the exception should be rethrown.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.UnhandledExceptionEventArgs">
      <summary>Contains data for the Game.UnhandledException event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single)">
      <summary>Creates a new instance of Vector2.</summary>
      <param name="value">Value to initialize both components to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of Vector2.</summary>
      <param name="x">Initial value for the x component of the vector.</param>
      <param name="y">Initial value for the y component of the vector.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector2.X">
      <summary>Gets or sets the x component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector2.Y">
      <summary>Gets or sets the y component of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Addition(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Sum of the source vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Add(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Sum of the source vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Barycentric(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
      <summary>Returns a point in Barycentric coordinates, using the specified values.</summary>
      <param name="value1">One point making up a triangle.</param>
      <param name="value2">One point making up a triangle.</param>
      <param name="value3">One point making up a triangle.</param>
      <param name="amount1">Weighting factor towards value2.</param>
      <param name="amount2">Weighting factor towards value3.</param>
      <returns>Point in barycentric coordinates.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.CatmullRom(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Clamp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.DistanceSquared(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The distance between the source vectors squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Distance(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Distance between the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <returns>The source vector divided by b.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Divide(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <returns>The result of dividing the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <returns>The source vector divided by b.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Division(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <returns>The result of dividing the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Dot(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Calculates the dot product of two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Equality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Tests vectors for equality.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>true if the vectors are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Equals(Microsoft.Xna.Framework.Vector2)">
      <summary>
    Determines whether the specified System.Object is equal to the Vector2.
  </summary>
      <param name="other">
        The System.Object to compare with the current Vector2.
      </param>
      <returns>true if the specified System.Object is equal to the current Vector2; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.GetHashCode">
      <summary>Gets the hash code of the vector object.</summary>
      <returns>Hash code of the vector object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Hermite(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <returns>The result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Inequality(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Tests vectors for inequality.</summary>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
      <returns>Returns true if the vectors are not equal,  false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.LengthSquared">
      <summary>Calculates the length of the vector squared.</summary>
      <returns>The length of the vector squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Length">
      <summary>Calculates the length of the vector.</summary>
      <returns>Length of the vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Lerp(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value indicating how far to interpolate between the vectors.</param>
      <returns>The linear interpolation of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Max(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Min(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Multiply(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Negate(Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <returns>Vector pointing in the opposite direction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize(Microsoft.Xna.Framework.Vector2)">
      <summary>Creates a unit vector from the specified vector.</summary>
      <param name="value">Source Vector2.</param>
      <returns>The created unit vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Normalize">
      <summary>Creates a unit vector from the specified vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.SmoothStep(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <returns>Interpolated value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_Subtraction(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Subtract(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.ToString">
      <summary>Retrieves a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.TransformNormal(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 2D vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed normal.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms the vector (x, y, 0, 1) by the specified matrix.</summary>
      <param name="position">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector2.op_UnaryNegation(Microsoft.Xna.Framework.Vector2)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <returns>Vector pointing in the opposite direction.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.One">
      <summary>Returns a Vector2 with both of its components set to one.</summary>
      <returns>Vector2 with both of its components set to one.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.UnitX">
      <summary>Returns the unit vector for the x-axis.</summary>
      <returns>The unit vector for the x-axis.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.UnitY">
      <summary>Returns the unit vector for the y-axis.</summary>
      <returns>The unit vector for the y-axis.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector2.Zero">
      <summary>Returns a Vector2 with all of its components set to zero.</summary>
      <returns>A Vector2  with all of its components set to zero.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector2">
      <summary>Defines a vector with two components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single)">
      <summary>Creates a new instance of Vector3.</summary>
      <param name="value">Value to initialize each component to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(Microsoft.Xna.Framework.Vector2,System.Single)">
      <summary>Initializes a new instance of Vector3.</summary>
      <param name="value">A vector containing the values to initialize x and y components with.</param>
      <param name="z">Initial value for the z component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Vector3.</summary>
      <param name="x">Initial value for the x component of the vector.</param>
      <param name="y">Initial value for the y component of the vector.</param>
      <param name="z">Initial value for the z component of the vector.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.X">
      <summary>Gets or sets the x component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.Y">
      <summary>Gets or sets the y component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector3.Z">
      <summary>Gets or sets the z component of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Addition(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Sum of the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Add(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Sum of the source vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Barycentric(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,System.Single)">
      <summary>Returns a point in barycentric coordinates, using the specified values.</summary>
      <param name="value1">One point making up a triangle.</param>
      <param name="value2">One point making up a triangle.</param>
      <param name="value3">One point making up a triangle.</param>
      <param name="amount1">Weighting factor towards value2.</param>
      <param name="amount2">Weighting factor towards value3.</param>
      <returns>Point in barycentric coordinates.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.CatmullRom(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Clamp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Cross(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the cross product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <returns>Cross product of the source vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.DistanceSquared(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The distance between the source vectors squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Distance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Distance between the source vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <returns>The result of dividing the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Divide(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">The divisor.</param>
      <returns>The source vector divided by b.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <returns>The result of dividing the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Division(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value">Source vector.</param>
      <param name="divider">The divisor.</param>
      <returns>The source vector divided by div.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Dot(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Calculates the dot product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Equality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Tests vectors for equality.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>true if the vectors are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object to make the comparison with.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Equals(Microsoft.Xna.Framework.Vector3)">
      <summary>
    Determines whether the specified System.Object is equal to the Vector3.
  </summary>
      <param name="other">
        The Vector3 to compare with the current Vector3.
      </param>
      <returns>true if the specified Vector3 is equal to the current Vector3; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.GetHashCode">
      <summary>Gets the hash code of the vector object.</summary>
      <returns>Hash code of the vector object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Hermite(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <returns>The result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Inequality(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Tests vectors for inequality.</summary>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
      <returns>true if the vectors are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.LengthSquared">
      <summary>Calculates the length of the vector squared.</summary>
      <returns>The length of the vector squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Length">
      <summary>Calculates the length of the vector.</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Lerp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value indicating how far to interpolate between the vectors.</param>
      <returns>The linear interpolation of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Max(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Min(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector3)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Multiply(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Multiplies a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Negate(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <returns>Vector pointing in the opposite direction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize(Microsoft.Xna.Framework.Vector3)">
      <summary>Creates a unit vector from the specified vector.</summary>
      <param name="vector">The source Vector3.</param>
      <returns>The created unit vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Normalize">
      <summary>Creates a unit vector from the specified vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Reflect(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Returns the reflect vector of a vector and a normal.</summary>
      <param name="vector">Source vector.</param>
      <param name="normal">Source normal.</param>
      <returns>The reflect vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.SmoothStep(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <returns>Interpolated value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_Subtraction(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Subtract(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.ToString">
      <summary>Retrieves a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.TransformNormal(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 3D vector normal by a matrix.</summary>
      <param name="normal">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed vector normal.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>Transforms a 3D vector by the given matrix.</summary>
      <param name="position">The source vector.</param>
      <param name="matrix">The transformation matrix.</param>
      <returns>The transformed vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector3.op_UnaryNegation(Microsoft.Xna.Framework.Vector3)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <returns>Vector pointing in the opposite direction.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Backward">
      <summary>Returns a unit Vector3 pointing backwards (0, 0, 1).</summary>
      <returns>
      A unit Vector3 pointing backwards.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Down">
      <summary>Returns a unit Vector3 pointing down (0, âˆ’1, 0).</summary>
      <returns>
      A unit Vector3 pointing down.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Forward">
      <summary>Returns a unit Vector3 pointing forward (0, 0, âˆ’1).</summary>
      <returns>
      A unit Vector3 pointing forward.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Left">
      <summary>Returns a unit Vector3 pointing left (âˆ’1, 0, 0).</summary>
      <returns>
      A unit Vector3 pointing left.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.One">
      <summary>Returns a Vector3 with ones in all of its components.</summary>
      <returns>
        a Vector3 with ones in all of its components.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Right">
      <summary>Returns a unit Vector3 pointing to the right (1, 0, 0).</summary>
      <returns>A unit Vector3 pointing to the right.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitX">
      <summary>Returns the x unit Vector3 (1, 0, 0).</summary>
      <returns>Returns the x unit Vector3 .</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitY">
      <summary>
    Returns the y unit Vector3 (0, 1, 0).
  </summary>
      <returns>
        Returns the y unit Vector3.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.UnitZ">
      <summary>
    Returns the z unit Vector3 (0, 0, 1).
  </summary>
      <returns>
        Returns the z unit Vector3.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Up">
      <summary>Returns a unit Vector3  pointing up (0, 1, 0).</summary>
      <returns>
        A unit Vector3  pointing up.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector3.Zero">
      <summary>Returns a Vector3 with all of its components set to zero.</summary>
      <returns>
        A Vector3 with all of its components set to zero.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector3">
      <summary>Defines a vector with three components.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single)">
      <summary>Creates a new instance of Vector4.</summary>
      <param name="value">Value to initialize each component to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of Vector4.</summary>
      <param name="x">Initial value for the x component of the vector.</param>
      <param name="y">Initial value for the y component of the vector.</param>
      <param name="z">Initial value for the z component of the vector.</param>
      <param name="w">Initial value for the w component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector3,System.Single)">
      <summary>Initializes a new instance of Vector4.</summary>
      <param name="value">A vector containing the values to initialize x, y, and z components with.</param>
      <param name="w">Initial value for the w component of the vector.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.#ctor(Microsoft.Xna.Framework.Vector2,System.Single,System.Single)">
      <summary>Initializes a new instance of Vector4.</summary>
      <param name="value">A vector containing the values to initialize x and y components with.</param>
      <param name="z">Initial value for the z component of the vector.</param>
      <param name="w">Initial value for the w component of the vector.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.W">
      <summary>Gets or sets the w component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.X">
      <summary>Gets or sets the x component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.Y">
      <summary>Gets or sets the y component of the vector.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Vector4.Z">
      <summary>Gets or sets the z component of the vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Addition(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Sum of the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Add(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Adds two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Sum of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Barycentric(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single,System.Single)">
      <summary>Returns a point in barycentric coordinates, using the specified values.</summary>
      <param name="value1">One point making up a triangle.</param>
      <param name="value2">One point making up a triangle.</param>
      <param name="value3">One point making up a triangle.</param>
      <param name="amount1">Weighting factor towards value2.</param>
      <param name="amount2">Weighting factor towards value3.</param>
      <returns>Point in barycentric coordinates.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.CatmullRom(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a Catmull-Rom interpolation using the specified positions.</summary>
      <param name="value1">The first position in the interpolation.</param>
      <param name="value2">The second position in the interpolation.</param>
      <param name="value3">The third position in the interpolation.</param>
      <param name="value4">The fourth position in the interpolation.</param>
      <param name="amount">Weighting factor.</param>
      <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Clamp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Restricts a value to be within a specified range.</summary>
      <param name="value1">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.DistanceSquared(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the distance between two vectors squared.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The distance between the source vectors squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Distance(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the distance between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Distance between the source vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <returns>The result of dividing the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Divide(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <returns>The source vector divided by b.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Divides the components of a vector by the components of another vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Divisor vector.</param>
      <returns>The result of dividing the vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Division(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Divides a vector by a scalar value.</summary>
      <param name="value1">Source vector.</param>
      <param name="divider">The divisor.</param>
      <returns>The source vector divided by div.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Dot(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Calculates the dot product of two vectors.</summary>
      <param name="vector1">Source vector.</param>
      <param name="vector2">Source vector.</param>
      <returns>The dot product of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Equality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Tests vectors for equality.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>true if the vectors are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Equals(Microsoft.Xna.Framework.Vector4)">
      <summary>
    Determines whether the specified System.Object is equal to the Vector4.
  </summary>
      <param name="other">
        The Vector4 to compare with the current Vector4.
      </param>
      <returns>true if the specified Vector4 is equal to the current Vector4; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.GetHashCode">
      <summary>Gets the hash code of the vector object.</summary>
      <returns>Hash code of the vector object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Hermite(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a Hermite spline interpolation.</summary>
      <param name="value1">Source position vector.</param>
      <param name="tangent1">Source tangent vector.</param>
      <param name="value2">Source position vector.</param>
      <param name="tangent2">Source tangent vector.</param>
      <param name="amount">Weighting factor.</param>
      <returns>The result of the Hermite spline interpolation.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Inequality(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Tests vectors for inequality.</summary>
      <param name="value1">Vector to compare.</param>
      <param name="value2">Vector to compare.</param>
      <returns>true if the vectors are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.LengthSquared">
      <summary>Calculates the length of the vector squared.</summary>
      <returns>The length of the vector squared.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Length">
      <summary>Calculates the length of the vector.</summary>
      <returns>The length of the vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Lerp(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Performs a linear interpolation between two vectors.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <param name="amount">Value indicating how far to interpolate between the vectors.</param>
      <returns>The linear interpolation of the two vectors.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Max(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector that contains the highest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The maximized vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Min(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector that contains the lowest value from each matching pair of components.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>The minimized vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies the components of two vectors by each other.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(System.Single,Microsoft.Xna.Framework.Vector4)">
      <summary>Multiplies a vector by a scalar.</summary>
      <param name="scaleFactor">Scalar value.</param>
      <param name="value1">Source vector.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Multiplies a vector by a scalar.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Multiply(Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Multiplies a vector by a scalar.</summary>
      <param name="value1">Source vector.</param>
      <param name="scaleFactor">Scalar value.</param>
      <returns>Result of the multiplication.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Negate(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <returns>Vector pointing in the opposite direction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize(Microsoft.Xna.Framework.Vector4)">
      <summary>Creates a unit vector from the specified vector.</summary>
      <param name="vector">The source Vector4.</param>
      <returns>The created unit vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Normalize">
      <summary>Creates a unit vector from the specified vector.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.SmoothStep(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4,System.Single)">
      <summary>Interpolates between two values using a cubic equation.</summary>
      <param name="value1">Source value.</param>
      <param name="value2">Source value.</param>
      <param name="amount">Weighting value.</param>
      <returns>Interpolated value.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_Subtraction(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Subtract(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Vector4)">
      <summary>Subtracts a vector from a vector.</summary>
      <param name="value1">Source vector.</param>
      <param name="value2">Source vector.</param>
      <returns>Result of the subtraction.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.ToString">
      <summary>Retrieves a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Transforms a Vector2 by the given Matrix.
  </summary>
      <param name="position">The source Vector2.</param>
      <param name="matrix">The transformation Matrix.</param>
      <returns>The transformed Vector4.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Transforms a Vector3 by the given Matrix.
  </summary>
      <param name="position">
        The source Vector3.</param>
      <param name="matrix">The transformation Matrix.</param>
      <returns>The transformed Vector4.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.Transform(Microsoft.Xna.Framework.Vector4,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Transforms a Vector4 by the specified Matrix.
  </summary>
      <param name="vector">The source Vector4.</param>
      <param name="matrix">The transformation Matrix.</param>
      <returns>The transformed Vector4.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Vector4.op_UnaryNegation(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns a vector pointing in the opposite direction.</summary>
      <param name="value">Source vector.</param>
      <returns>Vector pointing in the opposite direction.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.One">
      <summary>Returns a Vector4 with all of its components set to one.</summary>
      <returns>
        A Vector4 with all of its components set to one.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitW">
      <summary>Returns the Vector4 (0, 0, 0, 1). </summary>
      <returns>
        The Vector4 (0, 0, 0, 1).
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitX">
      <summary>
    Returns the Vector4 (1, 0, 0, 0).
  </summary>
      <returns>
        The Vector4 (1, 0, 0, 0).
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitY">
      <summary>
    Returns the Vector4 (0, 1, 0, 0).
  </summary>
      <returns>
        The Vector4 (0, 1, 0, 0).
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.UnitZ">
      <summary>
    Returns the Vector4 (0, 0, 1, 0).
  </summary>
      <returns>
        The Vector4 (0, 0, 1, 0).
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Vector4.Zero">
      <summary>
    Returns a Vector4 with all of its components set to zero.
  </summary>
      <returns>
        A Vector4 with all of its components set to zero.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Vector4">
      <summary>Defines a vector with four components.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.ContainmentType">
      <summary>Indicates the extent to which bounding volumes intersect or contain one another.</summary>
      <param name="Contains">Indicates that one bounding volume completely contains the other.</param>
      <param name="Disjoint">Indicates there is no overlap between the bounding volumes.</param>
      <param name="Intersects">Indicates that the bounding volumes partially overlap.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveContinuity">
      <summary>Defines the continuity of CurveKeys on a Curve.</summary>
      <param name="Smooth">Interpolation can be used between this CurveKey and the next.</param>
      <param name="Step">Interpolation cannot be used between this CurveKey and the next. Specifying a position between the two points returns this point.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.CurveLoopType">
      <summary>Defines how the value of a Curve will be determined for positions before the first point on the Curve or after the last point on the Curve.</summary>
      <param name="Constant">The Curve will evaluate to its first key for positions before the first point in the Curve and to the last key for positions after the last point.</param>
      <param name="Cycle">Positions specified past the ends of the curve will wrap around to the opposite side of the Curve.</param>
      <param name="CycleOffset">Positions specified past the ends of the curve will wrap around to the opposite side of the Curve.
      The value will be offset by the difference between the values of the first and last CurveKey multiplied by the number of times the position wraps around.
      If the position is before the first point in the Curve, the difference will be subtracted from its value; otherwise, the difference will be added.
    </param>
      <param name="Linear">Linear interpolation will be performed to determine the value.</param>
      <param name="Oscillate">
      Positions specified past the ends of the Curve act as an offset from the same side of the Curve toward the opposite side.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.PlaneIntersectionType">
      <summary>Describes the intersection between a plane and a bounding volume.</summary>
      <param name="Back">There is no intersection, and the bounding volume is in the negative half-space of the Plane.</param>
      <param name="Front">There is no intersection, and the bounding volume is in the positive half-space of the Plane.</param>
      <param name="Intersecting">The Plane is intersected.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.PlayerIndex">
      <summary>Specifies the index of a player.</summary>
      <param name="Any">Any player.</param>
      <param name="One">The first player.</param>
      <param name="Two">The second player.</param>
      <param name="Three">The third player.</param>
      <param name="Four">The fourth player.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.TargetPlatform">
      <summary>Defines the target platform.</summary>
      <param name="Unknown">Represents an unknown platform.</param>
      <param name="Windows">The Windows platform.</param>
      <param name="Xbox360">The Xbox 360 game console.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadArraySizeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadArraySizeException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadArraySizeException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BadArraySizeException">
      <summary>
    The exception that is thrown when an array exceeds the allowable size.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadCacheFileException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadCacheFileException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadCacheFileException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BadCacheFileException">
      <summary>The exception that is thrown when a cache file could not be read.. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadDataReferenceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadDataReferenceException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadDataReferenceException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BadDataReferenceException">
      <summary>The exception that is thrown when template member data could not be retrieved. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadFileException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadFileException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadFileException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BadFileException">
      <summary>The exception that is thrown when a file read or write operation fails. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadFileFloatSizeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadFileFloatSizeException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadFileFloatSizeException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BadFileFloatSizeException">
      <summary>The exception that is thrown when a file is not the expected size.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadFileTypeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadFileTypeException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadFileTypeException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BadFileTypeException">
      <summary>The exception that is thrown when a file has an invalid format. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadFileVersionException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadFileVersionException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadFileVersionException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BadFileVersionException">
      <summary>The exception that is thrown when a file has an invalid format version. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadObjectException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadObjectException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadObjectException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BadObjectException">
      <summary>The exception that is thrown when data could not be read from or written to an object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadResourceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadResourceException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadResourceException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BadResourceException">
      <summary>The exception that is thrown when an operation on a resource fails. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadTypeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadTypeException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadTypeException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BadTypeException">
      <summary>The exception that is thrown when a file did not match a known template type. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadValueException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadValueException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BadValueException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BadValueException">
      <summary>The exception that is thrown when a variable is outside its expected range; typically when an object pointer is invalid. </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.DiffuseColor">
      <summary>Gets or sets the diffuse color of this light.</summary>
      <returns>The diffuse color of this light.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.Direction">
      <summary>Gets or sets light direciton.</summary>
      <returns>Gets or sets the light direciton. This value must be a unit vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.Enable">
      <summary>Enables this light.</summary>
      <returns>true to enable this light; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicDirectionalLight.SpecularColor">
      <summary>Gets or sets the specular color of the light.</summary>
      <returns>The specular color of the light.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BasicDirectionalLight">
      <summary>Provides methods for manipulating the directional lights used by the BasicEffect
 class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.EffectPool)">
      <summary>
    Initializes a new instance of the BasicEffect class.
  </summary>
      <param name="device">
        The graphics device that will create the effect.
      </param>
      <param name="effectPool">Specifies a pool of resources to share between effects. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.BasicEffect)">
      <summary>
    Initializes a new instance of the BasicEffect class.
  </summary>
      <param name="device">The graphics device that will create the effect.</param>
      <param name="clone">The effect to clone.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.BasicEffect.Clone(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Creates a clone of an effect. </summary>
      <param name="device">The cloned effect.</param>
      <returns>The device associated with the effect.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Alpha">
      <summary>Gets or sets the alpha this effect material.</summary>
      <returns>The alpha of this effect material.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.AmbientColor">
      <summary>Gets or sets the ambient color of this effect material.</summary>
      <returns>The ambient color of this effect material. Valid values are between 0 and 1.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.AmbientLightColor">
      <summary>Gets or sets the ambient light color of this effect.</summary>
      <returns>The ambient light color of this effect. Valid values are between 0 and 1.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DiffuseColor">
      <summary>Gets or sets the diffuse color of this effect material. Value takes 0 to 1.</summary>
      <returns>The diffuse color of this effect material. Valid values are between  0 and 1.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight0">
      <summary>Gets or sets the first directional light for this effect.</summary>
      <returns>A directional light for this effect.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight1">
      <summary>Gets or sets the second directional light for this effect.</summary>
      <returns>A directional light for this effect.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.DirectionalLight2">
      <summary>Gets or sets the third directional light for this effect.</summary>
      <returns>A directional light for this effect.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.EmissiveColor">
      <summary>Gets or sets the emissive color of the effect material.</summary>
      <returns>The emissive color of the effect material. Valid values are between 0 and 1.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogColor">
      <summary>Gets or sets the fog color for this effect.</summary>
      <returns>The fog color for this effect.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogEnable">
      <summary>Enables fog for this effect.</summary>
      <returns>true to enable fog; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogEnd">
      <summary>Gets or sets the ending distance of fog.</summary>
      <returns>Fog end distance specified as a positive value.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.FogStart">
      <summary>Gets or sets the fog start distance.</summary>
      <returns>Fog start distance specified as a positive value.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.LightingEnable">
      <summary>Enables lighting for this effect.</summary>
      <returns>true to enable lighting; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Projection">
      <summary>Gets or sets the projection matrix.</summary>
      <returns>The projection matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.SpecularColor">
      <summary>Gets or sets the specular color of this effect material.</summary>
      <returns>The specular color of this effect material. Valid values are between 0 and 1.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.SpecularPower">
      <summary>Gets or sets the specular power of this effect material.</summary>
      <returns>The specular power of this effect material.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.Texture">
      <summary>Gets or sets a texture to be applied by this effect.</summary>
      <returns>Texture to be applied by this effect.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.View">
      <summary>Gets or sets the view matrix.</summary>
      <returns>The view matrix.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.BasicEffect.World">
      <summary>Gets or sets the world matrix.</summary>
      <returns>The world matrix.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BasicEffect">
      <summary>Encapsulates the capabilities of a basic effect, including manipulation of the effect texture, material, up to three directional lights, and the world, view and projection matrices.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ClipPlane.ToString">
      <summary>Gets a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ClipPlane.IsEnabled">
      <summary>Indicates whether the clipping plane is enabled.</summary>
      <returns>true if the clipping plane is enabled; false if disabled.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ClipPlane.Plane">
      <summary>Gets or sets the coefficients of a user-defined clipping plane for the device.</summary>
      <returns>User-defined clipping plane.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ClipPlane">
      <summary>Represents the device clipping plane.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.DisableAll">
      <summary>Disables all clipping planes on the device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.EnableAll">
      <summary>Enables all clipping planes that have been set.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ClipPlaneCollection.Item">
      <summary>
    Gets a specific ClipPlane object using an index value.
  </summary>
      <param name="index">The index of the ClipPlane object to return.</param>
      <returns>The ClipPlane object at index index.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ClipPlaneCollection">
      <summary>Manipulates a collection of ClipPlane objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="vector">A !Framework.Vector4 containing the Red, Green, Blue, and Alpha values defining a color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="r">The red component of a color.</param>
      <param name="g">The green component of a color.</param>
      <param name="b">The blue component of a color.</param>
      <param name="a">The alpha component of a color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="r">The red component of a color.</param>
      <param name="g">The green component of a color.</param>
      <param name="b">The blue component of a color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of Color.</summary>
      <param name="vector">A !Framework.Vector3 containing the Red, Green, and Blue values defining a color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.op_Equality(Microsoft.Xna.Framework.Graphics.Color,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.Equals(Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">
        The Color to compare with the current Color.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">
        The System.Object to compare with the current Color.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.op_Inequality(Microsoft.Xna.Framework.Graphics.Color,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color..PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Returns the packed value of the current color as a !Framework.Vector4.</summary>
      <param name="vector">The packed value of the current color.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.ToString">
      <summary>Gets a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Color.ToVector4">
      <summary>Returns the current color as a !Framework.Vector4.</summary>
      <returns>The current color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.AliceBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.AntiqueWhite">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Aquamarine">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Aqua">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Azure">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.A">
      <summary>Gets the alpha component value. </summary>
      <returns>The alpha component value of this Color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Beige">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Bisque">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Black">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.BlanchedAlmond">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.BlueViolet">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Blue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Brown">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.BurlyWood">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.B">
      <summary>Gets the blue component value of this Color. </summary>
      <returns>The blue component value of this Color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.CadetBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Chartreuse">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Chocolate">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Coral">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.CornflowerBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Cornsilk">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Crimson">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Cyan">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkCyan">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkGoldenrod">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkGray">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkKhaki">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkMagenta">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkOliveGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkOrange">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkOrchid">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkRed">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkSalmon">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkSeaGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkSlateBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkSlateGray">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkTurquoise">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DarkViolet">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DeepPink">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DeepSkyBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DimGray">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.DodgerBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Firebrick">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.FloralWhite">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.ForestGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Fuchsia">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Gainsboro">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.GhostWhite">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Goldenrod">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Gold">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Gray">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.GreenYellow">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Green">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.G">
      <summary>Gets the green component value of this Color. </summary>
      <returns>The green component value of this Color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Honeydew">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.HotPink">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.IndianRed">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Indigo">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Ivory">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Khaki">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LavenderBlush">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Lavender">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LawnGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LemonChiffon">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightCoral">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightCyan">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightGoldenrodYellow">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightGray">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightPink">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSalmon">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSeaGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSkyBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSlateGray">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightSteelBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LightYellow">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.LimeGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Lime">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Linen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Magenta">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Maroon">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumAquamarine">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumOrchid">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumPurple">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumSeaGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumSlateBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumSpringGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumTurquoise">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MediumVioletRed">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MidnightBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MintCream">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.MistyRose">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Moccasin">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.NavajoWhite">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Navy">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.OldLace">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.OliveDrab">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Olive">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.OrangeRed">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Orange">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Orchid">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PackedValue">
      <summary>Gets the current color as a packed value.</summary>
      <returns>The current color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PaleGoldenrod">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PaleGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PaleTurquoise">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PaleVioletRed">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PapayaWhip">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PeachPuff">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Peru">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Pink">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Plum">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.PowderBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Purple">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Red">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.RosyBrown">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.RoyalBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.R">
      <summary>Gets the red component value of this Color. </summary>
      <returns>The red component value of this Color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SaddleBrown">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Salmon">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SandyBrown">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SeaGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SeaShell">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Sienna">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Silver">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SkyBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SlateBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SlateGray">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Snow">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SpringGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.SteelBlue">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Tan">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Teal">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Thistle">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Tomato">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.TransparentBlack">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.TransparentWhite">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Turquoise">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Violet">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Wheat">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.WhiteSmoke">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.White">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.YellowGreen">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Color.Yellow">
      <summary>Gets a system-defined color.</summary>
      <returns>A system-defined color. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Color">
      <summary>Represents a color using Red, Green, Blue, and Alpha values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilationFailedException.#ctor(System.String,System.Exception)">
      <summary>
    Initializes a new instance of the CompilationFailedException class with a specified error message and a reference to the inner exception that is the cause of this exception.
    .
  </summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilationFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilationFailedException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompilationFailedException">
      <summary>The exception that is thrown if the compilation of an effect fails.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledEffect.#ctor(System.Int32[],System.String)">
      <summary>Creates a new instance of the CompiledEffect class.</summary>
      <param name="compiledEffectCode">The compiled effect code.</param>
      <param name="errors">A string to receive compilation errors, if any.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledEffect.GetShaderCode">
      <summary>Gets the compiled byte code for this shader.</summary>
      <returns>The compiled bytecode.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledEffect.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledEffect.ErrorsAndWarnings">
      <summary>Gets any errors and warnings generated by compiling the effect.</summary>
      <returns>A string containing errors and warnings from compiling the effect.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledEffect.Success">
      <summary>Indicates whether the effect was compiled successfully.</summary>
      <returns>true if the effect was compiled successfully; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompiledEffect">
      <summary>Represents a compiled Effect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledShader.#ctor(System.Int32[],Microsoft.Xna.Framework.Graphics.ShaderConstantTable,System.String)">
      <summary>
    Initializes a new instance of the CompiledShader class.
  </summary>
      <param name="compiledShaderCode">The compiled shader to encapsulate.</param>
      <param name="table">Shader constants for the compiled shader.</param>
      <param name="errors">String containing at least the first compile error message that occurred. This includes effect compiler errors and high-level language compile errors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledShader.GetInputSemantics">
      <summary>Gets the semantics for the shader inputs. Use this method to determine the input vertex format.</summary>
      <returns>An array of shader semantics.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledShader.GetOutputSemantics">
      <summary>Gets the semantics for all shader output elements.</summary>
      <returns>An array of shader semantics.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledShader.GetSamplers">
      <summary>Gets the sampler names referenced in a shader.</summary>
      <returns>An array of sampler names.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledShader.GetShaderCode">
      <summary>Gets the compiled shader code.</summary>
      <returns>The compiled shader code.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompiledShader.ToString">
      <summary>
    Returns a System.String that represents the current CompiledShader.
  </summary>
      <returns>
        A System.String that represents the current CompiledShader.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledShader.ErrorsAndWarnings">
      <summary>Gets the first compile error message that occurred.</summary>
      <returns>The first compile error message that occurred. This includes effect compiler errors and high-level language compile errors.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledShader.ShaderConstantTable">
      <summary>Gets or sets the shader constants.</summary>
      <returns>A ShaderConstantTable containing shader constants.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledShader.ShaderSize">
      <summary>Gets the size of the shader byte code, in bytes.</summary>
      <returns>The size of the shader byte code, in bytes.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledShader.ShaderVersion">
      <summary>Gets the shader version of the compiled shader.</summary>
      <returns>The shader version of the compiled shader.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompiledShader.Success">
      <summary>Returns a value indicating whether the shader compilation was successful.</summary>
      <returns>true if the shader compilation succeeds; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompiledShader">
      <summary>Represents a compiled shader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">This parameter marshals as an unsigned byte.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler.Open(Microsoft.Xna.Framework.Graphics.CompilerIncludeHandlerType,System.String)">
      <summary>Returns a !System.IO.Stream containing include data from a specified file.</summary>
      <param name="includeType">A CompilerIncludeHandlerType indicating whether the file is a local or system resource.</param>
      <param name="filename">The file name of the file to open.</param>
      <returns>A !System.IO.Stream of compiler include data.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler">
      <summary>The abstract base class for custom compiler include file handlers.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.CompilerMacro.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompilerMacro.Definition">
      <summary>Gets or sets the macro definition.</summary>
      <returns>The definition of the macro.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.CompilerMacro.Name">
      <summary>Gets or sets the macro name.</summary>
      <returns>The name of the macro.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompilerMacro">
      <summary>Represents a compiler macro.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ConflictingRenderStateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ConflictingRenderStateException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ConflictingRenderStateException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ConflictingRenderStateException">
      <summary>The exception that is thrown when the currently set render states cannot be used together. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ConflictingTextureFilterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ConflictingTextureFilterException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ConflictingTextureFilterException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ConflictingTextureFilterException">
      <summary>The exception that is thrown when the current texture filters cannot be used together. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ConflictingTexturePaletteException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ConflictingTexturePaletteException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ConflictingTexturePaletteException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ConflictingTexturePaletteException">
      <summary>The exception that is thrown when the current textures cannot be used simultaneously. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceLostException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceLostException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceLostException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceLostException">
      <summary>The exception that is thrown when the device has been lost but cannot be reset at this time. Therefore, rendering is not possible. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotResetException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotResetException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DeviceNotResetException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceNotResetException">
      <summary>The exception that is thrown when the device has been lost but can be reset at this time. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.op_Equality(Microsoft.Xna.Framework.Graphics.DisplayMode,Microsoft.Xna.Framework.Graphics.DisplayMode)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">
        The System.Object to compare with the current DisplayMode.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.op_Inequality(Microsoft.Xna.Framework.Graphics.DisplayMode,Microsoft.Xna.Framework.Graphics.DisplayMode)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">The object to the left of the inequality operator.</param>
      <param name="right">The object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayMode.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.Format">
      <summary>Gets a value indicating the surface format of the display mode. </summary>
      <returns>The surface format of the display mode. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.Height">
      <summary>Gets a value indicating the screen height, in pixels. </summary>
      <returns>Screen height, in pixels. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.RefreshRate">
      <summary>Gets a value indicating the refresh rate. The value of 0 indicates an adapter default. </summary>
      <returns>Refresh rate. The value of 0 indicates an adapter default. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayMode.Width">
      <summary>Gets a value indicating the screen width, in pixels. </summary>
      <returns>Screen width, in pixels. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DisplayMode">
      <summary>Describes the display mode.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.op_Equality(Microsoft.Xna.Framework.Graphics.DisplayModeCollection,Microsoft.Xna.Framework.Graphics.DisplayModeCollection)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="l">Object to the left of the equality operator.</param>
      <param name="r">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">
        The System.Object to compare with the current DisplayModeCollection.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.GetEnumerator">
      <summary>Gets an enumerator that can iterate through the DisplayModeCollection.</summary>
      <returns>Enumerator that can iterate through the DisplayModeCollection.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.op_Inequality(Microsoft.Xna.Framework.Graphics.DisplayModeCollection,Microsoft.Xna.Framework.Graphics.DisplayModeCollection)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="l">The object to the left of the inequality operator.</param>
      <param name="r">The object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Item">
      <summary>Retrieves the DisplayMode structure with the specified Format.
</summary>
      <param name="format">
      The format of the DisplayMode to retrieve.
      </param>
      <returns>The DisplayMode.
    </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DisplayModeCollection">
      <summary>Manipulates a collection of DisplayMode structures.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the DisplayModeCollection. </summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.Reset">
      <summary>Resets the current enumerator to point to the head of the queue.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator.Current">
      <summary>Gets the element in the collection at the current position of the enumerator. </summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DisplayModeCollection.Enumerator">
      <summary>Implements an enumerator for iterating a DisplayModeCollection.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DriverInternalErrorException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DriverInternalErrorException">
      <summary>The exception that is thrown when an internal driver error occurs. Applications should destroy and recreate the device when receiving this error. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DriverInvalidCallException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DriverInvalidCallException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.DriverInvalidCallException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DriverInvalidCallException">
      <summary>The exception that is thrown when a driver call is invalid. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.Graphics.EffectPool)">
      <summary>Initializes a new instance of this class, specifying the effect source code as a file stream. </summary>
      <param name="graphicsDevice">The graphics device that will create the effect.</param>
      <param name="effectCodeFileStream">File stream of the effect.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="pool">Specifies a pool of resources to share between effects. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.Graphics.EffectPool)">
      <summary>Initializes a new instance of this class, specifying the effect source as a file stream, as well as the number of bytes in the file stream. </summary>
      <param name="graphicsDevice">The graphics device that will create the effect.</param>
      <param name="effectCodeFileStream">File stream of the effect.</param>
      <param name="numberBytes">The number of bytes to read from the file.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="pool">Specifies a pool of resources to share between effects. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>Initializes a new instance of this class, specifying the graphics device to associate with this effect and the effect to clone. </summary>
      <param name="graphicsDevice">The graphics device that will create the effect.</param>
      <param name="cloneSource">The effect to clone.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.Graphics.EffectPool)">
      <summary>Initializes a new instance of this class, specifying the effect source by file name. </summary>
      <param name="graphicsDevice">The graphics device that will create the effect.</param>
      <param name="effectCodeFile">The file name. </param>
      <param name="options">Compilation optimization options.</param>
      <param name="pool">Specifies a pool of resources to share between effects. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32[],Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.Graphics.EffectPool)">
      <summary>Initializes a new instance of this class, specifying the effect source code as a byte array.  </summary>
      <param name="graphicsDevice">The graphics device that will create the effect.</param>
      <param name="effectCode">Byte array containing the effect code.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="pool">Specifies a pool of resources to share between effects. </param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.Effect.Disposing">
      <summary>
        Occurs when Effect.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.Effect.Lost">
      <summary>Occurs when an object is lost, normally just before a device is reset.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.Effect.Reset">
      <summary>Occurs after the device is reset.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Begin(Microsoft.Xna.Framework.Graphics.EffectStateOptions)">
      <summary>
    Starts an active technique.
  </summary>
      <param name="flags">The options to use for saving and creating the effect.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Clone(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Creates a clone of an effect.</summary>
      <param name="device">The device associated with the effect.</param>
      <returns>The cloned effect.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.CommitChanges">
      <summary>Propagates the state change that occurs inside of an active pass to the device before rendering.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.CompileEffectFromFile(System.IO.Stream,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles an effect from an ASCII or binary effect description.</summary>
      <param name="effectFileStream">File stream containing the effect to be compiled.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="platform">The target platform for the compilation.</param>
      <returns>The compiled effect.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.CompileEffectFromFile(System.String,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles an effect from an ASCII or binary effect description.</summary>
      <param name="effectFile">The name of the file containing the effect.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="platform">The target platform for the compilation.</param>
      <returns>The compiled effect.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.CompileEffectFromFile(System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles an effect from an ASCII or binary effect description.</summary>
      <param name="effectFileStream">File stream containing the effect to be compiled.</param>
      <param name="numberBytes">The number of bytes in effectFileStream.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="platform">The target platform for the compilation.</param>
      <returns>The compiled effect.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.CompileEffectFromSource(System.String,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,Microsoft.Xna.Framework.TargetPlatform)">
      <summary>Compiles a shader from a file containing the effect source.</summary>
      <param name="effectFileSource">String containing the effect source.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="options">Compilation optimization options.</param>
      <param name="platform">The target platform for the compilation.</param>
      <returns>The compiled effect.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Disassemble(System.Boolean)">
      <summary>Disassembles this effect.</summary>
      <param name="enableColorCode">true to enable color coding to make the disassembly easier to read.
    </param>
      <returns>A string that contains the disassembled effect.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Disassemble(Microsoft.Xna.Framework.Graphics.Effect,System.Boolean)">
      <summary>Disassembles an effect.</summary>
      <param name="effect">The effect to disassemble.</param>
      <param name="enableColorCode">true to enable color coding to make the disassembly easier to read.
    </param>
      <returns>A string that contains the disassembled effect.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the Effect and optionally releases the managed resources.
  </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Effect.Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.End">
      <summary>Ends the application of the current effect technique.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.op_Equality(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Equals(System.Object)">
      <summary>Gets a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this object.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.op_Inequality(Microsoft.Xna.Framework.Graphics.Effect,Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.raise_Lost(System.Object,System.EventArgs)">
      <summary>Raises an Effect.Lost event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass into the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.raise_Reset(System.Object,System.EventArgs)">
      <summary>Raises an Effect.Reset event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass into the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Effect.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.Creator">
      <summary>Gets the name of the effect creator.</summary>
      <returns>The name of the effect creator.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.CurrentTechnique">
      <summary>Gets the current technique.</summary>
      <returns>The current technique.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.EffectPool">
      <summary>Gets an EffectPool representing the pool of shared parameters.</summary>
      <returns>The pool of shared parameters.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.Functions">
      <summary>Gets a collection of functions that can render the effect.</summary>
      <returns>Collection of functions that can render the effect.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.GraphicsDevice">
      <summary>Gets the graphics device that created the effect.</summary>
      <returns>The graphics device that created the effect.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.Parameters">
      <summary>Gets a collection of parameters used for this effect.</summary>
      <returns>The collection of parameters used for this effect.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Effect.Techniques">
      <summary>Gets a collection of techniques that can render the effect.</summary>
      <returns>A collection of techniques that can render the effect.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Effect">
      <summary>Used to set and query effects and choose techniques.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueBoolean">
      <summary>Gets the value of the EffectAnnotation as a System.Boolean.</summary>
      <returns>
        The value of the EffectAnnotation as a System.Boolean.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueInt32">
      <summary>
    Gets the value of the EffectAnnotation as a System.Int32.
  </summary>
      <returns>
        The value of the EffectAnnotation as a System.Int32.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueMatrix">
      <summary>
    Gets the value of the EffectAnnotation as a System.Int32.
  </summary>
      <returns>
        The value of the EffectAnnotation as a System.Int32.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueSingle">
      <summary>
    Gets the value of the EffectAnnotation as a System.Single.
  </summary>
      <returns>
        The value of the EffectAnnotation as a System.Single.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueString">
      <summary>
    Gets the value of the EffectAnnotation as a System.String.
  </summary>
      <returns>
        The value of the EffectAnnotation as a System.String.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueVector2">
      <summary>
    Gets the value of the EffectAnnotation as a !Framework.Vector2.
  </summary>
      <returns>
        The value of the EffectAnnotation as a !Framework.Vector2.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueVector3">
      <summary>
    Gets the value of the EffectAnnotation as a !Framework.Vector3.
  </summary>
      <returns>
        The value of the EffectAnnotation as a !Framework.Vector3.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotation.GetValueVector4">
      <summary>
    Gets the value of the EffectAnnotation as a !Framework.Vector4.
  </summary>
      <returns>
        The value of the EffectAnnotation as a !Framework.Vector4.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotation.Name">
      <summary>Gets the name of the effect annotation.</summary>
      <returns>The name of the effect annotation.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectAnnotation">
      <summary>Represents an annotation to an EffectParameter.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the EffectAnnotationCollection. </summary>
      <returns>The iterator.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.Count">
      <summary>Gets the number of EffectAnnotation objects in this EffectAnnotationCollection.
</summary>
      <returns>The number of EffectAnnotation objects in this EffectAnnotationCollection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.Item">
      <summary>Gets a specific EffectAnnotation object by using a name.</summary>
      <param name="name">Name of the EffectAnnotation to get.
    </param>
      <returns>The EffectAnnotation object named name.  </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection.Item">
      <summary>Gets a specific EffectAnnotation object by using an index value.</summary>
      <param name="index">Index of the EffectAnnotation to get.</param>
      <returns>The EffectAnnotation object at index index. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectAnnotationCollection">
      <summary>Manipulates a collection of EffectAnnotation objects.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectFunction.Name">
      <summary>Gets the name of the function.</summary>
      <returns>The name of the function.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectFunction">
      <summary>Represents a function on an Effect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the EffectFunctionCollection. </summary>
      <returns>The iterator.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.Count">
      <summary>Gets the number of EffectFunction objects in this EffectFunctionCollection.</summary>
      <returns>The number of EffectFunction objects in this EffectFunctionCollection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.Item">
      <summary>Gets a specific EffectFunction object by using a name.</summary>
      <param name="name">Name of the EffectFunction to get.</param>
      <returns>The EffectFunction object named name. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectFunctionCollection.Item">
      <summary>Gets a specific EffectFunction object by using an index value.</summary>
      <param name="index">Index of the EffectFunction to get.</param>
      <returns>The EffectFunction object at index index. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectFunctionCollection">
      <summary>Manipulates a collection of EffectFunction objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueBooleanArray(System.Int32)">
      <summary>
    Gets the value of the EffectParameter as an array of System.Boolean.
  </summary>
      <param name="count">The number of elements in the array.</param>
      <returns>
        The value of the EffectParameter as an array of System.Boolean.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueBoolean">
      <summary>
    Gets the value of the EffectParameter as a System.Boolean.
  </summary>
      <returns>
        The value of the EffectParameter as a System.Boolean.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueInt32Array(System.Int32)">
      <summary>
    Gets the value of the EffectParameter as an array of System.Int32.
  </summary>
      <param name="count">The number of elements in the array.</param>
      <returns>
        The value of the EffectParameter as an array of System.Int32.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueInt32">
      <summary>
    Gets the value of the EffectParameter as an System.Int32.
  </summary>
      <returns>
        Gets the value of the EffectParameter as an System.Int32.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueMatrixArray(System.Int32)">
      <summary>
    Gets the value of the EffectParameter as an array of !Framework.Matrix.
  </summary>
      <param name="count">The number of elements in the array.</param>
      <returns>
        The value of the EffectParameter as an array of !Framework.Matrix.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueMatrixTransposeArray(System.Int32)">
      <summary>
    Gets the value of the EffectParameter as an array of !Framework.Matrix transpose.
  </summary>
      <param name="count">The number of elements in the array.</param>
      <returns>
        The value of the EffectParameter as an array of !Framework.Matrix transpose.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueMatrixTranspose">
      <summary>
    Gets the value of the EffectParameter as a !Framework.Matrix transpose.
  </summary>
      <returns>
        The value of the EffectParameter as a !Framework.Matrix transpose.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueMatrix">
      <summary>
    Gets the value of the EffectParameter as a !Framework.Matrix.
  </summary>
      <returns>
        The value of the EffectParameter as a !Framework.Matrix.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValuePixelShader">
      <summary>
    Gets the value of the EffectParameter as a PixelShader.
  </summary>
      <returns>
        The value of the EffectParameter as a PixelShader.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueQuaternionArray(System.Int32)">
      <summary>
    Gets the value of the EffectParameter as an array of !Framework.Quaternion.
  </summary>
      <param name="count">The number of elements in the array.</param>
      <returns>
        The value of the EffectParameter as an array of !Framework.Quaternion.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueQuaternion">
      <summary>
    Gets the value of the EffectParameter as a !Framework.Quaternion.
  </summary>
      <returns>The value of the EffectParameter as a !Framework.Quaternion.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueSingleArray(System.Int32)">
      <summary>
    Gets the value of the EffectParameter as an array of System.Single.
  </summary>
      <param name="count">The number of elements in the array.</param>
      <returns>
        The value of the EffectParameter as an array of System.Single.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueSingle">
      <summary>
    Gets the value of the EffectParameter as a System.Single.
  </summary>
      <returns>
        The value of the EffectParameter as a System.Single.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueString">
      <summary>
    Gets the value of the EffectParameter as an System.String.
  </summary>
      <returns>The value of the EffectParameter as an System.String.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueTexture2D">
      <summary>
    Gets the value of the EffectParameter as a Texture2D.
  </summary>
      <returns>
        The value of the EffectParameter as a Texture2D.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueTexture3D">
      <summary>
    Gets the value of the EffectParameter as a Texture3D.
  </summary>
      <returns>
        The value of the EffectParameter as a Texture3D.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueTextureCube">
      <summary>
    Gets the value of the EffectParameter as a TextureCube.
  </summary>
      <returns>The value of the EffectParameter as a TextureCube.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector2Array(System.Int32)">
      <summary>
    Gets the value of the EffectParameter as an array of !Framework.Vector2.
  </summary>
      <param name="count">The number of elements in the array.</param>
      <returns>
        The value of the EffectParameter as an array of !Framework.Vector2.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector2">
      <summary>
    Gets the value of the EffectParameter as a !Framework.Vector2.
  </summary>
      <returns>The value of the EffectParameter as a !Framework.Vector2.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector3Array(System.Int32)">
      <summary>
    Gets the value of the EffectParameter as an array of !Framework.Vector3.
  </summary>
      <param name="count">The number of elements in the array.</param>
      <returns>
        The value of the EffectParameter as an array of !Framework.Vector3.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector3">
      <summary>
    Gets the value of the EffectParameter as a !Framework.Vector3.
  </summary>
      <returns>The value of the EffectParameter as a !Framework.Vector3.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector4Array(System.Int32)">
      <summary>
    Gets the value of the EffectParameter as an array of !Framework.Vector4.
  </summary>
      <param name="count">The number of elements in the array.</param>
      <returns>
        The value of the EffectParameter as an array of !Framework.Vector4.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVector4">
      <summary>
    Gets the value of the EffectParameter as a !Framework.Vector4.
  </summary>
      <returns>
        The value of the EffectParameter as a !Framework.Vector4.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.GetValueVertexShader">
      <summary>
    Gets the value of the EffectParameter as a VertexShader.
  </summary>
      <returns>
        The value of the EffectParameter as a VertexShader.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetArrayRange(System.Int32,System.Int32)">
      <summary>Sets the range of an array to pass to the device.</summary>
      <param name="start">The start index.</param>
      <param name="end">The stop index.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValueTranspose(Microsoft.Xna.Framework.Matrix)">
      <summary>
    Sets the value of the EffectParameter to the transpose of a !Framework.Matrix.
  </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValueTranspose(Microsoft.Xna.Framework.Matrix[])">
      <summary>
    Sets the value of the EffectParameter to the transpose of a !Framework.Matrix.
  </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Single)">
      <summary>Sets the value of the EffectParameter.</summary>
      <param name="value">The value to set the EffectParameter to.
     </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Boolean)">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Int32[])">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.String)">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector2)">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Boolean[])">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Quaternion[])">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector3[])">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Graphics.Texture)">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector4)">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Single[])">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Quaternion)">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector2[])">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(System.Int32)">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Matrix)">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Matrix[])">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector4[])">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameter.SetValue(Microsoft.Xna.Framework.Vector3)">
      <summary>
    Sets the value of the EffectParameter.
  </summary>
      <param name="value">
        The value to set the EffectParameter to.
      </param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.Annotations">
      <summary>Gets the collection of EffectAnnotation objects for this parameter.</summary>
      <returns>
        The collection of EffectAnnotation objects.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.ColumnCount">
      <summary>Gets the number of columns in the parameter description.</summary>
      <returns>The number of columns in the parameter description.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.ElementCount">
      <summary>Gets the number of elements in the parameter description.</summary>
      <returns>The number of elements in the parameter description.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.Name">
      <summary>Gets the name of the parameter.</summary>
      <returns>The name of the parameter.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.ParameterClass">
      <summary>Gets the class of the parameter.</summary>
      <returns>The parameter class.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.ParameterType">
      <summary>Gets the type of the parameter.</summary>
      <returns>The parameter type.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.RowCount">
      <summary>Gets the number of rows in the parameter description.</summary>
      <returns>The number of rows in the parameter description.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.Semantic">
      <summary>Gets the semantic meaning, or usage, of the parameter.</summary>
      <returns>The semantic meaning of the parameter.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameter.StructureMemberCount">
      <summary>Gets the number of structure members in the parameter description.</summary>
      <returns>The number of structure members in the parameter description.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameter">
      <summary>Represents an Effect parameter.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.#ctor(Microsoft.Xna.Framework.Graphics.Effect)">
      <summary>Initializes a new instance of the EffectParameterBlock class.</summary>
      <param name="parent">The Effect used to generate the EffectParameterBlock.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.Apply">
      <summary>Applies the parameter changes in the EffectParameterBlock to the current effect state.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.Begin">
      <summary>Begins capturing parameter state changes from the parent Effect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the EffectParameterBlock and optionally releases the managed resources.
  </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.End">
      <summary>Stops capturing state changes from the parent Effect.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterBlock.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterBlock">
      <summary>Represents an EffectParameter state block.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the EffectParameterCollection. </summary>
      <returns>The iterator.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.GetParameterBySemantic(System.String)">
      <summary>Gets the handle of a top-level parameter or a structure member parameter by looking up its semantic with a case-insensitive search.</summary>
      <param name="semantic">The name of the semantic to search for.</param>
      <returns>The first parameter that matches the semantic, or  if no matching parameter was found.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.Count">
      <summary>Gets the number of EffectParameter objects in this EffectParameterCollection.</summary>
      <returns>The number of EffectParameter objects in this EffectParameterCollection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.Item">
      <summary>Gets a specific EffectParameter by name.
</summary>
      <param name="name">The name of the EffectParameter to retrieve.</param>
      <returns>The EffectParameter object named name. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectParameterCollection.Item">
      <summary>Gets a specific EffectParameter object by using an index value.</summary>
      <param name="index">
        Index of the EffectParameter to get.</param>
      <returns>The EffectParameter object at index index. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterCollection">
      <summary>Manipulates a collection of EffectParameter objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPass.Begin">
      <summary>Begins a pass within the active technique.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPass.End">
      <summary>Ends a pass within the active technique.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPass.Annotations">
      <summary>Gets the set of EffectAnnotation objects for this EffectPass.</summary>
      <returns>The EffectAnnotationCollection containing EffectAnnotation objects for this EffectPass.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPass.Name">
      <summary>Gets the name of this pass.</summary>
      <returns>The name of this pass.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPass.PixelShader">
      <summary>Gets the PixelShader for this effect pass.</summary>
      <returns>The PixelShader for this effect pass.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPass.VertexShader">
      <summary>Gets the VertexShader for this effect pass.</summary>
      <returns>The VertexShader for this effect pass.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectPass">
      <summary>Represents an effect pass.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPassCollection.GetEnumerator">
      <summary>
        Returns an enumerator that can iterate through the collection.
      </summary>
      <returns>Enumerator that can iterate through the collection.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPassCollection.Count">
      <summary>Gets the number of objects in the collection.</summary>
      <returns>
        The number of objects in the collection.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPassCollection.Item">
      <summary>Gets a specific element in the collection by using a name.</summary>
      <param name="name">Name of the EffectPass to get.</param>
      <returns>
        The object named name.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPassCollection.Item">
      <summary>Gets a specific element in the collection by using an index value.</summary>
      <param name="index">
        Index of the EffectPass to get.
      </param>
      <returns>
        The object at index index.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectPassCollection">
      <summary>Manipulates a collection of EffectPass objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.EffectPool.Disposing">
      <summary>
        Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.op_Equality(Microsoft.Xna.Framework.Graphics.EffectPool,Microsoft.Xna.Framework.Graphics.EffectPool)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">The System.Object to compare with the current EffectPool.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.op_Inequality(Microsoft.Xna.Framework.Graphics.EffectPool,Microsoft.Xna.Framework.Graphics.EffectPool)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectPool.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectPool.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectPool">
      <summary>Allows applications to share resources between effects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectTechnique.IsParameterUsed(Microsoft.Xna.Framework.Graphics.EffectParameter)">
      <summary>Determines whether a given EffectParameter is used by this technique.</summary>
      <param name="parameter">The effect parameter to check.</param>
      <returns>true if the parameter is used by this technique; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectTechnique.Validate">
      <summary>Validates this technique.</summary>
      <returns>true if the technique is valid; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechnique.Annotations">
      <summary>Gets the EffectAnnotation objects associated with this technique.</summary>
      <returns>The EffectAnnotation objects associated with this technique.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechnique.Name">
      <summary>Gets the name of this technique.</summary>
      <returns>The name of this technique.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechnique.Passes">
      <summary>Gets the number of passes this rendering technique requires.</summary>
      <returns>The number of passes this rendering technique requires.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectTechnique">
      <summary>Represents an effect technique.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.GetEnumerator">
      <summary>
        Returns an enumerator that can iterate through the collection.
      </summary>
      <returns>Enumerator for the effect technique collection.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.GetValidTechniques">
      <summary>Returns all of the valid techniques in this collection.</summary>
      <returns>An enumeration of all the valid techniques in this collection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.Count">
      <summary>Gets the number of objects in the collection.</summary>
      <returns>The number of objects in the collection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.Item">
      <summary>Gets a specific element in the collection by using a name.</summary>
      <param name="name">Name of the EffectTechnique to get.</param>
      <returns>The object named name.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection.Item">
      <summary>Gets a specific element in the collection by using an index value.</summary>
      <param name="index">Index of the EffectTechnique to get.</param>
      <returns>
        The object at index index.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectTechniqueCollection">
      <summary>Manipulates a collection of EffectTechnique objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.op_Equality(Microsoft.Xna.Framework.Graphics.GammaRamp,Microsoft.Xna.Framework.Graphics.GammaRamp)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current GammaRamp.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.GetBlue">
      <summary>Retrieves the blue component of the gamma ramp.</summary>
      <returns>
        A 256-element integer array that represents the blue component.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.GetGreen">
      <summary>Retrieves the green component of the gamma ramp.</summary>
      <returns>A 256-element integer array that represents the green component.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.GetRed">
      <summary>Retrieves the red component of the gamma ramp.</summary>
      <returns>A 256-element integer array that represents the red component.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.op_Inequality(Microsoft.Xna.Framework.Graphics.GammaRamp,Microsoft.Xna.Framework.Graphics.GammaRamp)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.SetBlue(System.Int16[])">
      <summary>Sets the blue component of the gamma ramp.</summary>
      <param name="value">A 256-element integer array that represents the blue component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.SetGreen(System.Int16[])">
      <summary>Sets the green component of the gamma ramp.</summary>
      <param name="value">
        A 256-element integer array that represents the green component.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.SetRed(System.Int16[])">
      <summary>Sets the red component of the gamma ramp.</summary>
      <param name="value">A 256-element integer array that represents the red component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GammaRamp.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GammaRamp">
      <summary>Contains red, green, and blue ramp data.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDepthStencilMatch(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>Tests whether a depth stencil format is compatible with a render target format in a particular display mode.</summary>
      <param name="deviceType">The device type.</param>
      <param name="adapterFormat">The format of the display mode into which the adapter will be placed.</param>
      <param name="renderTargetFormat">The format of the render-target surface to be tested.</param>
      <param name="depthStencilFormat">The format of the depth stencil surface to be tested.</param>
      <returns>true if the format is compatible; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceFormatConversion(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Tests a device to determine whether it supports conversion from one display format to another.</summary>
      <param name="deviceType">Type of device to check.</param>
      <param name="sourceFormat">Source adapter format.</param>
      <param name="targetFormat">Target adapter format.</param>
      <returns>true if the method succeeds; false if it fails.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceFormat(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.ResourceUsage,Microsoft.Xna.Framework.Graphics.QueryUsage,Microsoft.Xna.Framework.Graphics.ResourceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Verifies whether a surface buffer format is available as a specified resource type and can be used as a texture, depth-stencil buffer, render target, or any combination of the three, on a device representing the current adapter.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="adapterFormat">The format of the display mode into which the adapter will be placed.</param>
      <param name="usage"> A set of options identifying how this surface resource is to be used.</param>
      <param name="queryUsage">The type of query to issue.</param>
      <param name="resourceType">A resource type requested for use with the queried format.</param>
      <param name="checkFormat">The surface format of the surfaces to use, as defined by usage.</param>
      <returns>true if the surface format is available as the specified resource and format type; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceFormat(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.ResourceUsage,Microsoft.Xna.Framework.Graphics.QueryUsage,Microsoft.Xna.Framework.Graphics.ResourceType,Microsoft.Xna.Framework.Graphics.DepthFormat)">
      <summary>Verifies whether a depth buffer format is available as a specified resource type and can be used as a texture, depth-stencil buffer, render target, or any combination of the three, on a device representing the current adapter.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="adapterFormat">The format of the display mode into which the adapter will be placed.</param>
      <param name="usage">A set of options identifying how this surface resource is to be used.</param>
      <param name="queryUsage">The type of query to issue.</param>
      <param name="resourceType">A resource type requested for use with the queried format.</param>
      <param name="checkFormat">The depth buffer format of the surfaces to use, as defined by usage.</param>
      <returns>true if the surface format is available as the specified resource and format type; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceMultiSampleType(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Boolean,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32)">
      <summary>Verifies whether a multisample technique is available on a specified device, optionally returning the number of quality stops available for the specified technique.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="surfaceFormat">The format of the surface to be multisampled.</param>
      <param name="isFullScreen">true to inquire about windowed multisampling; false to inquire about full-screen multisampling.
      </param>
      <param name="sampleType">The multisampling technique to test.</param>
      <param name="qualityLevels">Number of quality stops available for a given multisample type; can be null if it is not necessary to return the values.
      </param>
      <returns>true if the technique is available; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceMultiSampleType(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Boolean,Microsoft.Xna.Framework.Graphics.MultiSampleType)">
      <summary>Verifies whether a multisample technique is available on a specified device.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="surfaceFormat">The format of the surface to be multisampled.</param>
      <param name="isFullScreen">true to inquire about windowed multisampling; false to inquire about full-screen multisampling.
      </param>
      <param name="sampleType">The multisampling technique to test.</param>
      <returns>true if the technique is available; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CheckDeviceType(Microsoft.Xna.Framework.Graphics.DeviceType,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.SurfaceFormat,System.Boolean)">
      <summary>Determines whether a hardware-accelerated device type can be used on the current adapter.</summary>
      <param name="deviceType">The type of device to check.</param>
      <param name="displayFormat">The format of the adapter display mode for which the device type is being checked. For example, some devices operate only in modes of 16 bits per pixel.</param>
      <param name="backBufferFormat">Back-buffer format. For more information about formats, see SurfaceFormat. This value must be one of the render-target formats. GraphicsDevice.DisplayMode can be used to obtain the current format.For windowed applications, the back-buffer format does not need to match the display-mode format if the hardware supports color conversion. The set of possible back-buffer formats is constrained, but the runtime allows any valid back-buffer format to be presented to any desktop format. Additionally, the device must be operable in desktop mode because devices typically do not operate in modes of 8 bits per pixel.Full-screen applications cannot perform color conversion.SurfaceFormat is allowed for windowed mode.</param>
      <param name="isFullScreen">true if the device type will be used in windowed mode; false if the device type will be used in full-screen mode.
    </param>
      <returns>true if the method succeeds and the device can be used on this adapter; false if the method fails. If the method fails, you may check the result code returned by Manager.CheckDeviceTypeResult to determine the specific reason.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the GraphicsAdapter and optionally releases the managed resources.
  </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Dispose">
      <summary>
    Releases all resources used by the GraphicsAdapter class.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.op_Equality(System.Runtime.CompilerServices.IsByValue,System.Runtime.CompilerServices.IsByValue)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="l">The object to the left of the equality operator.</param>
      <param name="r">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Equals(System.Object)">
      <summary>
    Determines whether the specified System.Object is equal to the GraphicsAdapter.
  </summary>
      <param name="obj">
        The System.Object to compare with the current GraphicsAdapter.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.GetCapabilities(Microsoft.Xna.Framework.Graphics.DeviceType)">
      <summary>Returns the capabilities of a device.</summary>
      <param name="deviceType">The device to query.</param>
      <returns>The capabilities of the specified device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.op_Inequality(System.Runtime.CompilerServices.IsByValue,System.Runtime.CompilerServices.IsByValue)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="l">The object to the left of the inequality operator.</param>
      <param name="r">The object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsDeviceTypeAvailable(Microsoft.Xna.Framework.Graphics.DeviceType)">
      <summary>Determines whether a requested device type is available.</summary>
      <param name="deviceType">The device type to request.</param>
      <returns>true if the requested device type is available; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Adapters">
      <summary>Collection of available adapters on the system. </summary>
      <returns>The collection of adapters.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.CurrentDisplayMode">
      <summary>Gets the current display mode.</summary>
      <returns>The current display mode.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DefaultAdapter">
      <summary>Gets the default adapter. </summary>
      <returns>The default adapter.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Description">
      <summary>Retrieves a string used for presentation to the user.</summary>
      <returns>
        Description of the adapter.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DeviceIdentifier">
      <summary>Retrieves a globally unique identifier (GUID) object that can be used to check changes in the driver and chip set.</summary>
      <returns>A unique identifier for the driver and chip set pair.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DeviceId">
      <summary>
    Retrieves a value that is used to help identify a particular chip set.

  </summary>
      <returns>Value that helps identify the chip set.  The returned value may be zero if it is unknown.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DeviceName">
      <summary>Retrieves a string that contains the device name for a Microsoft Windows Graphics Device Interface (GDI).</summary>
      <returns>The name of the device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverDll">
      <summary>Retrieves a string that is used to present the driver name to the user.</summary>
      <returns>The driver name</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.DriverVersion">
      <summary>Retrieves a value that identifies the version of the Microsoft Direct3D driver.</summary>
      <returns>The driver version.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.IsDefaultAdapter">
      <summary>Determines if this instance of GraphicsAdapter is the default adapter.</summary>
      <returns>true if this instance of GraphicsAdapter is the default adapter, false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.MonitorHandle">
      <summary>Retrieves the handle of the monitor associated with the Microsoft Direct3D object.</summary>
      <returns>The handle of the monitor.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.Revision">
      <summary>Retrieves a value used to help identify the revision level of a particular chip set.</summary>
      <returns>Value used to help identify the revision level of the chip set.  This value may be zero if it is unknown.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.SubSystemId">
      <summary>Retrieves a value used to identify the subsystem.</summary>
      <returns>Value used to identify the subsystem, typically the particular board.  This value may be zero if it is unknown.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.SupportedDisplayModes">
      <summary>Returns a collection of supported display modes for the current adapter.</summary>
      <returns>
        The supported display modes for the adapter.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsAdapter.VendorId">
      <summary>Retrieves a value used to identify the manufacturer.</summary>
      <returns>
        Value used to identify the manufacturer.  This value may be zero if it is unknown.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsAdapter">
      <summary>Provides methods to retrieve and manipulate graphics adapters.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.DeviceType,System.IntPtr,Microsoft.Xna.Framework.Graphics.CreateOptions,Microsoft.Xna.Framework.Graphics.PresentationParameters[])">
      <summary>Initializes a new instance of GraphicsDevice</summary>
      <param name="adapter">The display adapter.</param>
      <param name="deviceType">The desired device type.</param>
      <param name="renderWindowHandle">The focus window.</param>
      <param name="creationOptions">Combination of one or more options that control device creation.</param>
      <param name="presentationParameters">The presentation parameters for the device to be created.
      </param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DeviceLost">
      <summary>Occurs when a GraphicsDevice is about to be lost (for example, immediately before a reset).</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DeviceResetting">
      <summary>Occurs when a GraphicsDevice is resetting, allowing the application to cancel the default handling of the reset.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DeviceReset">
      <summary>Occurs after a GraphicsDevice is reset, allowing an application to recreate all resources.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Disposing">
      <summary>
        Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.
      </summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ResourceCreated">
      <summary>Occurs when a resource is created. </summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ResourceDestroyed">
      <summary>Occurs when a resource is destroyed. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BeginScene">
      <summary>Begins a scene.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.BeginStateBlock">
      <summary>Begins recording a GraphicsDevice state block.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Graphics.Color,System.Single,System.Int32,Microsoft.Xna.Framework.Rectangle[])">
      <summary>Clears a set of regions to a specified color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="options">Flags that indicate which surfaces to clear.</param>
      <param name="color">Color value to which the render target surface is cleared.</param>
      <param name="depth">New depth value to store in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2nâˆ’1, where n is the bit depth of the stencil buffer.</param>
      <param name="regions">The regions to clear.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Vector4,System.Single,System.Int32,Microsoft.Xna.Framework.Rectangle[])">
      <summary>Clears a set of regions to a specified color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="options">The surfaces to clear.</param>
      <param name="color">Color value to which the render target surface is cleared.</param>
      <param name="depth">New z value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2nâˆ’1, where n is the bit depth of the stencil buffer.</param>
      <param name="regions">The regions to clear.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Clears the viewport to a specified color.</summary>
      <param name="color">Color value to which the render target surface is cleared.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Graphics.Color,System.Single,System.Int32)">
      <summary>Clears the viewport to a specified color, clears the depth buffer, and erases the stencil buffer. </summary>
      <param name="options">Flags indicating which surfaces to clear.</param>
      <param name="color">Color value to which the render target surface is cleared.</param>
      <param name="depth">New depth value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2nâˆ’1, where n is the bit depth of the stencil buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Graphics.ClearOptions,Microsoft.Xna.Framework.Vector4,System.Single,System.Int32)">
      <summary>Clears the viewport to a specified color, clears the depth buffer, and erases the stencil buffer. </summary>
      <param name="options">The surfaces to clear.</param>
      <param name="color">Color value to which the render target surface is cleared.</param>
      <param name="depth"> 
        New z value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.
      </param>
      <param name="stencil">
        Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2nâˆ’1, where n is the bit depth of the stencil buffer. 
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ColorFill(Microsoft.Xna.Framework.Graphics.Surface,System.Nullable.{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Fills a rectangular area of a surface with a specified color. </summary>
      <param name="surface">Surface to be filled.</param>
      <param name="rect">Source rectangle. To fill the entire surface, specify .
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.CopyFrontBuffer(System.Int32,Microsoft.Xna.Framework.Graphics.Surface)">
      <summary>Generates a copy of a GraphicsDevice's front buffer and places it in a system memory buffer provided by the application.</summary>
      <param name="swapChain">Specifies the swap chain.</param>
      <param name="buffer">Receives a copy of the front buffer's contents. The data is returned in successive rows with no intervening space, proceeding from the highest vertical row on the GraphicsDevice's output to the lowest.For windowed mode, the size of the destination surface should be the desktop size. For full screen mode, the size of the destination surface should be the screen size.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.CopyRenderTarget(Microsoft.Xna.Framework.Graphics.Surface,Microsoft.Xna.Framework.Graphics.Surface)">
      <summary>Copies the render target data from GraphicsDevice memory to system memory.</summary>
      <param name="renderTarget">The source render target.</param>
      <param name="destinationSurface">The destination surface.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.CreateDepthStencilSurface(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.DepthFormat,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32,System.Boolean)">
      <summary>Creates a depth stencil resource.</summary>
      <param name="width">Width of the depth stencil surface, in pixels.</param>
      <param name="height">Height of the depth stencil surface, in pixels.</param>
      <param name="format">One of the enumerated depth stencil formats for the current GraphicsDevice.</param>
      <param name="multiSample">Describes the multisampling buffer type. This value must be one of the supported multisample types. When this surface is passed to the GraphicsDevice.DepthStencilSurface property, its multisample type must be the same as that of the render target set by GraphicsDevice.SetRenderTarget.</param>
      <param name="multiSampleQuality">Quality level. The valid range is between 0 and one less than the level returned by the qualityLevels parameter of Manager.CheckGraphicsDeviceMultiSampleType Method (Int32, GraphicsDeviceType, Format, Boolean, MultiSampleType, Int32). Passing a larger value results in a InvalidCallException. </param>
      <param name="discard">true to enable z-buffer discarding; false otherwise.If this flag is set, the contents of the depth stencil buffer are invalid after GraphicsDevice.Present is called or when GraphicsDevice.DepthStencilSurface is set with a different depth surface.This flag's behavior is the same as passing the enumerated value PresentFlag.DiscardDepthStencil to GraphicsDevice.Present.</param>
      <returns>The depth stencil surface.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.CreateOffscreenPlainSurface(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.ResourcePool)">
      <summary>Create an off-screen surface.</summary>
      <param name="width">Width of the surface.</param>
      <param name="height">Height of the surface.</param>
      <param name="format">Format of the surface.</param>
      <param name="resourcePool">Memory class that holds the buffers for the surface.</param>
      <returns>The surface.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.CreateRenderTarget(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.MultiSampleType,System.Int32,System.Boolean)">
      <summary>Creates a render target surface.</summary>
      <param name="width">Width of the render-target surface, in pixels.</param>
      <param name="height">Height of the render-target surface, in pixels.</param>
      <param name="format">The format of the render target.</param>
      <param name="multiSample">The antialiasing type for the render target. When this surface is passed to GraphicsDevice.SetRenderTarget, the multisample type must be the same as that of the depth stencil property GraphicsDevice.DepthStencilSurface.</param>
      <param name="multiSampleQuality">Quality level. Valid range is between 0 and one less than the level returned by the qualityLevels parameter of GraphicsAdapter.CheckDeviceMultiSampleType. Passing a larger value causes an InvalidCallException. The 
      multiSampleQuality values of paired render targets, depth stencil surfaces, and the multisample type must all match.</param>
      <param name="isLockable">true if render targets are lockable; false otherwise. Note that lockable render targets reduce performance on some graphics hardware.
      </param>
      <returns>The Surface</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.raise_DeviceLost(System.Object,System.EventArgs)">
      <summary>Occurs when a GraphicsDevice is about to be lost (for example, immediately before a reset).</summary>
      <param name="value0">The source of this event.</param>
      <param name="value1">The event arguments that are associated with the action that raised the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.raise_DeviceResetting(System.Object,System.EventArgs)">
      <summary>Occurs when a GraphicsDevice is resetting</summary>
      <param name="value0">The source of this event.</param>
      <param name="value1">The event arguments that are associated with the action that raised the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.raise_DeviceReset(System.Object,System.EventArgs)">
      <summary>Occurs after a GraphicsDevice is reset, allowing an application to re-create all resources.</summary>
      <param name="value0">The source of this event.</param>
      <param name="value1">The event arguments that are associated with the action that raised the event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the GraphicsDevice.Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawIndexedPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Renders the specified geometric primitive, based on indexing into an array of vertices.</summary>
      <param name="primitiveType">Describes the type of primitive to render. PrimitiveType is not supported with this method.</param>
      <param name="baseVertex">Offset from the start of the index buffer to the first vertex index.</param>
      <param name="minVertexIndex">Minimum vertex index for vertices used during the call.  The minVertexIndex parameter and all of the indices in the index stream are relative to the baseVertex parameter.</param>
      <param name="numVertices">A number of vertices used during the call, starting from baseVertex to minVertexIndex.</param>
      <param name="startIndex">Location in the index array at which to start reading vertices.</param>
      <param name="primitiveCount">A number of primitives to render. The number of vertices used is a function of primitiveCount and primitiveType. To determine the maximum number of primitives allowed, check the MaxPrimitiveCount property member of the Capabilities structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawPrimitives(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32)">
      <summary>Renders a sequence of non-indexed geometric primitives of the specified type from the current set of data input streams.</summary>
      <param name="primitiveType">Describes the type of primitive to render.</param>
      <param name="startVertex">Index of the first vertex to load. Beginning at startVertex, the correct number of vertices is read out of the vertex buffer.</param>
      <param name="primitiveCount">Number of primitives to render. To determine the maximum number of primitives allowed, check GraphicsDeviceCapabilities.MaxPrimitiveCount. The primitiveCount is the number of primitives as determined by the primitive type. If it is a line list, each primitive has two vertices. If it is a triangle list, each primitive has three vertices.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int16[],`0[])">
      <summary>Renders the specified geometric primitive with data specified by the user, specifying 16-bit index buffer bit depth.</summary>
      <param name="primitiveType">Describes the type of primitive to render. </param>
      <param name="minVertexIndex">
        Minimum vertex index. This is a zero-based index.
      </param>
      <param name="numVertexIndices">
        Number of vertices used during this call. The first vertex is located at index minVertexIndex.
      </param>
      <param name="primitiveCount">
        Number of primitives to render. The maximum number of primitives allowed is determined by checking GraphicsDeviceCapabilities.MaxPrimitiveCount (the number of indices is a function of the primitive count and the primitive type).
      </param>
      <param name="indexData">16-bit index buffer bit depth.</param>
      <param name="vertexStreamZeroData">
        The index data.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserIndexedPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32[],`0[])">
      <summary>Renders the specified geometric primitive with data specified by the user, specifying 32-bit index buffer bit depth. </summary>
      <param name="primitiveType">Describes the type of primitive to render.</param>
      <param name="minVertexIndex">
        Minimum vertex index. This is a zero-based index.
      </param>
      <param name="numVertexIndices">Number of vertices used during this call. The first vertex is located at index minVertexIndex.
    </param>
      <param name="primitiveCount">
        Number of primitives to render. The maximum number of primitives allowed is determined by checking GraphicsDeviceCapabilities.MaxPrimitiveCount (the number of indices is a function of the primitive count and the primitive type).
      </param>
      <param name="indexData">32-bit index buffer bit depth.</param>
      <param name="vertexStreamZeroData">
        The index data.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DrawUserPrimitives``1(Microsoft.Xna.Framework.Graphics.PrimitiveType,System.Int32,`0[])">
      <summary>Renders the specified geometric primitive with data specified by the user.</summary>
      <param name="primitiveType">Describes the type of primitive to render. </param>
      <param name="primitiveCount">
        Number of primitives to render. The maximum number of primitives allowed is determined by checking GraphicsDeviceCapabilities.MaxPrimitiveCount.  The number of indices is a function of the primitive count and the primitive type.
      </param>
      <param name="vertexStreamZeroData">The vertex data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.EndScene">
      <summary>Ends a scene that was started by calling the GraphicsDevice.BeginScene method.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.EndStateBlock">
      <summary>Signals Microsoft Direct3D to stop recording a GraphicsDevice state block and retrieves the state block.</summary>
      <returns>The state block.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object to compare to this GraphicsDevice.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.EvictManagedResources">
      <summary>Evicts all managed resources, including Microsoft Direct3D resources and those that are driver managed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetBackBuffer(System.Int32,System.Int32)">
      <summary>Gets a back buffer surface from a GraphicsDevice's swap chain.</summary>
      <param name="swapChain">Specifies the swap chain.</param>
      <param name="backBuffer">Index of the back buffer.</param>
      <returns>The back buffer surface.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetDisplayMode(System.Int32)">
      <summary>Gets the current display mode.</summary>
      <param name="swapChain">The swap chain.</param>
      <returns>The current display mode.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetGammaRamp(System.Int32)">
      <summary>Gets the gamma correction ramp for a swap chain.</summary>
      <param name="swapChain">The swap chain.</param>
      <returns>The gamma correction ramp.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPaletteEntries(System.Int32)">
      <summary>Gets palette entries.</summary>
      <param name="paletteNumber">Ordinal value that identifies the palette to get.</param>
      <returns>The palette entries.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderBooleanConstant(System.Int32,System.Int32)">
      <summary>Gets an array of System.Boolean shader constants.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantCount">Number of System.Boolean values in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderInt32Constant(System.Int32,System.Int32)">
      <summary>Gets an integer shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantCount">Number of four-integer vectors in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPixelShaderSingleConstant(System.Int32,System.Int32)">
      <summary>Gets a floating-point shader constant.</summary>
      <param name="startRegister">Register number that contains the first constant value.</param>
      <param name="constantCount">Number of four-float vectors in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetPresentationParameters">
      <summary>Gets the presentation parameters.</summary>
      <returns>The presentation parameters.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetRasterStatus(System.Int32)">
      <summary>Gets information that describes the raster of the monitor on which the swap chain is presented.</summary>
      <param name="swapChain">The swap chain.</param>
      <returns>Information about the position or other status of the raster on the monitor driven by this adapter.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetRenderTarget(System.Int32)">
      <summary>Gets a render target surface.</summary>
      <param name="renderTargetIndex">Index of the render target.</param>
      <returns>The render target surface of the current GraphicsDevice.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetSwapChain(System.Int32)">
      <summary>Gets a swap chain.</summary>
      <param name="swapChain">Swap chain ordinal value. For more information, see GraphicsDeviceCapabilities.NumberOfAdaptersInGroup.</param>
      <returns>A copy of the swap chain.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderBooleanConstant(System.Int32,System.Int32)">
      <summary>Gets a System.Boolean vertex shader constant.</summary>
      <param name="startRegister">Register number if the first constant.</param>
      <param name="constantCount">Number of items in the array of constants.</param>
      <returns>The array of constants.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderInt32Constant(System.Int32,System.Int32)">
      <summary>Gets an integer vertex shader constant.</summary>
      <param name="startRegister">Register number of the first constant.</param>
      <param name="constantCount">Number of items in the array of constants.</param>
      <returns>An array of constants.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GetVertexShaderSingleConstant(System.Int32,System.Int32)">
      <summary>Gets a floating-point vertex shader constant.</summary>
      <param name="startRegister">Register number of the first constant.</param>
      <param name="constantCount">Number of items in the array of constants.</param>
      <returns>An array of constants.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present(System.IntPtr)">
      <summary>Specifies the window target for a presentation and presents the display with the contents of the next buffer in the sequence of back buffers owned by the GraphicsDevice.</summary>
      <param name="overrideWindowHandle">
        Destination window whose client area is taken as the target for this presentation.  The default is PresentationParameters.GraphicsDeviceWindow.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present(System.Nullable.{Microsoft.Xna.Framework.Rectangle},System.Nullable.{Microsoft.Xna.Framework.Rectangle},System.IntPtr)">
      <summary>
    Specifies the window target for a presentation and presents the display with the contents of the next buffer in the sequence of back buffers owned by the GraphicsDevice.
  </summary>
      <param name="sourceRectangle">The source rectangle. If null, the entire source surface is presented. If the rectangle exceeds the source surface, the rectangle is clipped to the source surface.  This parameter must be null unless the swap chain was created with SwapEffect.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Present">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the GraphicsDevice.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset(Microsoft.Xna.Framework.Graphics.PresentationParameters[])">
      <summary>Resets the current GraphicsDevice with the specified PresentationParameters.</summary>
      <param name="presentationParameters">Describes the new presentation parameters. This value cannot be null.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Reset">
      <summary>Resets the presentation parameters for the current GraphicsDevice.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.raise_ResourceCreated(System.Object,Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs)">
      <summary>
    Occurs when GraphicsDevice.ResourceCreated is called.
  </summary>
      <param name="value0">The source of the event.</param>
      <param name="value1">
        An EventArgs object that contains no data.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.raise_ResourceDestroyed(System.Object,Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs)">
      <summary>
    Occurs when GraphicsDevice.ResourceDestroyed is called.
  </summary>
      <param name="value0">The source of the event.</param>
      <param name="value1">
        An EventArgs object that contains no data.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetCursorPosition(System.Int32,System.Int32,System.Boolean)">
      <summary>Sets the cursor position and update options.</summary>
      <param name="x">New x-position of the cursor in virtual desktop coordinates.</param>
      <param name="y">New y-position of the cursor in virtual desktop coordinates.</param>
      <param name="updateImmediate">true if the system guarantees that the cursor is updated at a minimum of half of the display refresh rate, but never more frequently than the display refresh rate. false if the method delays cursor updates until the next GraphicsDevice.Present call.Setting this parameter to false usually results in better performance. However, applications should use true if the rate of calls to GraphicsDevice.Present is low enough that users would notice a significant delay in cursor motion. This flag has no effect in an application in windowed mode. Some video cards implement hardware color cursors; this flag does not affect these cards.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetCursorProperties(System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.Surface)">
      <summary>Sets cursor properties.</summary>
      <param name="hotspotX">X-coordinate offset (in pixels) that marks the center of the cursor. The offset is relative to the upper-left corner of the cursor. When the cursor is given a new position, the image is drawn at an offset from the new position. The offset is determined by subtracting the hot spot coordinates from the position.</param>
      <param name="hotspotY">Y-coordinate offset (in pixels) that marks the center of the cursor. The offset is relative to the upper-left corner of the cursor. When the cursor is given a new position, the image is drawn at an offset from the new position. The offset is determined by subtracting the hot spot coordinates from the position.</param>
      <param name="cursorBitmap">The contents of this surface are copied and potentially converted into an internal buffer from which the cursor is displayed.  This parameter must be an 8888 ARGB surface (format SurfaceFormat). The dimensions of this surface must be less than the dimensions of the display mode, and must be a power of two in each direction, although not necessarily the same power of two. The alpha channel must be either 0.0 or 1.0.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetGammaRamp(System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.GammaRamp)">
      <summary>Sets the gamma correction ramp for the implicit swap chain.</summary>
      <param name="swapChain">Unsigned integer that specifies the swap chain.</param>
      <param name="calibrate">true to indicate that correction should be applied. false to indicate that no gamma correction should be applied. The supplied gamma table is transferred directly to the GraphicsDevice.
      </param>
      <param name="ramp">The gamma correction ramp to set for the implicit swap chain.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPaletteEntries(System.Int32,Microsoft.Xna.Framework.Graphics.PaletteEntry[])">
      <summary>Sets palette entries.</summary>
      <param name="paletteNumber">Identifies the palette on which the operation is performed.</param>
      <param name="entries">The palette entries to set. The number of PaletteEntry structures passed into entries is assumed to be 256.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,System.Boolean[])">
      <summary>
    Sets a pixel shader constant using System.Boolean data.
  </summary>
      <param name="startRegister">Index of the register containing the first constant value.</param>
      <param name="constantData">Constant data. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Sets a pixel shader constant using !Framework.Matrix data.
  </summary>
      <param name="startRegister">Index of the register containing the first constant value.</param>
      <param name="constantData">Constant data. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,System.Single[])">
      <summary>
    Sets a pixel shader constant data using an array of type System.Single. 
  </summary>
      <param name="startRegister">Index of the register containing the first constant value.</param>
      <param name="constantData">Array of constant data. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Matrix[])">
      <summary>
    Sets a pixel shader constant using an array of !Framework.Matrix data.
  </summary>
      <param name="startRegister">Index of the register containing the first constant value.</param>
      <param name="constantData">Constant data. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,System.Int32[])">
      <summary>
    Sets a pixel shader constant using System.Int32 data.
  </summary>
      <param name="startRegister">Index of the register containing the first constant value.</param>
      <param name="constantData">Array of constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector4[])">
      <summary>
    Sets a pixel shader constant using !Framework.Vector4 data.
  </summary>
      <param name="startRegister">Index of the register containing the first constant value.</param>
      <param name="constantData">Constant data. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector4)">
      <summary>Sets a pixel shader constant using an array of !Framework.Vector4 data. </summary>
      <param name="startRegister">Index of the register containing the first constant value.</param>
      <param name="constantData">Constant data. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector4)">
      <summary>
    Sets a pixel shader constant using an array of type !Framework.Vector4.
  </summary>
      <param name="startRegister">Zero-based index of the register containing the first constant value.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetPixelShaderConstant(System.Int32,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Sets a pixel shader constant data using an array of type !Framework.Matrix.
  </summary>
      <param name="startRegister">Zero-based index of the register containing the first constant value. </param>
      <param name="constantData">Array of constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetRenderTarget(System.Int32,Microsoft.Xna.Framework.Graphics.Surface)">
      <summary>Sets a new color buffer for a GraphicsDevice.</summary>
      <param name="renderTargetIndex">Index of the render target.</param>
      <param name="renderTarget">New color buffer. If null, the color buffer for the corresponding renderTargetIndex is disabled. GraphicsDevices must always be associated with a color buffer. The new render-target surface must have at least ResourceUsage specified.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,System.Boolean[])">
      <summary>
    Sets a vertex shader constant using an array of System.Boolean data.
  </summary>
      <param name="startRegister">Number of the register containing the first constant value.</param>
      <param name="constantData">Array of constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Sets a vertex shader !Framework.Matrix constant.
  </summary>
      <param name="startRegister">Zero-based index of the register containing the first constant value.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,System.Single[])">
      <summary>
    Sets a vertex shader constant using an array of System.Single data.
  </summary>
      <param name="startRegister">Zero-based index of the register containing the first constant value. </param>
      <param name="constantData">The constant data. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Matrix[])">
      <summary>
    Sets an array of vertex shader !Framework.Matrix constants.
  </summary>
      <param name="startRegister">Zero-based index of the register containing the first constant value.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,System.Int32[])">
      <summary>
    Sets a vertex shader constant using an array of System.Int32 data.
  </summary>
      <param name="startRegister">Number of the register containing the first constant value.</param>
      <param name="constantData">An array of constant data. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector4[])">
      <summary>Sets an array of vertex shader !Framework.Vector4 constants. </summary>
      <param name="startRegister">Zero-based index of the register containing the first constant value.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector4)">
      <summary>
    Sets an array of vertex shader !Framework.Vector4 constants.
  </summary>
      <param name="startRegister">Zero-based index of the register containing the first constant value.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Vector4)">
      <summary>
    Sets a vertex shader !Framework.Vector4 constant.
  </summary>
      <param name="startRegister">Zero-based index of the register containing the first constant value.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SetVertexShaderConstant(System.Int32,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Sets an array of vertex shader !Framework.Matrix constants.
  </summary>
      <param name="startRegister">Zero-based index of the register containing the first constant value.</param>
      <param name="constantData">The constant data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ShowCursor(System.Boolean)">
      <summary>Displays or hides the cursor.</summary>
      <param name="canShow">true to show the cursor; false to hide the cursor.

      </param>
      <returns>true if the cursor was previously visible before this call was made; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.StretchRectangle(Microsoft.Xna.Framework.Graphics.Surface,System.Nullable.{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Surface,System.Nullable.{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.TextureFilter)">
      <summary>Copies the contents of a source rectangle to a destination rectangle.</summary>
      <param name="sourceSurface">The source surface.</param>
      <param name="sourceRectangle">The source rectangle. If null, the entire source surface is used.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.UpdateSurface(Microsoft.Xna.Framework.Graphics.Surface,System.Nullable.{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Surface,System.Nullable.{Microsoft.Xna.Framework.Vector2})">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface">The source surface; must point to a surface other than destinationSurface.</param>
      <param name="sourceRectangle">A rectangle on the source surface. Specifying null for this parameter causes the entire surface to be copied.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.UpdateTexture(Microsoft.Xna.Framework.Graphics.Texture,Microsoft.Xna.Framework.Graphics.Texture)">
      <summary>Updates the dirty portions of a texture.</summary>
      <param name="sourceTexture">The source texture.</param>
      <param name="destinationTexture">The destination texture.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ClipPlanes">
      <summary>Retrieves the clipping planes of the current GraphicsDevice.</summary>
      <returns>The clipping planes.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.CreationParameters">
      <summary>Retrieves the creation parameters of the GraphicsDevice.</summary>
      <returns>
        The creation parameters.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.CurrentTexturePalette">
      <summary>Gets or sets the current texture palette.</summary>
      <returns>The current texture palette.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DepthStencilSurface">
      <summary>Gets or sets the depth stencil surface of this GraphicsDevice.</summary>
      <returns>
          The depth stencil surface. If no depth stencil buffer is associated with the GraphicsDevice, the return value is null.
      
        Setting this value to null disables the depth stencil operation.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DialogBoxesEnabled">
      <summary>Gets a value indicating whether dialog boxes are enabled.</summary>
      <returns>true if dialog boxes are enabled; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DisplayMode">
      <summary>
    Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.
  </summary>
      <returns>
       Data describing the display mode of the adapter (as opposed to the display mode of the GraphicsDevice, which might not be active if the GraphicsDevice does not own full-screen mode).
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.DriverLevel">
      <summary>Returns the driver level.</summary>
      <returns>
        This method returns the driver version, which is one of the following:
        700 - Direct3D 7 level driver800 - Direct3D 8 level driver900 - Direct3D 9 level driver</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GraphicsDeviceCapabilities">
      <summary>Gets the capabilities of the graphics device.</summary>
      <returns>The capabilities.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.GraphicsDeviceStatus">
      <summary>Retrieves the status of the device</summary>
      <returns>The status of the device</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Indices">
      <summary>Gets or sets index data.</summary>
      <returns>The index data.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.PixelShader">
      <summary>Gets or sets the current pixel shader.</summary>
      <returns>
        The current pixel shader or a pixel shader object to set.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.RasterStatus">
      <summary>Retrieves information that describes the raster of the monitor on which the swap chain is presented.</summary>
      <returns>
        Information about the position or other status of the raster on the monitor driven by the current adapter.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.RenderState">
      <summary>Retrieves a render-state value for a GraphicsDevice.</summary>
      <returns>The render state.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SamplerStates">
      <summary>Retrieves a collection of SamplerState objects for the current GraphicsDevice.</summary>
      <returns>The sample states of this GraphicsDevice.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.ScissorRectangle">
      <summary>Gets or sets the scissor rectangle.</summary>
      <returns>Defines the rendering area within the render target, if scissor testing is enabled.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SoftwareVertexProcessing">
      <summary>Gets or sets the vertex processing mode.</summary>
      <returns>true for software vertex processing; false for hardware vertex processing.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.SwapChainCount">
      <summary>Gets the number of implicit swap chains.</summary>
      <returns>Number of implicit swap chains.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Textures">
      <summary>Returns the collection of textures.</summary>
      <returns>The texture collection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.VertexDeclaration">
      <summary>Gets or sets a vertex shader declaration.</summary>
      <returns>The vertex shader declaration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.VertexShader">
      <summary>Gets or sets the current vertex shader.</summary>
      <returns>
        The GraphicsDevice's current vertex shader or a vertex shader object to set.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Vertices">
      <summary>Gets the vertex stream collection.</summary>
      <returns>The vertex stream collection.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Viewport">
      <summary>Gets or sets viewport parameters.</summary>
      <returns>
        The returned viewport parameters or the viewport parameters to set.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice">
      <summary>Performs primitive-based rendering, creates resources, handles system-level variables, adjusts gamma ramp levels, gets and sets palettes, and creates shaders.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the GraphicsDeviceCapabilities and optionally releases the managed resources.
  </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.Dispose">
      <summary>
    Releases all resources used by the GraphicsDeviceCapabilities class.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.op_Equality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current GraphicsDeviceCapabilities.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.op_Inequality(Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities,Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AdapterOrdinalInGroup">
      <summary>
    Gets the number indicating the order in which heads are referenced by the API. 
  </summary>
      <returns>The number indicating the order in which heads are referenced by the API.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AlphaCompareCapabilities">
      <summary>Gets the alpha-test comparison capabilities.</summary>
      <returns>A GraphicsDeviceCapabilities.CompareCapabilities representing the alpha-test comparison capabilities of a device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CubeTextureFilterCapabilities">
      <summary>Gets texture-filtering capabilities for a cube texture.</summary>
      <returns>
        A GraphicsDeviceCapabilities.FilterCapabilities representing the texture-filtering capabilities for a cube texture of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCaps">
      <summary>Gets hardware cursor capabilties.</summary>
      <returns>
        A GraphicsDeviceCapabilities.CursorCapabilities representing the hardware cursor capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypes">
      <summary>Gets vertex data type capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.DeclarationTypeCapabilities representing the vertex data type capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DepthBufferCompareCapabilities">
      <summary>Gets depth buffer comparision capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.CompareCapabilities representing the z-buffer comparison capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DestinationBlendCapabilities">
      <summary>Gets destination-blending capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.BlendCapabilities representing the destination-blending capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCaps">
      <summary>Gets graphics device capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.DeviceCapabilitiesW representing the graphics capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceType">
      <summary>Returns the type of the current GraphicsDevice.</summary>
      <returns>
        The type of the current GraphicsDevice.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCaps">
      <summary>Gets device driver capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.DriverCapabilities representing the driver capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ExtentsAdjust">
      <summary>
    Gets the number of pixels to adjust the extents rectangle outward to accommodate antialiasing kernels.
  </summary>
      <returns>Size of adjustment, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GuardBandBottom">
      <summary>Gets the bottom screen-space coordinate of the guard-band clipping region. </summary>
      <returns>The bottom coordinate of the guard-band clipping region.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GuardBandLeft">
      <summary>Gets the left screen-space coordinate of the guard-band clipping region. </summary>
      <returns>The left coordinate of the guard-band clipping region.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GuardBandRight">
      <summary>Gets the right coordinate of the guard-band clipping region.</summary>
      <returns>The right coordinate of the guard-band clipping region.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.GuardBandTop">
      <summary>Gets the top screen-space coordinate of the guard-band clipping region.</summary>
      <returns>The top coordinate of the guard-band clipping region.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCaps">
      <summary>Gets line-drawing primitives capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.LineCapabilities representing the line-drawing primitives capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MasterAdapterOrdinal">
      <summary>Gets the master device for this subordinate.</summary>
      <returns>Number indicating the master device.  This number is taken from the same space as the adapter values.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxActiveLights">
      <summary>Gets the maximum number of lights that can be active simultaneously.</summary>
      <returns>The maximum number of lights that can be active simultaneously.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxAnisotropy">
      <summary>
    Gets the maximum valid value for the SamplerState.MaxAnisotropy texture-stage state.
  </summary>
      <returns>
        The maximum valid value for SamplerState.MaxAnisotropy.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaximumPixelShaderProfile">
      <summary>Returns the maximum pixel shader profile for this GraphicsDevice.
  </summary>
      <returns>
        The maximum pixel shader profile for this GraphicsDevice.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaximumVertexShaderProfile">
      <summary>
    Returns the maximum vertex shader profile for this GraphicsDevice.
  </summary>
      <returns>
        The maximum vertex shader profile for this GraphicsDevice.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxPixelShader30InstructionSlots">
      <summary>Gets the maximum number of pixel shader instruction slots supported.</summary>
      <returns>The maximum number of pixel shader instruction slots supported.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxPointSize">
      <summary>Gets the maximum size of a point primitive.</summary>
      <returns>
        The maximum size of a point primitive. The range is greater than or equal to 1.0f.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxPrimitiveCount">
      <summary>Gets the maximum number of primitives for each GraphicsDevice.DrawPrimitives call. </summary>
      <returns>The maximum number of primitives. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxSimultaneousTextures">
      <summary>Gets the maximum number of textures that can be simultaneously bound to the fixed-function pipeline sampler stages.</summary>
      <returns>The maximum number of textures that can be simultaneously bound to the fixed-function pipeline sampler stages.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxStreamStride">
      <summary>Gets the maximum stride.</summary>
      <returns>
        The maximum stride.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxStreams">
      <summary>Gets the maximum number of concurrent data streams.
</summary>
      <returns>The maximum number of concurrent data streams. The valid range is 1 to 16.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureAspectRatio">
      <summary>Gets the maximum texture aspect ratio supported by the hardware. </summary>
      <returns>The maximum texture aspect ratio supported by the hardware, typically a power of 2.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureBlendStages">
      <summary>Gets the maximum number of texture-blending stages supported in the fixed function pipeline.</summary>
      <returns>The maximum number of texture-blending stages supported in the fixed-function pipeline.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureHeight">
      <summary>Gets the maximum texture height for this device. </summary>
      <returns>The maximum texture height for this device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureRepeat">
      <summary>Gets the maximum range of the integer bits of the post-normalized texture coordinates. </summary>
      <returns>The maximum range of the integer bits of the post-normalized texture coordinates.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxTextureWidth">
      <summary>Gets the maximum texture width for this device. </summary>
      <returns>The maximum texture width for this device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxUserClipPlanes">
      <summary>Gets the maximum number of user-defined clipping planes supported.</summary>
      <returns>The maximum number of user-defined clipping planes supported. This number can be 0.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexIndex">
      <summary>Gets the maximum size of indices supported for hardware vertex processing.</summary>
      <returns>The maximum size of indices supported for hardware vertex processing.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexShader30InstructionSlots">
      <summary>Gets the maximum number of vertex shader instruction slots supported.</summary>
      <returns>The maximum number of vertex shader instruction slots supported.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexShaderConst">
      <summary>Gets the number of vertex shader registers that are reserved for constants.</summary>
      <returns>The number of vertex shader registers that are reserved for constants.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVertexW">
      <summary>Gets the maximum W-based depth value that the device supports. </summary>
      <returns>The maximum W-based depth value that the device supports.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.MaxVolumeExtent">
      <summary>Gets the maximum value for any of the three dimensions (width, height, and depth) of a volume texture. </summary>
      <returns>The maximum value for any of the three dimensions (width, height, and depth) of a volume texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.NumberOfAdaptersInGroup">
      <summary>Gets the number of adapters in this adapter group (only if master).</summary>
      <returns>The number of adapters in this adapter group (only if master).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.NumberSimultaneousRenderTargets">
      <summary>
    Gets the number of simultaneous render targets.</summary>
      <returns>The number of simultaneous render targets. This number must be at least one.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader1xMaxValue">
      <summary>Gets the maximum value of pixel shader arithmetic component.</summary>
      <returns>The maximum value of pixel shader arithmetic component.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderCapabilities">
      <summary>Gets the pixel shader 2.0 capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.PixelShader20Capabilities representing the pixel shader 2.0 capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShaderVersion">
      <summary>Gets the pixel shader main and sub versions. </summary>
      <returns>The pixel shader main and sub versions.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PresentInterval">
      <summary>Gets the presentation swap interval.</summary>
      <returns>
        A PresentInterval representing the presentation swap interval of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveMiscCapabilities">
      <summary>Gets miscellaneous driver primitive capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.PrimitiveCapabilities representing the miscellaneous driver primitive capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCaps">
      <summary>Gets information on raster-drawing capabilities. </summary>
      <returns>
        A GraphicsDeviceCapabilities.RasterCapabilities representing the raster capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadeCapabilities">
      <summary>Gets shading operations capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.ShadingCapabilities representing the shading capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.SourceBlendCapabilities">
      <summary>Gets source-blending capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.BlendCapabilities representing the source-blending capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCaps">
      <summary>Gets the supported stencil-buffer operations.</summary>
      <returns>
        A GraphicsDeviceCapabilities.StencilCapabilities representing the stencil-buffer capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StretchRectangleFilterCapabilities">
      <summary>Gets the operations supported by GraphicsDevice.StretchRectangle.</summary>
      <returns>
        A GraphicsDeviceCapabilities.FilterCapabilities representing the stretch rectangle capabilities of a device. Only GraphicsDeviceCapabilities.FilterCapabilities.SupportsMinifyPoint, GraphicsDeviceCapabilities.FilterCapabilities.SupportsMagnifyPoint, GraphicsDeviceCapabilities.FilterCapabilities.SupportsMinifyLinear, and GraphicsDeviceCapabilities.FilterCapabilities.SupportsMagnifyLinear are supported.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureAddressCapabilities">
      <summary>Gets texture-addressing capabilities for texture objects. </summary>
      <returns>
        A GraphicsDeviceCapabilities.AddressCapabilities representing the texture-addressing capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCaps">
      <summary>Gets miscellaneous texture-mapping capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.TextureCapabilities representing the texture-mapping capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureFilterCapabilities">
      <summary>Gets texture-filtering capabilities for a texture.</summary>
      <returns>
        A GraphicsDeviceCapabilities.FilterCapabilities representing the texture-filtering capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCaps">
      <summary>Gets flexible vertex format capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.VertexFormatCapabilities representing the flexible vertex format capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCaps">
      <summary>Gets vertex processing capabilities.</summary>
      <returns>A GraphicsDeviceCapabilities.VertexProcessingCapabilities representing the vertex processing capabilities of a device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderCapabilities">
      <summary>Gets vertex shader version 2.0 extended capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.VertexShader20Capabilities representing the vertex shader 2.0 capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShaderVersion">
      <summary>Gets the vertex shader main and sub versions.</summary>
      <returns>The vertex shader main and sub versions.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexTextureFilterCapabilities">
      <summary>Gets vertex shader texture filter capabilities.</summary>
      <returns>
        A GraphicsDeviceCapabilities.FilterCapabilities representing the vertex shader filter capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VolumeTextureAddressCapabilities">
      <summary>Gets texture-addressing capabilities for a volume texture</summary>
      <returns>
        A GraphicsDeviceCapabilities.AddressCapabilities representing the texture-addressing capabilities of a device.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VolumeTextureFilterCapabilities">
      <summary>Gets texture-filtering capabilities for a volume texture.</summary>
      <returns>
        A GraphicsDeviceCapabilities.FilterCapabilities representing the texture-filtering capabilities of a device.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities">
      <summary>Represents the capabilities of the hardware.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCapabilities.SupportsBorder">
      <summary>Gets a value indicating whether the device supports the setting of coordinates outside the range [0.0, 1.0] to the border color.</summary>
      <returns>true if the device supports the setting of coordinates outside the range to the border color; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCapabilities.SupportsClamp">
      <summary>Gets a value indicating whether the device supports the clamping of textures to addresses. </summary>
      <returns>true if the device supports clamping textures to addresses; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCapabilities.SupportsIndependentUV">
      <summary>
    Gets a value indicating whether the device can separate the texture-addressing modes of the texture's u and v coordinates.
  </summary>
      <returns>true if the device supports separating the texture-addressing modes of the u and v coordinates; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCapabilities.SupportsMirrorOnce">
      <summary>
    Gets a value indicating whether a device can take the absolute value of the texture coordinate (thus, mirroring around 0) and then clamp to the maximum value.
  </summary>
      <returns>true if the device can mirror once; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCapabilities.SupportsMirror">
      <summary>Gets a value indicating whether a device can mirror textures to addresses. </summary>
      <returns>true if the device supports mirroring textures to addresses; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCapabilities.SupportsWrap">
      <summary>Gets a value indicating whether a device can wrap textures to addresses. </summary>
      <returns>true if the device can wrap textures to addresses; false otherwise. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.AddressCapabilities">
      <summary>Represents the texture addressing capabilities for Texture structures. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsBlendFactor">
      <summary>
    Gets a value indicating that the driver supports the BlendFactor blend mode.
  </summary>
      <returns>true if the driver supports the BlendFactor blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsBothInverseSourceAlpha">
      <summary>
    Gets a value indicating that the driver supports the BothInvSourceAlpha blend mode.
  </summary>
      <returns>true if the driver supports the BothInvSourceAlpha blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsBothSourceAlpha">
      <summary>
    Gets a value indicating that the driver supports the BothSourceAlpha blend mode.
  </summary>
      <returns>true if the driver supports the BothSourceAlpha blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsDestinationAlpha">
      <summary>
    Gets a value indicating that the driver supports the DestinationAlpha blend mode. 
  </summary>
      <returns>true if the driver supports the DestinationAlpha blend mode; false otherwise. 
        </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsDestinationColor">
      <summary>
    Gets a value indicating that the driver supports the DestinationColor blend mode.
  </summary>
      <returns>true if the driver supports the DestinationColor blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsInverseDestinationAlpha">
      <summary>
    Gets a value indicating that the driver supports the InvDestinationAlpha blend mode.
  </summary>
      <returns>true if the driver supports the InvDestinationAlpha blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsInverseDestinationColor">
      <summary>
    Gets a value indicating that the driver supports the InvDestinationColor blend mode.
  </summary>
      <returns>true if the driver supports the InvDestinationColor blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsInverseSourceAlpha">
      <summary>
    Gets a value indicating that the driver supports the InvSourceAlpha blend mode.
  </summary>
      <returns>true if the driver supports the InvSourceAlpha blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsInverseSourceColor">
      <summary>
    Gets a value indicating that the driver supports the InvSourceColor blend mode.
  </summary>
      <returns>true if the driver supports the InvSourceColor blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsOne">
      <summary>
    Gets a value indicating that the driver supports the One blend mode.
  </summary>
      <returns>true if the driver supports the One blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsSourceAlphaSat">
      <summary>
    Gets a value indicating that the driver supports the SourceAlphaSat blend mode.
  </summary>
      <returns>true if the driver supports the SourceAlphaSat blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsSourceAlpha">
      <summary>
    Gets a value indicating that the driver supports the SourceAlpha blend mode.
  </summary>
      <returns>true if the driver supports the SourceAlpha blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsSourceColor">
      <summary>
    Gets a value indicating that the driver supports the SourceColor blend mode.
  </summary>
      <returns>true if the driver supports the SourceColor blend mode; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities.SupportsZero">
      <summary>
    Gets a value indicating that the driver supports the Zero blend mode.
  </summary>
      <returns>true if the driver supports the Zero blend mode; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.BlendCapabilities">
      <summary>Represents the supported blend capabilities. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCapabilities.SupportsAlways">
      <summary>Gets a value indicating whether always passing the comparison test is supported.</summary>
      <returns>true if always passing the comparison test is supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCapabilities.SupportsEqual">
      <summary>Gets a value indicating whether comparison tests in which the new value equals the current value are supported.</summary>
      <returns>true if comparison tests in which the new value equals the current value are supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCapabilities.SupportsGreaterEqual">
      <summary>Gets a value indicating whether comparison tests in which the new value is greater than or equal to the current value are supported.</summary>
      <returns>true if comparison tests in which the new value is greater than or equal to the current value are supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCapabilities.SupportsGreater">
      <summary>Gets a value indicating whether comparison tests in which the new value is greater than the current value are supported.</summary>
      <returns>true if comparison tests in which the new value is greater than the current value are supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCapabilities.SupportsLessEqual">
      <summary>Gets a value indicating whether comparison tests in which the new value is less than or equal to the current value are supported.</summary>
      <returns>true if comparison tests in which the new value is less than or equal to the current value are supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCapabilities.SupportsLess">
      <summary>Gets a value indicating whether comparison tests in which the new value is less than the current value are supported.</summary>
      <returns>true if comparison tests in which the new value is less than the current value are supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCapabilities.SupportsNever">
      <summary>Gets a value indicating whether never passing the comparison test is supported.</summary>
      <returns>true if never passing the comparison test is supported; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCapabilities.SupportsNotEqual">
      <summary>Gets a value indicating whether comparison tests in which the new value does not equal the current value are supported.</summary>
      <returns>true if comparison tests in which the new value does not equal the current value are supported; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CompareCapabilities">
      <summary>Represents comparison capabilities. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCapabilities.SupportsColor">
      <summary>Gets a value indicating whether a full-color cursor is supported in hardware in high-resolution modes.</summary>
      <returns>true if the hardware supports a full-color cursor in high resolution; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCapabilities.SupportsLowResolution">
      <summary>Gets a value indicating whether a full-color cursor is supported in hardware in low-resolution modes.</summary>
      <returns>true if the hardware supports a full-color cursor in low resolution; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.CursorCapabilities">
      <summary>Represents hardware support for cursors. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities.SupportsByte4">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities.SupportsHalfVector2">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat</summary>
      <returns>
        true if vertex declarations support VertexElementFormat; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities.SupportsHalfVector4">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities.SupportsNormalized101010">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.
</summary>
      <returns>
      true if vertex declarations support VertexElementFormat; otherwise false.
        </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities.SupportsNormalizedShort2">
      <summary>
    Gets a value indicating whether vertex declarations support  VertexElementFormat.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities.SupportsNormalizedShort4">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities.SupportsRg32">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities.SupportsRgba32">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities.SupportsRgba64">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.
</summary>
      <returns>
      true if vertex declarations support VertexElementFormat; otherwise false.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities.SupportsUInt101010">
      <summary>
    Gets a value indicating whether vertex declarations support VertexElementFormat.
  </summary>
      <returns>
        true if vertex declarations support VertexElementFormat; otherwise false.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeclarationTypeCapabilities">
      <summary>Represents data types contained in a vertex declaration.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.CanDrawSystemToNonLocal">
      <summary>
    Gets a value indicating whether the device supports blits from system-memory textures to non-local video-memory textures.
  </summary>
      <returns>true if the device supports blits from system-memory textures to non-local video-memory textures; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.CanRenderAfterFlip">
      <summary>
    Gets a value indicating whether the device can queue rendering commands after a page flip.
  </summary>
      <returns>true if the device can queue rendering commands after a page flip; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.CanStretchRectangleFromTextures">
      <summary>
    Gets a value indicating whether the device supports GraphicsDevice.StretchRectangle using a texture as the source.
  </summary>
      <returns>true if the device supports GraphicsDevice.StretchRectangle using a texture as the source; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsDrawPrimitives2Ex">
      <summary>
    Gets a value indicating whether the device can support at least a DirectX 7â€“compliant driver.
  </summary>
      <returns>true if the device can support at least a DirectX 7â€“compliant driver; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsDrawPrimitives2">
      <summary>
    Gets a value indicating whether the device can support at least a DirectX 5â€“compliant driver.
  </summary>
      <returns>true if the device can support at least a DirectX 5â€“compliant driver; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsDrawPrimitivesTransformedVertex">
      <summary>Gets a value indicating whether the device exports a GraphicsDevice.DrawPrimitives-aware hardware abstraction layer (HAL).</summary>
      <returns>true if the device exports an GraphicsDevice.DrawPrimitives-aware HAL; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsExecuteSystemMemory">
      <summary>Gets a value indicating whether the device can use execute buffers from video memory.</summary>
      <returns>true if the device can use execute buffers from video memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsExecuteVideoMemory">
      <summary>Gets a value indicating whether the device can use execute buffers from video memory.</summary>
      <returns>true if the device can use execute buffers from video memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsHardwareRasterization">
      <summary>Gets a value indicating whether the device has hardware acceleration for scene rasterization.</summary>
      <returns>true if the device has hardware acceleration for scene rasterization; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsHardwareTransformAndLight">
      <summary>Gets a value indicating whether the device can support transformation and lighting in hardware.</summary>
      <returns>true if the device can support transformation and lighting in hardware; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsSeparateTextureMemories">
      <summary>Gets a value indicating whether the device is texturing from separate memory pools.</summary>
      <returns>true if the device is texturing from separate memory pools; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsStreamOffset">
      <summary>Gets a value indicating whether the device supports stream offsets.</summary>
      <returns>true if the device supports stream offsets; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsTextureNonLocalVideoMemory">
      <summary>Gets a value indicating whether the device can retrieve textures from non-local video memory.</summary>
      <returns>true if the device can retrieve textures from non-local video memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsTextureSystemMemory">
      <summary>Gets a value indicating whether the device can retrieve textures from system memory.</summary>
      <returns>true if the device can retrieve textures from system memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsTextureVideoMemory">
      <summary>Gets a value indicating whether the device can retrieve textures from device memory.</summary>
      <returns>true if the device can retrieve textures from device memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsTransformedVertexSystemMemory">
      <summary>Gets a value indicating whether the device can use buffers from system memory for transformed and lit vertices.</summary>
      <returns>true if the device can use buffers from system memory for transformed and lit vertices; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.SupportsTransformedVertexVideoMemory">
      <summary>Gets a value indicating whether the device can use buffers from video memory for transformed and lit vertices.</summary>
      <returns>true if the device can use buffers from video memory for transformed and lit vertices; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW.VertexElementScanSharesStreamOffset">
      <summary>Gets a value indicating whether the device allows multiple vertex elements to share the same offset in a stream.</summary>
      <returns>true if the device allows multiple vertex elements to share the same offset in a stream; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DeviceCapabilitiesW">
      <summary>Represents device-specific capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities.CanAutoGenerateMipMap">
      <summary>Gets a value indicating whether the driver is capable of automatically generating mipmaps.</summary>
      <returns>true if the driver is capable of automatically generating mipmaps; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities.CanCalibrateGamma">
      <summary>Gets a value indicating whether the system has a calibrator installed that can automatically adjust the gamma ramp.</summary>
      <returns>true if the system has a calibrator installed that can automatically adjust the gamma ramp; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities.CanManageResource">
      <summary>Gets a value indicating whether the driver is capable of managing resources.</summary>
      <returns>true if the driver is capable of managing resources; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities.ReadScanLine">
      <summary>Gets a value indicating whether the display hardware is capable of returning the current scan line.</summary>
      <returns>true if the driver display hardware is capable of returning the current scan line; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities.SupportsAlphaFullScreenFlipOrDiscard">
      <summary>Gets a value indicating whether the device can respect the RenderState.AlphaBlendEnable render state in full-screen mode while using the FLIP or DISCARD swap effect.</summary>
      <returns>true if the driver the device can respect the RenderState.AlphaBlendEnable render state in full-screen mode while using the FLIP or DISCARD swap effect; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities.SupportsCopyToSystemMemory">
      <summary>Gets a value indicating whether the device can accelerate a memory copy from local video memory to system memory.</summary>
      <returns>true if the device can accelerate a memory copy from local video memory to system memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities.SupportsCopyToVideoMemory">
      <summary>Gets a value indicating whether the device can accelerate a memory copy from system memory to local video memory.</summary>
      <returns>true if the device can accelerate a memory copy from system memory to local video memory; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities.SupportsDynamicTextures">
      <summary>Gets a value indicating whether the driver supports dynamic textures.</summary>
      <returns>true if the driver supports dynamic textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities.SupportsFullScreenGamma">
      <summary>Gets a value indicating whether the driver supports dynamic gamma ramp adjustment in full-screen mode.</summary>
      <returns>true if the driver supports dynamic gamma ramp adjustment in full-screen mode; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities.SupportsLinearToSrgbPresentation">
      <summary>Gets a value indicating whether the device can perform gamma correction from a windowed back buffer (containing linear content) to an sRGB desktop.</summary>
      <returns>true if the device can perform gamma correction from a windowed back buffer to an sRGB desktop; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.DriverCapabilities">
      <summary>Represents driver-specific capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.SupportsMagnifyAnisotropic">
      <summary>Gets a value that indicates that the device supports per-stage anisotropic filtering for magnifying textures.</summary>
      <returns>true if the device supports per-stage anisotropic filtering for magnifying textures; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.SupportsMagnifyGaussianQuad">
      <summary>Gets a value indicating whether the device supports per-stage Gaussian quad filtering for magnifying textures.</summary>
      <returns>true if the device supports per-stage Gaussian quad filtering for magnifying textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.SupportsMagnifyLinear">
      <summary>Gets a value that indicates that the device supports per-stage bilinear interpolation filtering for magnifying textures. </summary>
      <returns>true if the device supports per-stage bilinear interpolation filtering for magnifying textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.SupportsMagnifyPoint">
      <summary>Gets a value that indicates that the device supports per-stage point-sample filtering for magnifying textures.</summary>
      <returns>true if the device supports per-stage point-sample filtering for magnifying textures; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.SupportsMagnifyPyramidalQuad">
      <summary>Gets a value that indicates that the device supports per-stage pyramidal sample filtering for magnifying textures.</summary>
      <returns>true if the device supports per-stage pyramidal sample filtering for magnifying textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.SupportsMinifyAnisotropic">
      <summary>Gets a value that indicates that the device supports per-stage anisotropic filtering for minifying textures. </summary>
      <returns>true if the device supports per-stage anisotropic filtering for minifying textures; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.SupportsMinifyGaussianQuad">
      <summary>Gets a value indicating whether the device supports per-stage Gaussian quad filtering for minifying textures.</summary>
      <returns>true if the device supports per-stage Gaussian quad filtering for magnifying textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.SupportsMinifyLinear">
      <summary>Gets a value that indicates that the device supports per-stage bilinear interpolation filtering for minifying textures. </summary>
      <returns>true if the device supports per-stage bilinear interpolation filtering for minifying textures; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.SupportsMinifyPoint">
      <summary>Gets a value that indicates whether the device supports per-stage point-sample filtering for minifying textures.</summary>
      <returns>true if the device supports per-stage point-sample filtering for minifying textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.SupportsMinifyPyramidalQuad">
      <summary>Gets a value that indicates that the device supports per-stage pyramidal sample filtering for minifying textures.</summary>
      <returns>true if the device supports per-stage pyramidal sample filtering for minifying textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.SupportsMipMapLinear">
      <summary>Gets a value that indicates that the device supports per-stage trilinear interpolation filtering for mipmaps.</summary>
      <returns>true if the device supports per-stage trilinear interpolation filtering for mipmaps; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities.SupportsMipMapPoint">
      <summary>Gets a value that indicates that the device supports per-stage point-sample filtering for mipmaps. </summary>
      <returns>true if the device supports per-stage point-sample filtering for mipmaps; false otherwise. </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.FilterCapabilities">
      <summary>Represents texture filter capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCapabilities.SupportsAlphaCompare">
      <summary>Gets a value indicating whether the device supports alpha-test comparisons.</summary>
      <returns>true if the device supports alpha-test comparisons; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCapabilities.SupportsAntiAlias">
      <summary>Gets a value indicating whether the device supports antialiased lines.</summary>
      <returns>true if the device supports antialiased lines; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCapabilities.SupportsBlend">
      <summary>Gets a value indicating whether the device supports source blending.</summary>
      <returns>true if the device supports source blending; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCapabilities.SupportsDepthBufferTest">
      <summary>Gets a value indicating whether the device supports depth buffer comparisons.</summary>
      <returns>true if the device supports depth buffer comparisons; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCapabilities.SupportsFog">
      <summary>Gets a value indicating whether the device supports fog.</summary>
      <returns>true if the device supports fog; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCapabilities.SupportsTextureMapping">
      <summary>Gets a value indicating whether the device supports texture mapping.</summary>
      <returns>true if the device supports texture mapping; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.LineCapabilities">
      <summary>Represents the capabilities for line-drawing primitives.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.MaxDynamicFlowControlDepth">
      <summary>Specifies the maximum level of nesting of dynamic flow control instructions (break - vs, break_comp - vs, breakp - vs, if_comp - vs, if_comp - vs, if pred - vs).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.MaxNumberInstructionSlots">
      <summary>Specifies the maximum number of instruction slots supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.MaxNumberTemps">
      <summary>Specifies the maximum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.MaxStaticFlowControlDepth">
      <summary>Specifies the depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.MinDynamicFlowControlDepth">
      <summary>Specifies the minimum level of nesting of dynamic flow control instructions (break - vs, break_comp - vs, breakp - vs, if_comp - vs, if_comp - vs, if pred - vs).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.MinNumberInstructionSlots">
      <summary>Specifies the minimum number of instruction slots supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.MinNumberTemps">
      <summary>Specifies the minimum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.MinStaticFlowControlDepth">
      <summary>Specifies the minimum depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.DynamicFlowControlDepth">
      <summary>Gets a value specifying the dynamic flow control depth.</summary>
      <returns>The dynamic flow control depth.  Must be 0 or 24.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.NumberInstructionSlots">
      <summary>Gets a value specifying the number of instruction slots supported.</summary>
      <returns>The number of instruction slots supported.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.NumberTemps">
      <summary>Gets a value specifying the number of temporary registers supported.</summary>
      <returns>The number of temporary registers supported.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.StaticFlowControlDepth">
      <summary>Gets a value specifying the depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
      <returns>The static flow control depth.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.SupportsArbitrarySwizzle">
      <summary>Gets a value indicating whether arbitrary swizzling is supported.</summary>
      <returns>true if arbitrary swizzling is supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.SupportsGradientInstructions">
      <summary>Gets a value indicating whether gradient instructions are supported.</summary>
      <returns>true if gradient instructions are supported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.SupportsNoDependentReadLimit">
      <summary>Gets a value indicating whether there is a limit on the number of dependent reads per instruction.</summary>
      <returns>true if there is no dependent read limit; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.SupportsNoTextureInstructionLimit">
      <summary>Gets a value indicating whether there is a limit on the number of texture instructions.</summary>
      <returns>true if there is no limit on the number of texture instructions; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities.SupportsPredication">
      <summary>Gets a value indicating whether instruction predication is supported.</summary>
      <returns>true if instruction predication is supported; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PixelShader20Capabilities">
      <summary>Represents pixel shader capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.HasFogVertexClamped">
      <summary>Gets a value indicating whether the device clamps fog blend factor per vertex.</summary>
      <returns>true if the device clamps fog blend factor per vertex; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.IsNullReference">
      <summary>Gets a value indicating whether the device is a null reference device that does not render.</summary>
      <returns>true if the device is a null reference device; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsBlendOperation">
      <summary>Gets a value indicating whether the device supports blending operations other than BlendFunction.</summary>
      <returns>true if the driver supports other blend operations; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsClipPlaneScaledPoints">
      <summary>Gets a value indicating whether the device correctly clips scaled points of size greater than 1.0 to user-defined clipping planes.</summary>
      <returns>true if the device correctly clips scaled points; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsClipTransformedVertices">
      <summary>Gets a value indicating whether the device clips post-transformed vertex primitives. </summary>
      <returns>true if the device clips post-transformed vertex primitives; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsColorWrite">
      <summary>Gets a value indicating whether the device supports per-channel writes for the render-target color buffer through the RenderState.ColorWriteEnable state.</summary>
      <returns>true if the device supports per-channel writes; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsCullClockwiseFace">
      <summary>Gets a value indicating whether the driver supports clockwise triangle culling through the RenderState.CullMode state.</summary>
      <returns>true if the driver supports clockwise triangle culling; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsCullCounterClockwiseFace">
      <summary>
    Gets a value indicating whether the driver supports counterclockwise triangle culling through the RenderState.CullMode state.
  </summary>
      <returns>true if the driver supports counterclockwise triangle culling; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsCullNone">
      <summary>Gets a value indicating whether the driver does not perform triangle culling.</summary>
      <returns>true if the driver does not perform triangle culling; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsFogAndSpecularAlpha">
      <summary>Gets a value indicating whether the driver supports separate fog and specular alpha. </summary>
      <returns>true if the driver supports separate fog and specular alpha; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsIndependentWriteMasks">
      <summary>Gets a value indicating whether the device supports independent write masks for multiple element textures or multiple render targets.</summary>
      <returns>true if the device supports independent write masks; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsMaskZ">
      <summary>Gets a value indicating whether the device can enable and disable modification of the depth buffer on pixel operations.</summary>
      <returns>true if the device can enable and disable modification of the depth buffer; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsMultipleRenderTargetsIndependentBitDepths">
      <summary>Gets a value indicating whether the device supports different bit depths for multiple render targets.</summary>
      <returns>true if the device supports different bit depths for multiple render targets; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsMultipleRenderTargetsPostPixelShaderBlending">
      <summary>Gets a value indicating whether the device supports post-pixel shader operations for multiple render targets.</summary>
      <returns>true if the device supports post-pixel shader operations for multiple render targets; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsPerStageConstant">
      <summary>Gets a value indicating whether the device supports per-stage constants.</summary>
      <returns>true if the device supports per-stage constants; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsSeparateAlphaBlend">
      <summary>Gets a value indicating whether the device supports separate blend settings for the alpha channel.</summary>
      <returns>true if the device supports separate blend settings for the alpha channel; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsTextureStageStateArgumentTemp">
      <summary>Gets a value indicating whether the device supports TextureArgument values for the temporary register.</summary>
      <returns>true if the device supports TextureArgument values for the temporary register; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.PrimitiveCapabilities">
      <summary>Represents driver primitive capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsAnisotropy">
      <summary>Gets a value indicating whether the device supports anisotropic filtering.</summary>
      <returns>true if the device supports anisotropic filtering; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsColorPerspective">
      <summary>
    Gets a value indicating whether the device iterates colors perspective correctly.
  </summary>
      <returns>true if the device iterates colors perspective correctly; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsDepthBias">
      <summary>Gets a value indicating whether the device supports legacy depth bias.</summary>
      <returns>true if the device supports legacy depth bias; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsDepthBufferLessHsr">
      <summary>Gets a value indicating whether the device can perform hidden-surface removal (HSR) without requiring the application to sort polygons and without requiring the allocation of a depth buffer.</summary>
      <returns>true if the device can perform hidden-surface removal (HSR) without requiring the application to sort polygons and without requiring the allocation of a depth buffer; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsDepthBufferTest">
      <summary>Gets a value indicating whether the device can perform depth-test operations.</summary>
      <returns>true if the device can perform depth-test operations; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsDepthFog">
      <summary>Gets a value indicating whether the device supports depth-based fog.</summary>
      <returns>true if the device supports depth-based fog; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsFogRange">
      <summary>Gets a value indicating whether the device supports range-based fog.</summary>
      <returns>true if the device supports range-based fog; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsFogTable">
      <summary>Gets a value indicating whether the device calculates the fog value by referring to a lookup table containing fog values that are indexed to the depth of a given pixel.</summary>
      <returns>true if the device calculates the fog value by referring to a lookup table; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsFogVertex">
      <summary>
    Gets a value indicating whether the device calculates the fog value during the lighting operation and interpolates the fog value during rasterization.
  </summary>
      <returns>true if the device calculates the fog value during the lighting operation and interpolates the fog value during rasterization; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsMipMapLevelOfDetailBias">
      <summary>Gets a value indicating whether the device supports level-of-detail bias adjustments.</summary>
      <returns>true if the device supports level-of-detail bias adjustments; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsMultisampleToggle">
      <summary>Gets a value indicating whether the device supports toggling multisampling on and off between GraphicsDevice.BeginScene and GraphicsDevice.EndScene.</summary>
      <returns>true if the device supports toggling multisampling on and off between GraphicsDevice.BeginScene and GraphicsDevice.EndScene; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsScissorTest">
      <summary>Gets a value indicating whether the device supports scissor test.</summary>
      <returns>true if the device supports scissor test; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsSlopeScaleDepthBias">
      <summary>Gets a value indicating whether the device performs true slope-scale based depth bias.</summary>
      <returns>true if the device performs true slope-scale based depth bias; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities.SupportsWFog">
      <summary>Gets a value indicating whether the device supports w-based fog. </summary>
      <returns>true if the device supports w-based fog; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.RasterCapabilities">
      <summary>Represents raster-drawing capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCapabilities.SupportsAlphaGouraudBlend">
      <summary>Gets a value indicating whether the device can support an alpha component for Gouraud-blended transparency.</summary>
      <returns>true if can support an alpha component for Gouraud-blended transparency; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCapabilities.SupportsColorGouraudRgb">
      <summary>Gets a value indicating whether the device can support colored Gouraud shading.</summary>
      <returns>true if the device can support colored Gouraud shading; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCapabilities.SupportsFogGouraud">
      <summary>Gets a value indicating whether the device can support fog in the Gouraud shading mode.</summary>
      <returns>true if the device can support fog in the Gouraud shading mode; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCapabilities.SupportsSpecularGouraudRgb">
      <summary>Gets a value indicating whether the device supports Gouraud shading of specular highlights.</summary>
      <returns>true if the device supports Gouraud shading of specular highlights; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.ShadingCapabilities">
      <summary>Represents shading operations capabilities</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities.SupportsDecrementSaturation">
      <summary>Gets a value indicating whether the device supports decrementing the stencil-buffer entry, clamping to zero.</summary>
      <returns>true if the device supports the stencil-buffer entry, clamping to zero; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities.SupportsDecrement">
      <summary>Gets a value indicating whether the device supports decrementing the stencil-buffer entry, wrapping to the maximum value if the new value is less than zero.</summary>
      <returns>true if the device supports decrementing the stencil-buffer entry; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities.SupportsIncrementSaturation">
      <summary>Gets a value indicating whether the device supports incrementing the stencil-buffer entry, clamping to the maximum value. </summary>
      <returns>true if the device supports incrementing the stencil-buffer entry, clamping to the maximum value; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities.SupportsIncrement">
      <summary>Gets a value indicating whether the device supports incrementing the stencil-buffer entry, wrapping to zero if the new value exceeds the maximum value. </summary>
      <returns>true if the device supports incrementing the stencil-buffer entry, wrapping to zero if the new value exceeds the maximum value; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities.SupportsInvert">
      <summary>Gets a value indicating whether the device supports inverting the bits in the stencil-buffer entry.</summary>
      <returns>true if the device supports inverting the bits in the stencil-buffer entry; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities.SupportsKeep">
      <summary>Gets a value indicating whether the device does not update the entry in the stencil buffer.</summary>
      <returns>true if the device does not update the entry in the stencil buffer; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities.SupportsReplace">
      <summary>Gets a value indicating whether the device supports replacing the stencil-buffer entry with a reference value.</summary>
      <returns>true if the device supports replacing the stencil-buffer entry with a reference value; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities.SupportsTwoSided">
      <summary>Gets a value indicating whether the device supports two-sided stencil.</summary>
      <returns>true if the device supports two-sided stencil; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities.SupportsZero">
      <summary>Gets a value indicating whether the device supports setting the stencil-buffer entry to 0.</summary>
      <returns>true if the device supports setting the stencil-buffer entry to 0; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.StencilCapabilities">
      <summary>Represents driver stencil capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsAlphaPalette">
      <summary>Gets a value indicating whether the device supports drawing alpha from texture palettes.</summary>
      <returns>true if the device supports drawing alpha from texture palettes; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsAlpha">
      <summary>Gets a value indicating whether the device supports alpha in texture pixels.</summary>
      <returns>true if the device supports alpha in texture pixels; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsCubeMapPower2">
      <summary>
    Gets a value indicating whether the device requires that cube texture maps have dimensions specified as powers of two.
  </summary>
      <returns>true if the device requires that cube texture maps have dimensions specified as powers of two; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsCubeMap">
      <summary>Gets a value indicating whether the device supports cube textures</summary>
      <returns>true if the device supports cube textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsMipCubeMap">
      <summary>Gets a value indicating whether the device supports mipmapped cube textures.</summary>
      <returns>true if the device supports mipmapped cube textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsMipMap">
      <summary>Gets a value indicating whether the device supports mipmapped textures.</summary>
      <returns>true if the device supports mipmapped textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsMipVolumeMap">
      <summary>Gets a value indicating whether the device supports mipmapped volume textures.</summary>
      <returns>true if the device supports mipmapped volume textures; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsNonPower2Conditional">
      <summary>Gets a value indicating whether the device supports the use of 2D textures with dimensions that are not powers of two, under certain conditions.</summary>
      <returns>true if the device supports the use of 2D textures with dimensions that are not powers of two, under certain conditions; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsNoProjectedBumpEnvironment">
      <summary>
    Gets a value indicating whether the device does not support a projected bump-environment lookup operation in programmable and fixed-function shaders.
  </summary>
      <returns>true if the device does not support a projected bump-environment lookup operation in programmable and fixed-function shaders; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsPerspective">
      <summary>Gets a value indicating whether the device supports perspective correction texturing </summary>
      <returns>true if the device supports perspective correction texturing; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsPower2">
      <summary>Gets a value indicating whether the device only supports textures that are powers of two.</summary>
      <returns>true if the device only supports textures that are powers of two; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsProjected">
      <summary>Gets a value indicating whether the device supports per pixel projective divide.</summary>
      <returns>true if the device supports supports per pixel projective divide; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsSquareOnly">
      <summary>Gets a value indicating whether the device requires all textures to be square.</summary>
      <returns>true if the device requires all textures to be square; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsTextureRepeatNotScaledBySize">
      <summary>Gets a value indicating whether the device does not scale texture indices by the texture size prior to interpolation.</summary>
      <returns>true if the device does not scale texture indices by the texture size prior to interpolation; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsVolumeMapPower2">
      <summary>
    Gets a value indicating whether the device requires that volume texture maps have dimensions specified as powers of two.
  </summary>
      <returns>true if the device requires that volume texture maps have dimensions specified as powers of two; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities.SupportsVolumeMap">
      <summary>Gets a value indicating whether the device supports volume textures.</summary>
      <returns>true if the device supports volume textures; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.TextureCapabilities">
      <summary>Represents miscellaneous texture-mapping capabilities</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCapabilities.SupportsDoNotStripElements">
      <summary>Gets a value indicating whether vertex elements should not be stripped.</summary>
      <returns>true if vertex elements should not be stripped; otherwise false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCapabilities.SupportsPointSize">
      <summary>Gets a value indicating whether point size comes from point size data in the vertex declaration.</summary>
      <returns>true if point size comes from point size data in the vertex declaration; otherwise false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCapabilities.SupportsTextureCoordinateCountMask">
      <summary>Gets a value indicating whether the texture coordinate count mask is supported.</summary>
      <returns>true if the texture coordinate count mask is supported; otherwise false.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexFormatCapabilities">
      <summary>Represents flexible vertex format capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCapabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCapabilities.SupportsLocalViewer">
      <summary>Gets a value indicating whether the device can do local viewer.</summary>
      <returns>true if the device can do local viewer; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCapabilities.SupportsNoTextureGenerationNonLocalViewer">
      <summary>Gets a value indicating whether the device supports texture generation in non-local viewer mode.</summary>
      <returns>true if the device does not support texture generation in non-local viewer mode; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCapabilities.SupportsTextureGenerationSphereMap">
      <summary>
    Gets a value indicating whether the device supports use of the specified texture coordinates for sphere mapping.
  </summary>
      <returns>true if the device supports use of the specified texture coordinates for sphere mapping; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCapabilities.SupportsTextureGeneration">
      <summary>Gets a value indicating whether the device can do texture generation.</summary>
      <returns>true if the device can do texture generation; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexProcessingCapabilities">
      <summary>Represents vertex processing capabilities.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShader20Capabilities.MaxDynamicFlowControlDepth">
      <summary>Specifies the maximum level of nesting of dynamic flow control instructions (break - vs, break_comp - vs, breakp - vs, if_comp - vs, if_comp - vs, if pred - vs).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShader20Capabilities.MaxNumberTemps">
      <summary>Specifies the maximum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShader20Capabilities.MaxStaticFlowControlDepth">
      <summary>Specifies the maximum depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShader20Capabilities.MinDynamicFlowControlDepth">
      <summary>Specifies the minimum level of nesting of dynamic flow control instructions (break - vs, break_comp - vs, breakp - vs, if_comp - vs, if_comp - vs, if pred - vs).</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShader20Capabilities.MinNumberTemps">
      <summary>Specifies the minimum number of temporary registers supported.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShader20Capabilities.MinStaticFlowControlDepth">
      <summary>Specifies the minimum depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShader20Capabilities.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShader20Capabilities.DynamicFlowControlDepth">
      <summary>Gets a value specifying the depth of the dynamic flow control instruction nesting.</summary>
      <returns>The depth of the dynamic flow control instruction nesting; either 0 or 24.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShader20Capabilities.NumberTemps">
      <summary>Gets a value specifying the number of temporary registers supported.</summary>
      <returns>The number of temporary registers supported.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShader20Capabilities.StaticFlowControlDepth">
      <summary>Gets a value specifying the depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</summary>
      <returns>The depth of nesting of the loop - vs/rep - vs and call - vs/callnz bool - vs instructions.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShader20Capabilities.SupportsPredication">
      <summary>Gets a value indicating whether instruction predication is supported.</summary>
      <returns>true if instruction predication is supported; false otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCapabilities.VertexShader20Capabilities">
      <summary>Represents vertex shader version 2_0 extended capabilities.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsAdapter,Microsoft.Xna.Framework.Graphics.DeviceType,System.IntPtr,Microsoft.Xna.Framework.Graphics.CreateOptions)">
      <summary>
    Initializes a new instance of the GraphicsDeviceCreationParameters class.
  </summary>
      <param name="graphicsAdapter">The display adapter.</param>
      <param name="deviceType">The emulated functionality for this device. </param>
      <param name="windowHandle">Window handle to which focus belongs for this Direct3D device.</param>
      <param name="createOptions">Constants controlling the global behavior of the device.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.Adapter">
      <summary>Gets the graphics adapter.</summary>
      <returns>The graphics adapter.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.CreationOptions">
      <summary>Returns the options used to create the device.</summary>
      <returns>The options used to create the device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.DeviceType">
      <summary>Gets a information describing the amount of emulated functionality for the device.</summary>
      <returns>The amount of emulated functionality for the device.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters.FocusWindowHandle">
      <summary>Gets a pointer to the window to which focus belongs for the current device.</summary>
      <returns>Value that points to the window to which focus belongs for the device.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceCreationParameters">
      <summary>
    Describes the creation parameters for a device.
  </summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceCreated">
      <summary>The event that occurs when a graphics device is created.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceDisposing">
      <summary>The event that occurs when a graphics device is disposing.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceResetting">
      <summary>The event that occurs when a graphics device is in the process of resetting.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.DeviceReset">
      <summary>The event that occurs when a graphics device is reset.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService.GraphicsDevice">
      <summary>Retrieves a graphcs device.</summary>
      <returns>A graphics device.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService">
      <summary>
    Defines a mechanism for retrieving GraphicsDevice objects.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,Microsoft.Xna.Framework.Graphics.ResourceUsage,Microsoft.Xna.Framework.Graphics.ResourcePool,Microsoft.Xna.Framework.Graphics.IndexElementSize)">
      <summary>Initializes a new instance of the IndexBuffer class. </summary>
      <param name="graphicsDevice">The GraphicsDevice object to associate with the index buffer. </param>
      <param name="sizeInBytes">The size of the index buffer, in bytes.</param>
      <param name="usage">The usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more ResourceUsage flags. It is good practice to match the usage parameter with the behavior flags in the GraphicsDevice constructor. </param>
      <param name="resourcePool">A member of the ResourcePool enumerated type that describes a valid memory class into which to place the resource. </param>
      <param name="elementSize">A member of the IndexElementSize enumerated type that describes the size of the indices.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.ResourceUsage,Microsoft.Xna.Framework.Graphics.ResourcePool)">
      <summary>Initializes a new instance of the IndexBuffer class. </summary>
      <param name="graphicsDevice">The GraphicsDevice object to associate with the index buffer. </param>
      <param name="indexType">The type to use for index values.</param>
      <param name="elementCount">The number of values in the buffer.</param>
      <param name="usage">The usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more ResourceUsage flags. It is good practice to match the usage parameter with the behavior flags in the GraphicsDevice constructor. </param>
      <param name="resourcePool">A member of the ResourcePool enumerated type that describes a valid memory class into which to place the resource. </param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.IndexBuffer.Disposing">
      <summary>
        Occurs when IndexBuffer.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the IndexBuffer.Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.op_Equality(Microsoft.Xna.Framework.Graphics.IndexBuffer,Microsoft.Xna.Framework.Graphics.IndexBuffer)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.Equals(System.Object)">
      <summary>Gets a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">The System.Object to compare with the current IndexBuffer. </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.GetData``1(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copies the index buffer into an array.</summary>
      <param name="offsetInBytes">The number of bytes into the index buffer where copying will start.</param>
      <param name="data">The array to receive index buffer data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.GetData``1(`0[])">
      <summary>Copies the index buffer into an array.</summary>
      <param name="data">The array to receive index buffer data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.GetData``1(`0[],System.Int32,System.Int32)">
      <summary>Copies the index buffer into an array.</summary>
      <param name="data">The array to receive index buffer data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.op_Inequality(Microsoft.Xna.Framework.Graphics.IndexBuffer,Microsoft.Xna.Framework.Graphics.IndexBuffer)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SetData``1(System.Int32,`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the index buffer.</summary>
      <param name="offsetInBytes">The number of bytes into the index buffer where copying will start.</param>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">One or more SetDataOptions indicating the type of copy to perform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SetData``1(`0[])">
      <summary>Copies array data to the index buffer.</summary>
      <param name="data">The array of data to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.SetData``1(`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the index buffer.</summary>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">One or more SetDataOptions indicating the type of copy to perform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.IndexBuffer.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.IndexElementSize">
      <summary>Gets or sets a value indicating the size of this index element.</summary>
      <returns>The size of this index element.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.Name">
      <summary>Gets and sets the name of this index buffer.</summary>
      <returns>The name of this index buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.ResourcePool">
      <summary>
    Gets the class of memory allocated for this IndexBuffer.</summary>
      <returns>
        The class of memory allocated for the current IndexBuffer. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.ResourceType">
      <summary>Gets the type of this resource. </summary>
      <returns>The resource type, identifying this resource as an index buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.ResourceUsage">
      <summary>Gets a set of options identifying the behaviors of this resource.</summary>
      <returns>A set of options identifying the behaviors of this resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.SizeInBytes">
      <summary>Gets the size, in bytes, of this IndexBuffer.</summary>
      <returns>The size, in bytes, of this IndexBuffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.IndexBuffer.Tag">
      <summary>Gets and sets the object tag for this index buffer.</summary>
      <returns>The object tag for this index buffer.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IndexBuffer">
      <summary>Describes the rendering order of the vertices in a vertex buffer.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.InvalidCallException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.InvalidCallException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.InvalidCallException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.InvalidCallException">
      <summary>The exception that is thrown when a method call is not valid. For example, a method's parameter may not be a valid pointer. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.InvalidDeviceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.InvalidDeviceException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.InvalidDeviceException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.InvalidDeviceException">
      <summary>The exception that is thrown when the requested device type is not valid. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.InvalidParameterTypeException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.InvalidParameterTypeException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.InvalidParameterTypeException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.InvalidParameterTypeException">
      <summary>The exception that is thrown when the type of a parameter is invalid.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.MoreDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.MoreDataException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.MoreDataException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.MoreDataException">
      <summary>The exception that is thrown when there is more data available than the specified buffer size can hold. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NoMoreDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NoMoreDataException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NoMoreDataException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.NoMoreDataException">
      <summary>The exception that is thrown when a pointer offset extends beyond the end of the buffer.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NoMoreObjectsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NoMoreObjectsException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NoMoreObjectsException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.NoMoreObjectsException">
      <summary>The exception that is thrown when no more child objects are available. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NotAvailableException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NotAvailableException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NotAvailableException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.NotAvailableException">
      <summary>The exception that is thrown when a device does not support the queried technique.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NotDoneYetException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NotDoneYetException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NotDoneYetException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.NotDoneYetException">
      <summary>The exception that is thrown when an operation has not completed. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.NotFoundException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.NotFoundException">
      <summary>The exception that is thrown when the requested item was not found.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ObjectNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ObjectNotFoundException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ObjectNotFoundException">
      <summary>The exception that is thrown when an object could not be found from the specified parameters.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.OutOfVideoMemoryException">
      <summary>The exception that is thrown when Direct3D does not have enough display memory to perform the operation. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PaletteEntry.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of the PaletteEntry class.</summary>
      <param name="r">Red intensity value for the palette entry.</param>
      <param name="g">Green intensity value for the palette entry.</param>
      <param name="b">Blue intensity value for the palette entry.</param>
      <param name="f">Alpha intensity value for the palette entry.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PaletteEntry.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PaletteEntry.Blue">
      <summary>Gets or sets the blue intensity value for the palette entry.</summary>
      <returns>The blue intensity for the palette entry.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PaletteEntry.Flags">
      <summary>Gets or sets the alpha intensity value for the palette entry.</summary>
      <returns>The alpha intensity for the palette entry.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PaletteEntry.Green">
      <summary>Gets or sets the green intensity value for the palette entry.</summary>
      <returns>
        The green intensity for the palette entry.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PaletteEntry.Red">
      <summary>Gets or sets the red intensity value for the palette entry.</summary>
      <returns>
        The red intensity for the palette entry.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PaletteEntry">
      <summary>
    Specifies the color and usage of an entry in a logical palette.
</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ParseErrorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ParseErrorException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ParseErrorException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ParseErrorException">
      <summary>The exception that is thrown when a data stream could not be parsed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32[])">
      <summary>Initializes a new instance of the PixelShader class.</summary>
      <param name="graphicsDevice">Device to create the pixel shader.</param>
      <param name="functionToken">Pixel shader function token array, specifying the blending operations. </param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.PixelShader.Disposing">
      <summary>
        Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.op_Equality(Microsoft.Xna.Framework.Graphics.PixelShader,Microsoft.Xna.Framework.Graphics.PixelShader)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current PixelShader.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.GetFunction">
      <summary>Gets an array of integers containing the shader data.</summary>
      <returns>The shader data.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.op_Inequality(Microsoft.Xna.Framework.Graphics.PixelShader,Microsoft.Xna.Framework.Graphics.PixelShader)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PixelShader.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PixelShader.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with this PixelShader. </summary>
      <returns>The GraphicsDevice associated with this PixelShader.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PixelShader.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PixelShader.Name">
      <summary>Returns the name of the pixel shader.</summary>
      <returns>The name of the pixel shader.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PixelShader.Tag">
      <summary>Gets the resource tags.</summary>
      <returns>The resource tags</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PixelShader">
      <summary>Encapsulates the functionality of a pixel shader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.PresentationParameters.DefaultPresentRate">
      <summary>The default presentation rate.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Clear">
      <summary>Resets all of the PresentationParameters values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Clone">
      <summary>Creates a copy of this PresentationParameters object.</summary>
      <returns>
        A copy of this PresentationParameters object.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.op_Equality(Microsoft.Xna.Framework.Graphics.PresentationParameters,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">The System.Object to compare with the current PresentationParameters.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.op_Inequality(Microsoft.Xna.Framework.Graphics.PresentationParameters,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PresentationParameters.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.AutoDepthStencilFormat">
      <summary>Gets or sets a value specifying the format of the automatic depth-stencil surface that the device will create. </summary>
      <returns>The format of the automatic depth-stencil surface that the device will create.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferCount">
      <summary>Gets or sets a value specifying how many back buffers to create.</summary>
      <returns>The number of back buffers to create.  Can be 0, 1, 2, or 3.  0 is considered 1.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferFormat">
      <summary>Gets or sets the format of the back buffer.</summary>
      <returns>The format of the back buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferHeight">
      <summary>Gets or sets a value indicating the height of the new swap chain's back buffer.</summary>
      <returns>The height of the back buffer, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.BackBufferWidth">
      <summary>Gets or sets a value indicating the width of the new swap chain's back buffer.</summary>
      <returns>The width of the back buffer, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.DeviceWindowHandle">
      <summary>Gets or sets the handle to the device window. </summary>
      <returns>The handle to the device window.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.EnableAutoDepthStencil">
      <summary>Gets or sets a value indicating whether Direct3D will manage depth buffers for the application.</summary>
      <returns>true if Direct3D will manage depth buffers for the application; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.FullScreenRefreshRateInHz">
      <summary>Gets or sets a value indicating the rate at which the display adapter will refresh the screen.</summary>
      <returns>The refresh rate in hertz, or 0 in windowed mode.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.IsFullScreen">
      <summary>Gets or sets a value indicating whether the application is in full screen mode.</summary>
      <returns>true if the application is running full screen; false if the application is running in a window.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.MultiSampleQuality">
      <summary>Gets or sets a value indicating the multisample quality level.</summary>
      <returns>The multisample quality level. The valid range is from 0 to one less than the value returned by GraphicsAdapter.CheckDeviceMultiSampleType.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.MultiSampleType">
      <summary>Gets or sets the multisample type.</summary>
      <returns>The multisample type. Must be MultiSampleType unless PresentationParameters.SwapEffect has been set to SwapEffect. Multisampling is supported only if PresentationParameters.SwapEffect is SwapEffect.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.PresentationInterval">
      <summary>Gets or sets the maximum rate at which the swap chain's back buffers can be presented to the front buffer.</summary>
      <returns>The maximum rate at which the swap chain's back buffers can be presented to the front buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.PresentFlag">
      <summary>Gets or sets miscellaneous presentation flags.</summary>
      <returns>Presentation flags.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PresentationParameters.SwapEffect">
      <summary>Gets or sets the swap effect.</summary>
      <returns>The swap effect to use.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PresentationParameters">
      <summary>Contains presentation parameters.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RasterStatus.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterStatus.InVerticalBlank">
      <summary>Gets or sets the status of the vertical blank period.</summary>
      <returns>true if the raster is in the vertical blank period; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RasterStatus.ScanLine">
      <summary>Gets or sets a value that roughly corresponds to the current scan line painted by the raster.</summary>
      <returns>
        Integer that roughly corresponds to the current scan line to set or retrieve.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RasterStatus">
      <summary>
    Describes the raster status.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.RenderState.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AlphaBlendEnable">
      <summary>Gets or sets a value to enable alpha-blended transparency.</summary>
      <returns>true if alpha-blended transparency is enabled; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AlphaBlendOperation">
      <summary>Gets or sets the arithmetic operation applied to separate alpha blending.</summary>
      <returns>
        A value from the BlendFunction enumeration. The default is BlendFunction.Add.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AlphaDestinationBlend">
      <summary>Gets or sets the type of destination alpha blending.</summary>
      <returns>
        A value from the Blend enumeration. The default is Blend.Zero.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AlphaFunction">
      <summary>Gets or sets the comparison function for the alpha test.</summary>
      <returns>A member of the CompareFunction enumeration that represents the comparison function to set or get. The default is Always.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AlphaSourceBlend">
      <summary>Gets or sets the type of source alpha blending.</summary>
      <returns>A value from the Blend enumeration. The default is Blend.One.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AlphaTestEnable">
      <summary>Gets or sets a render state that enables a per-pixel alpha test.</summary>
      <returns>true if per-pixel alpha blending is enabled; false otherwise. The default value is false.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.AntiAliasedLineEnable">
      <summary>Enables or disables antialiasing.</summary>
      <returns>true to enable line antialiasing; false otherwise. The default is false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.BlendFactor">
      <summary>Gets or sets the color used for a constant-blend factor during alpha blending.</summary>
      <returns>The color used for a constant-blend factor during alpha blending.  The default is 0xffffffff.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.BlendFunction">
      <summary>Gets or sets a value to select the arithmetic operation to apply when RenderState.AlphaBlendEnable is set to true.</summary>
      <returns>The blending operation to set or get.  The default is Add.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ColorWriteEnable1">
      <summary>Gets or sets a value that enables a per-channel write for the render target color buffer.</summary>
      <returns>Value of the ColorWriteEnable enumeration that specifies the color channel to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ColorWriteEnable2">
      <summary>Gets or sets a value that enables a per-channel write for the render target color buffer.</summary>
      <returns>Value of the ColorWriteEnable enumeration that specifies the color channel to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ColorWriteEnable3">
      <summary>Gets or sets a value that enables a per-channel write for the render target color buffer.</summary>
      <returns>Value of the ColorWriteEnable enumeration that specifies the color channel to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ColorWriteEnable">
      <summary>Gets or sets a value that enables a per-channel write for the render target color buffer.</summary>
      <returns>Value of the ColorWriteEnable enumeration that specifies the color channel to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.CounterClockwiseStencilDepthBufferFail">
      <summary>Gets or sets the stencil operation to perform if the counterclockwise stencil test passes and the depth-buffer test fails.</summary>
      <returns>A value from the StencilOperation enumeration indicating which stencil operation to perform. The default is StencilOperation.Keep.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.CounterClockwiseStencilFail">
      <summary>Gets or sets the stencil operation to perform if the counterclockwise stencil test fails.</summary>
      <returns>A value from the StencilOperation enumeration indicating which stencil operation to perform. The default is StencilOperation.Keep.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.CounterClockwiseStencilFunction">
      <summary>Gets or sets the comparison function to use for counterclockwise stencil tests.</summary>
      <returns>A CompareFunction value indicating which test to perform. The default is CompareFunction.Always.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.CounterClockwiseStencilPass">
      <summary>Gets or sets the stencil operation to perform if the counterclockwise stencil and z-tests pass.</summary>
      <returns>
        A value from the StencilOperation enumeration indicating which stencil operation to perform. The default is StencilOperation.Keep.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.CullMode">
      <summary>Specifies how back-facing triangles are culled, if at all.</summary>
      <returns>The culling mode to set or get.  The default value is CounterClockwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.DepthBias">
      <summary>Sets or retrieves the depth bias for polygons.</summary>
      <returns>Depth bias for polygons.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.DepthBufferEnable">
      <summary>Enables or disables depth buffering.</summary>
      <returns>true if depth buffering is enabled; false otherwise. The default is true.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.DepthBufferFunction">
      <summary>Gets or sets the comparison function for the depth-buffer test.</summary>
      <returns>Value of a CompareFunction that represents the comparison function to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.DepthBufferWriteEnable">
      <summary>Enables or disables writing to the depth buffer.</summary>
      <returns>true if writing to the depth buffer is enabled; false otherwise. The default is true.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.DestinationBlend">
      <summary>Contains a member of the Blend enumeration that represents the destination blend.</summary>
      <returns>Value of a Blend that represents the current blend mode or the blend mode to set. The default is Zero.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FillMode">
      <summary>Represents the fill mode.</summary>
      <returns>Value of a FillMode that specifies the fill mode to set or get. The default is Solid.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogColor">
      <summary>Gets or sets the fog color.</summary>
      <returns>A color that specifies the fog color to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogDensity">
      <summary>Gets or sets the fog density for pixel or vertex fog used in exponential fog modes.</summary>
      <returns>Value that represents the fog density to set or get. The default value is 1.0.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogEnable">
      <summary>Enables or disables fog blending.</summary>
      <returns>true if fog blending is enabled; false otherwise. The default is false.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogEnd">
      <summary>Gets or sets the depth at which pixel or vertex fog effects end for linear fog mode.</summary>
      <returns>Value that represents the ending depth to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogStart">
      <summary>Gets or sets the depth at which pixel or vertex fog effects begin for linear fog mode.</summary>
      <returns>Value that represents the beginning depth to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogTableMode">
      <summary>Gets or sets the fog formula to use for pixel fog.</summary>
      <returns>Value of a FogMode that specifies the fog mode to set or get. The default is None.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.FogVertexMode">
      <summary>Gets or sets the fog formula to use for vertex fog.</summary>
      <returns>Value of a FogMode that specifies the fog mode to set or get. The default is None.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.LastPixel">
      <summary>Enables or disables drawing of the last pixel in a line.</summary>
      <returns>true if drawing of the last pixel is enabled; false otherwise.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.MultiSampleAntiAlias">
      <summary>Enables or disables multisample antialiasing.</summary>
      <returns>true to enable multisample antialiasing; false otherwise.  The default is true.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.MultiSampleMask">
      <summary>Gets or sets a bitmask controlling modification of the samples in a multisample render target.</summary>
      <returns>A bitmask value controlling write enables for the samples. The default is 0xffffffff. Each bit in this mask, starting at the least-significant bit, controls modification of one of the samples in a multisample render target. Thus, for an 8-sample render target, the low byte contains the eight write enables for each of the eight samples. This render state has no effect when rendering to a single sample buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.PointSizeMax">
      <summary>Gets or sets the maximum size of point primitives.</summary>
      <returns>The maximum size of point primitives. Must be less than or equal to Capabilities.MaxPointSize and greater than or equal to RenderState.PointSizeMin. The default is 64.0f.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.PointSizeMin">
      <summary>Gets or sets the minimum size of point primitives.</summary>
      <returns>The minimum size of point primitives. The default is 1.0f.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.PointSize">
      <summary>Gets or sets the size to use for point size computation in cases where point size is not specified for each vertex.</summary>
      <returns>This value is in world space units. The default value is the value a driver returns. If a driver returns 0 or 1, the default value is 64, which allows software point size emulation.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.PointSpriteEnable">
      <summary>Enables or disables full texture mapping on each point.</summary>
      <returns>true to set texture coordinates of point primitives so that full textures are mapped on each point; false otherwise.  The default is false. When false, the vertex texture coordinates are used for the entire point.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.RangeFogEnable">
      <summary>Gets or sets enabling of range-based vertex fog.</summary>
      <returns>true if range-based vertex fog is enabled; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ReferenceAlpha">
      <summary>Specifies a reference alpha value against which pixels are tested when alpha testing is enabled.</summary>
      <returns>Integer that specifies the reference alpha value to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ReferenceStencil">
      <summary>Specifies a reference value to use for the stencil test.</summary>
      <returns>Integer that specifies the stencil test value to set or get. The default is zero.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.ScissorTestEnable">
      <summary>Enables or disables scissor testing.</summary>
      <returns>true to enable scissor testing; false otherwise. The default is false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.SeparateAlphaBlendEnabled">
      <summary>Enables or disables the separate blend mode for the alpha channel.</summary>
      <returns>true to enable the separate blend mode for the alpha channel; false otherwise. The default is false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.SlopeScaleDepthBias">
      <summary>Gets or sets a value used to determine how much bias can be applied to coplanar primitives to reduce flimmering z-fighting.</summary>
      <returns>Value that specifies the slope scale bias to apply. The default is zero.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.SourceBlend">
      <summary>Gets or sets the color blending mode.</summary>
      <returns>A Blend mode to set or get. The default is One.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.SrgbWriteEnable">
      <summary>Enables or disables gamma correction of render-target writes to sRGB.</summary>
      <returns>true to enable gamma correction; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilDepthBufferFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test passes and the depth-test fails.</summary>
      <returns>Value of a StencilOperation that represents the value of the stencil operation to set or get. The default is Keep.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilEnable">
      <summary>Gets or sets stencil enabling.</summary>
      <returns>true if stenciling is enabled; false otherwise. The default is false.
    </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilFail">
      <summary>Gets or sets the stencil operation to perform if the stencil test fails.</summary>
      <returns>Value of a StencilOperation that represents the value of the stencil operation to set or get. The default is Keep.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilFunction">
      <summary>Gets or sets the comparison function for the stencil test.</summary>
      <returns>Value of a CompareFunction that represents the comparison function to set or get. The default is Always.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilMask">
      <summary>Gets or sets the mask applied to the reference value and each stencil buffer entry to determine the significant bits for the stencil test.</summary>
      <returns>Value that represents the mask to set or get. The default mask is Int32.MaxValue.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilPass">
      <summary>Gets or sets the stencil operation to perform if both the stencil test and the depth test (z-test) pass.</summary>
      <returns>Value of a StencilOperation that represents the value of the stencil operation to set or get. The default is Keep.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.StencilWriteMask">
      <summary>Gets or sets the write mask applied to values written into the stencil buffer.</summary>
      <returns>Value that represents the write mask to set or get. The default mask is Int32.MaxValue.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.TextureFactor">
      <summary>Gets or sets the color used for multiple-texture blending with the TextureArgument texture blending argument or the Blend texture blending operation.</summary>
      <returns>Integer that represents the color value to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.TwoSidedStencilMode">
      <summary>Enables or disables two-sided stenciling.</summary>
      <returns>true to enable two-sided stenciling; false otherwise. The default is false.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap0">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap10">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap11">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap12">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap13">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap14">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap15">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap1">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap2">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap3">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap4">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap5">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap6">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap7">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap8">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.RenderState.Wrap9">
      <summary>Gets or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
      <returns>Combination of values from TextureWrapCoordinates to set or get.  The default value for this render state is Zero (wrapping disabled in all directions).</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.RenderState">
      <summary>Defines device render states.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Resource.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Resource.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Resource.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Resource.op_Equality(Microsoft.Xna.Framework.Graphics.Resource,Microsoft.Xna.Framework.Graphics.Resource)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Resource.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current Resource.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Resource.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Resource.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Resource.op_Inequality(Microsoft.Xna.Framework.Graphics.Resource,Microsoft.Xna.Framework.Graphics.Resource)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Resource.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with this Resource.</summary>
      <returns>The GraphicsDevice associated with this Resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Resource.Name">
      <summary>Gets the name of the resource.</summary>
      <returns>The name of the resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Resource.Priority">
      <summary>Gets or sets the resource-management priority for this resource.</summary>
      <returns>The new resource-management priority for this resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Resource.ResourceType">
      <summary>Gets the type of this resource.</summary>
      <returns>The resource type.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Resource.Tag">
      <summary>Gets the resource tabs for this resource.</summary>
      <returns>The resource tags.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Resource">
      <summary>Queries and prepares resources.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs.Resource">
      <summary>The object raising the event.</summary>
      <returns>The object raising the event.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceCreatedEventArgs">
      <summary>Contains event data.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.Name">
      <summary>Gets the name of the destroyed resource.</summary>
      <returns>The name of the destroyed resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs.Tag">
      <summary>Gets the resource manager tag of the destroyed resource.</summary>
      <returns>The resource manager tag of the destroyed resource.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceDestroyedEventArgs">
      <summary>Arguments for a GraphicsDevice.ResourceDestroyed event.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ResourceNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ResourceNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ResourceNotFoundException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceNotFoundException">
      <summary>The exception that is thrown when a resource cannot be found.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SamplerState.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.AddressU">
      <summary>Gets or sets the texture-address mode for the u-coordinate.</summary>
      <returns>Texture-address mode to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.AddressV">
      <summary>Gets or sets the texture-address mode for the v-coordinate.</summary>
      <returns>Texture-address mode to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.AddressW">
      <summary>Gets or sets the texture-address mode for the w-coordinate.</summary>
      <returns>Texture-address mode to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.BorderColor">
      <summary>Gets or sets the border color.</summary>
      <returns>Border color to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.DisplaceMapOffset">
      <summary>
    Gets or sets the vertex offset in the presampled displacement map.
  </summary>
      <returns>The vertex offset in the displacement map to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.ElementIndex">
      <summary>Gets or sets the element index to use when an element with multiple textures is assigned to the sampler.</summary>
      <returns>The element index to set or get.  The default value is 0.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MagFilter">
      <summary>Gets or sets a magnification filter.</summary>
      <returns>The magnification filter to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MaxAnisotropy">
      <summary>Gets or sets the maximum anisotropy.</summary>
      <returns>The maximum anisotropy value to set or get.  The default value is 0.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MaxMipLevel">
      <summary>Gets or sets the level of detail (LOD) index of the largest map to use.</summary>
      <returns>The maximum LOD to set or get.  This index value can range from 0 to (nâˆ’ 1), where n is the largest map.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MinFilter">
      <summary>Gets or sets a minification filter.</summary>
      <returns>The minification filter to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MipFilter">
      <summary>Gets or sets a mipmap filter to use during minification.</summary>
      <returns>The minification filter to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.MipMapLevelOfDetailBias">
      <summary>Gets or sets the mipmap level of detail (LOD) bias.</summary>
      <returns>The mipmap bias to set or get.  The default value is 0.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerState.SrgbTexture">
      <summary>Determines whether to use gamma correction.</summary>
      <returns>true if gamma correction is used; false otherwise.  The default value is false.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SamplerState">
      <summary>Contains sampler states for the device.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SamplerStateCollection.Item">
      <summary>
    Gets a specific SamplerState object using an index value.
  </summary>
      <param name="index">Index of the object to retrieve.</param>
      <returns>The SamplerState object at the requested index.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SamplerStateCollection">
      <summary>Collection of SamplerState objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.AssembleFromFile(System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions)">
      <summary>Assembles a shader from a stream containing the compiled shader data, specifying the number of bytes in the stream.</summary>
      <param name="shaderSourceCode">Stream that contains the shader data.</param>
      <param name="numberBytes">The number of bytes in shaderSourceCode.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="flags">Compilation optimization options.</param>
      <returns>The compiled shader.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.AssembleFromFile(System.String,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions)">
      <summary>Assembles a shader from a file containing the compiled shader data.</summary>
      <param name="shaderFileName">Name of the file containing the compiled shader data.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="flags">Compilation optimization options.</param>
      <returns>The compiled shader.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.AssembleFromFile(System.IO.Stream,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions)">
      <summary>Assembles a shader from a stream containing the compiled shader data.</summary>
      <param name="shaderSourceCode">Stream that contains the shader data.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="flags">Compilation optimization options.</param>
      <returns>The compiled shader.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.AssembleFromSource(System.String,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions)">
      <summary>Assembles a shader.</summary>
      <param name="shaderSourceCode">String that contains the shader data.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="flags">Compilation optimization options.</param>
      <returns>The compiled shader.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromFile(System.IO.Stream,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,System.String,Microsoft.Xna.Framework.Graphics.ShaderProfile,System.Boolean)">
      <summary>Compiles a shader from a file stream containing the shader source code. </summary>
      <param name="shaderSourceCode">Stream that contains the shader source code.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="flags">Compilation optimization options.</param>
      <param name="functionName">The function to be compiled. </param>
      <param name="profile">A shader profile that determines the shader instruction set.</param>
      <param name="shouldReturnConstantTable">true to create a ShaderConstantTable that can be used to access shader constant; false otherwise.
    </param>
      <returns>The compiled shader.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromFile(System.String,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,System.String,Microsoft.Xna.Framework.Graphics.ShaderProfile,System.Boolean)">
      <summary>Compiles a shader from file containing the shader source code.</summary>
      <param name="shaderFileName">Name of the file containing the shader source code.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="flags">Compilation optimization options.</param>
      <param name="functionName">The function to be compiled. </param>
      <param name="profile">A shader profile that determines the shader instruction set.</param>
      <param name="shouldReturnConstantTable">true to create a ShaderConstantTable that can be used to access shader constant; false otherwise.
      </param>
      <returns>The compiled shader.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromFile(System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,System.String,Microsoft.Xna.Framework.Graphics.ShaderProfile,System.Boolean)">
      <summary>Compiles a shader from a file stream containing the shader source code, specifying the number of bytes in the stream.  </summary>
      <param name="shaderSourceCode">Stream that contains the shader source code.</param>
      <param name="numberBytes">The number of bytes in shaderSourceCode.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="flags">Compilation optimization options.</param>
      <param name="functionName">The function to be compiled. </param>
      <param name="profile">A shader profile that determines the shader instruction set.</param>
      <param name="shouldReturnConstantTable">true to create a ShaderConstantTable that can be used to access shader constant; false otherwise.
    </param>
      <returns>The compiled shader.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.CompileFromSource(System.String,Microsoft.Xna.Framework.Graphics.CompilerMacro[],Microsoft.Xna.Framework.Graphics.CompilerIncludeHandler,Microsoft.Xna.Framework.Graphics.CompilerOptions,System.String,Microsoft.Xna.Framework.Graphics.ShaderProfile,System.Boolean)">
      <summary>Compiles a shader from a string containing the shader source code.  </summary>
      <param name="shaderSourceCode">String that contains the shader source code.</param>
      <param name="preprocessorDefines">Describes preprocessor definitions used by an effect object.</param>
      <param name="includeHandler">User-implemented interface to provide callbacks for #include directives during shader compilation.</param>
      <param name="flags">Compilation optimization options.</param>
      <param name="functionName">The function to be compiled. </param>
      <param name="profile">A shader profile that determines the shader instruction set.</param>
      <param name="shouldReturnConstantTable">true to create a ShaderConstantTable that can be used to access shader constant; false otherwise.
      </param>
      <returns>The compiled shader.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderCompiler.Disassemble(System.Int32[],System.Boolean,System.String)">
      <summary>Disassembles a shader.</summary>
      <param name="function">The shader to disassemble.</param>
      <param name="enableColorCode">Specifies whether to enable color coding to make the disassembly easier to read.
      </param>
      <param name="comments">A comment string to include at the top of the shader.</param>
      <returns>The disassembled shader.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderCompiler">
      <summary>Compiles and decompiles high-level shader language (HLSL) shaders.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.GetArrayElement(System.Int32)">
      <summary>Gets the ShaderConstant at a specified index.</summary>
      <param name="index">The index to get.</param>
      <returns>The ShaderConstant specified by index.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.GetDefaultValue``1">
      <summary>Gets the default value of a ShaderConstant.</summary>
      <returns>The default value of the ShaderConstant.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValueArray``1(Microsoft.Xna.Framework.Graphics.GraphicsDevice,`0[])">
      <summary>Sets the value of a ShaderConstant to an array.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">The array of values to set the ShaderConstant to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstant.SetValue``1(Microsoft.Xna.Framework.Graphics.GraphicsDevice,`0)">
      <summary>Sets the value of a ShaderConstant.</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the ShaderConstant.</param>
      <param name="value">The value to set the ShaderConstant to.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.ColumnCount">
      <summary>Gets the number of columns in the ShaderConstant.</summary>
      <returns>The number of columns in the ShaderConstant.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.ElementCount">
      <summary>Gets the number of elements in the ShaderConstant.</summary>
      <returns>The number of elements in the ShaderConstant.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.Name">
      <summary>Gets the name of the ShaderConstant.</summary>
      <returns>The name of the ShaderConstant.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.ParameterClass">
      <summary>Gets the EffectParameterClass of the ShaderConstant.</summary>
      <returns>
        The EffectParameterClass of the ShaderConstant.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.ParameterType">
      <summary>Gets the EffectParameterType of the ShaderConstant. </summary>
      <returns>
        The EffectParameterType of the ShaderConstant.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.RegisterCount">
      <summary>Gets the number of registers that contain data.</summary>
      <returns>The number of registers that contain data.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.RegisterSet">
      <summary>Gets the ShaderConstant data type.</summary>
      <returns>The ShaderConstant data type.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.RegsiterIndex">
      <summary>Gets the index of the ShaderConstant in the constant table.</summary>
      <returns>
        The index of the ShaderConstant in the constant table.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.RowCount">
      <summary>Gets the number of rows in the ShaderConstant.</summary>
      <returns>The number of rows in the ShaderConstant.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.SamplerIndex">
      <summary>Gets the sampler index number of the ShaderConstant from the constant table.</summary>
      <returns>The sampler index number of the ShaderConstant from the constant table.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstant.StructureMemberCount">
      <summary>
    Gets the number of structure member subparameters.
  </summary>
      <returns>The number of structure member subparameters.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderConstant">
      <summary>Describes a shader constant.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.GetEnumerator">
      <summary>
    Returns an enumerator that can iterate through the ShaderConstantCollection.
  </summary>
      <returns>The iterator.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.Count">
      <summary>
    Gets the number of ShaderConstant objects in this ShaderConstantCollection.
  </summary>
      <returns>
        The number of ShaderConstant objects in this ShaderConstantCollection.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.Item">
      <summary>
    Gets a specific ShaderConstant object using an index value.
  </summary>
      <param name="name">Name of the ShaderConstant to get.</param>
      <returns>
        The ShaderConstant object specified by name.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantCollection.Item">
      <summary>
    Gets a specific ShaderConstant object using an index value.
  </summary>
      <param name="index">Index of the ShaderConstant to get.</param>
      <returns>
        The ShaderConstant object at the specified index.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderConstantCollection">
      <summary>Manipulates a collection of ShaderConstant objects.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Disposing">
      <summary>
        Occurs when ShaderConstantTable.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the ShaderConstantTable and optionally releases the managed resources.
  </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the ShaderConstantTable.Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.op_Equality(Microsoft.Xna.Framework.Graphics.ShaderConstantTable,Microsoft.Xna.Framework.Graphics.ShaderConstantTable)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current ShaderConstantTable.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.FromShader(System.Int32[])">
      <summary>Gets the shader constant table embedded inside a shader.</summary>
      <param name="code">The shader code.</param>
      <returns>The constant table embedded inside the specified shader.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.op_Inequality(Microsoft.Xna.Framework.Graphics.ShaderConstantTable,Microsoft.Xna.Framework.Graphics.ShaderConstantTable)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.SetDefaults(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>
    Sets the constants in the ShaderConstantTable to their default values. The default values are declared in the variable declarations in the shader.

  </summary>
      <param name="device">The GraphicsDevice associated with the ShaderConstantTable.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Constants">
      <summary>Gets a collection of the constants in the ShaderConstantTable.</summary>
      <returns>The collection of constants in the ShaderConstantTable.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Creator">
      <summary>Gets the name of the constant table creator.
  </summary>
      <returns>The name of the constant table creator.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderConstantTable.Version">
      <summary>Gets the shader version.</summary>
      <returns>The shader version.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderConstantTable">
      <summary>Contains the variables that are used by high-level language shaders and effects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.ShaderSemantic.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderSemantic.UsageIndex">
      <summary>Gets or sets options that modify how the usage is interpreted. The usage and usage index make up a vertex declaration. </summary>
      <returns>Options that modify how the usage is interpreted. The usage and usage index make up a vertex declaration. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.ShaderSemantic.VertexElementUsage">
      <summary>Gets or sets options that identify how resources are used.</summary>
      <returns>Options that identify how resources are used.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderSemantic">
      <summary>
    Semantics map a parameter to vertex or pixel shader registers. They can also be optional descriptive strings attached to non-register parameters.

  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="graphicsDevice">The graphics device where sprites will be drawn.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.SpriteBatch.Disposing">
      <summary>
        Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.
      </summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.SpriteBatch.Lost">
      <summary>Occurs when an object is lost, normally just before a device is reset.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.SpriteBatch.Reset">
      <summary>Occurs after the device is reset.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteBlendMode)">
      <summary>Prepares the graphics device for drawing sprites with specified blending options.</summary>
      <param name="blendMode">Blending options to use when rendering.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin(Microsoft.Xna.Framework.Graphics.SpriteBlendMode,Microsoft.Xna.Framework.Graphics.SpriteSortOptions,Microsoft.Xna.Framework.Graphics.SpriteStateOptions)">
      <summary>Prepares the graphics device for drawing sprites with specified blending, sorting, and render state options.</summary>
      <param name="blendMode">Blending options to use when rendering.</param>
      <param name="sortMode">Sorting options to use when rendering.</param>
      <param name="stateMode">Rendering state options.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Begin">
      <summary>Prepares the graphics device for drawing sprites.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable.{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, destination and source rectangles, color tint, rotation, origin, effects and sort depth.</summary>
      <param name="texture">The sprite texture. </param>
      <param name="destinationRectangle">A rectangle specifying, in screen coordinates, where the sprite will be drawn. If this rectangle is not the same size as sourcerectangle the sprite will be scaled to fit.
    </param>
      <param name="sourceRectangle">A rectangle specifying, in texture coordinates, which section of the rectangle to draw. Use  to draw the entire texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, destination rectangle, and color tint.</summary>
      <param name="texture">The sprite texture. </param>
      <param name="destinationRectangle">A rectangle specifying, in screen coordinates, where the sprite will be drawn. If this rectangle is not the same size as sourcerectangle the sprite will be scaled to fit.
    </param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, screen position, and color tint.</summary>
      <param name="texture">The sprite texture. </param>
      <param name="position">The location, in screen coordinates, where the sprite will be drawn.</param>
      <param name="color">The color channel modulation to use. Use Color.White for full color with no tinting.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable.{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color,System.Single,Microsoft.Xna.Framework.Vector2,System.Single,Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, screen position, source rectangle, color tint, rotation, origin, effects and sort depth.</summary>
      <param name="texture">The sprite texture. </param>
      <param name="position">The location, in screen coordinates, where the sprite will be drawn.</param>
      <param name="sourceRectangle">A rectangle specifying, in texture coordinates, which section of the rectangle to draw. Use  to draw the entire texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2,System.Nullable.{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, screen position, source rectangle, and color tint.</summary>
      <param name="texture">The sprite texture. </param>
      <param name="position">The location, in screen coordinates, where the sprite will be drawn.</param>
      <param name="sourceRectangle">A rectangle specifying, in texture coordinates, which section of the rectangle to draw. Use  to draw the entire texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle,System.Nullable.{Microsoft.Xna.Framework.Rectangle},Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Adds a sprite to the batch of sprites to be rendered, specifying the texture, destination and source rectangles, and color tint.</summary>
      <param name="texture">The sprite texture. </param>
      <param name="destinationRectangle">A rectangle specifying, in screen coordinates, where the sprite will be drawn. If this rectangle is not the same size as sourcerectangle the sprite will be scaled to fit.
    </param>
      <param name="sourceRectangle">A rectangle specifying, in texture coordinates, which section of the rectangle to draw. Use  to draw the entire texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.End">
      <summary>Calls SpriteBatch.Flush and restores the device state to how it was before SpriteBatch.Begin was called.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.op_Equality(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">The object to compare.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Flush">
      <summary>Forces all batched sprites to be submitted to the device. Device states remain as they were after the last call to SpriteBatch.Begin. The list of batched sprites is then cleared.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.op_Inequality(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.raise_Lost(System.Object,System.EventArgs)">
      <summary>Raises an SpriteBatch.Lost event when called from within a derived class.</summary>
      <param name="value0">The sender of the event.</param>
      <param name="value1">The event arguments that are associated with this event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.raise_Reset(System.Object,System.EventArgs)">
      <summary>Raises an SpriteBatch.Reset event when called from within a derived class.</summary>
      <param name="value0">The sender of the event.</param>
      <param name="value1">The event arguments that are associated with this event.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteBatch.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteBatch.Name">
      <summary>Gets or sets the name of this sprite batch.</summary>
      <returns>The name of this sprite batch.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SpriteBatch.Tag">
      <summary>Gets or sets an object that uniquely identifies this sprite batch.</summary>
      <returns>An object that uniquely identifies this sprite batch.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteBatch">
      <summary>Enables a group of sprites to be drawn using the same settings.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.StateBlockType)">
      <summary>Initializes a new instance of the StateBlock class.</summary>
      <param name="graphicsDevice">The device to associate with the state block.</param>
      <param name="stateBlockType">The device states to capture.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.StateBlock.Disposing">
      <summary>
        Occurs when StateBlock.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.Apply">
      <summary>Applies the state block to the current StateBlock.GraphicsDevice.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.Capture">
      <summary>Captures the current value of states that are included in a state block.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the StateBlock.Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.op_Equality(Microsoft.Xna.Framework.Graphics.StateBlock,Microsoft.Xna.Framework.Graphics.StateBlock)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current StateBlock.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.op_Inequality(Microsoft.Xna.Framework.Graphics.StateBlock,Microsoft.Xna.Framework.Graphics.StateBlock)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.StateBlock.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.StateBlock.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with this StateBlock.</summary>
      <returns>
        The GraphicsDevice associated with this StateBlock.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.StateBlock.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.StateBlock.Name">
      <summary>Gets or sets the name of the StateBlock.</summary>
      <returns>
        The name of the StateBlock.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.StateBlock.Tag">
      <summary>Gets or sets the resource manager tag for the StateBlock.</summary>
      <returns>
        The resource manager tag for the StateBlock.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.StateBlock">
      <summary>Encapsulates render states.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.Surface.Disposing">
      <summary>
        Occurs when Surface.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the Surface.Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.op_Equality(Microsoft.Xna.Framework.Graphics.Surface,Microsoft.Xna.Framework.Graphics.Surface)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current Surface.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.GetContainer``1">
      <summary>Gets the parent of the Surface.</summary>
      <returns>The parent of the Surface.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.GetData``1(System.Nullable.{Microsoft.Xna.Framework.Rectangle},`0[],System.Int32,System.Int32)">
      <summary>Gets the data of the Surface.</summary>
      <param name="rect">A !Framework.Rectangle defining the region to get data from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.GetData``1(`0[])">
      <summary>
    Gets the data of the Surface.
  </summary>
      <param name="data">An array to fill with data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.GetData``1(`0[],System.Int32,System.Int32)">
      <summary>
    Gets the data of the Surface.
  </summary>
      <param name="data">An array to fill with data.</param>
      <param name="startIndex">Index of element in the array to start copying to.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.op_Inequality(Microsoft.Xna.Framework.Graphics.Surface,Microsoft.Xna.Framework.Graphics.Surface)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.SetData``1(System.Nullable.{Microsoft.Xna.Framework.Rectangle},`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>
    Sets the data of the Surface.
  </summary>
      <param name="rect">A !Framework.Rectangle describing the area of the Surface to copy to.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.SetData``1(`0[])">
      <summary>Sets the data of the Surface.</summary>
      <param name="data">The array to copy data from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.SetData``1(`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>
    Copies data to a Surface.
  </summary>
      <param name="data">The array to copy data from.</param>
      <param name="startIndex">Index of element in the array to start copying from.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">Options to use when copying the data to the Surface.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Surface.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Surface.Format">
      <summary>Gets the format of the surface.</summary>
      <returns>The format of the surface.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Surface.Height">
      <summary>Gets the height, in pixels, of the surface.</summary>
      <returns>The height, in pixels, of the surface.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Surface.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Surface.MultiSampleQuality">
      <summary>Gets the number of quality stops available for a given multisample type.</summary>
      <returns>The number of quality stops available for a given multisample type.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Surface.MultiSampleType">
      <summary>Gets the levels of full-scene multisampling that the device can apply.</summary>
      <returns>The levels of full-scene multisampling that the device can apply.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Surface.Name">
      <summary>Gets or sets the name of the Surface.</summary>
      <returns>
        The name of the Surface.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Surface.ResourcePool">
      <summary>Gets the class of memory allocated for this Surface. </summary>
      <returns>The levels of full-scene multisampling that the device can apply.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Surface.ResourceType">
      <summary>Gets the type of this resource.  </summary>
      <returns>
        The resource type, identifying this resource as a surface.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Surface.ResourceUsage">
      <summary>Gets a set of options identifying the behaviors of this resource.</summary>
      <returns>A set of options identifying the behaviors of this resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Surface.Tag">
      <summary>Gets or sets the resource manager tag of the Surface.</summary>
      <returns>
        The resource manager tag of the Surface.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Surface.Width">
      <summary>Returns the width, in pixels, of this Surface.
  </summary>
      <returns>
        The width, in pixels, of this Surface.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Surface">
      <summary>Queries and prepares surfaces.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.PresentationParameters)">
      <summary>Initializes a new instance of the SwapChain class.</summary>
      <param name="graphicsDevice">The GraphicsDevice hosting the swap chain.</param>
      <param name="presentationParameters">The presentation parameters for the new swap chain.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.SwapChain.Disposing">
      <summary>
        Occurs when SwapChain.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.CopyFrontBuffer(Microsoft.Xna.Framework.Graphics.Surface)">
      <summary>
    Copies the swap chain's front buffer into a specified Surface.

  </summary>
      <param name="frontBuffer">Surface to copy the swap chain's front buffer into.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the SwapChain.Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.op_Equality(Microsoft.Xna.Framework.Graphics.SwapChain,Microsoft.Xna.Framework.Graphics.SwapChain)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current SwapChain.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.GetBackBuffer(System.Int32)">
      <summary>Gets a back buffer from the swap chain.</summary>
      <param name="backBuffer">
        Index of the back buffer object to return. Back buffers are numbered from 0 to the total number of back buffers âˆ’ 1. A value of 0 returns the first back buffer, not the front buffer. The front buffer is not accessible through this method. 
      </param>
      <returns>The requested back buffer surface.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.op_Inequality(Microsoft.Xna.Framework.Graphics.SwapChain,Microsoft.Xna.Framework.Graphics.SwapChain)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.Present(System.Nullable.{Microsoft.Xna.Framework.Rectangle},System.Nullable.{Microsoft.Xna.Framework.Rectangle},System.IntPtr,Microsoft.Xna.Framework.Graphics.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="sourceRectangle">The area to copy from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.Present(System.IntPtr,Microsoft.Xna.Framework.Graphics.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
      <param name="overrideWindowHandle">Destination window whose client area is taken as the target for this presentation.</param>
      <param name="flags">Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.Present">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the swap chain.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.SwapChain.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SwapChain.DisplayMode">
      <summary>
    Gets the display mode's spatial resolution, color resolution, and refresh frequency.
  </summary>
      <returns>
        A DisplayMode containing data about the display mode of the adapter. As opposed to the display mode of the device, which may not be active if the device does not own full-screen mode.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SwapChain.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with the swap chain.</summary>
      <returns>
        The GraphicsDevice associated with the swap chain.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SwapChain.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SwapChain.Name">
      <summary>Gets and sets the name of this swap chain.</summary>
      <returns>The name of the swap chain.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SwapChain.PresentationParameters">
      <summary>Gets the PresentationParameters associated with the swap chain.</summary>
      <returns>
        The PresentationParameters associated with the swap chain.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SwapChain.RasterStatus">
      <summary>
    Gets information describing the raster of the monitor on which the swap chain is presented.
  </summary>
      <returns>A RasterStatus filled with information about the position or other status of the raster on the monitor driven by this adapter. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.SwapChain.Tag">
      <summary>Gets and sets the tag object of this swap chain.</summary>
      <returns>The tag object of this swap chain.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SwapChain">
      <summary>Represents a swap chain.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.Dispose(System.Boolean)">
      <summary>Releases all resources used by the Texture class.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.op_Equality(Microsoft.Xna.Framework.Graphics.Texture,Microsoft.Xna.Framework.Graphics.Texture)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current Texture.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
      <summary>Creates a texture resource from a file.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <returns>The texture resource that has been created on the specified graphics device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32)">
      <summary>Creates a texture resource from a stream, specifying the number of bytes in the stream.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="textureStream">Stream that contains the texture data.</param>
      <param name="numberBytes">The number of bytes in textureStream.</param>
      <returns>The texture resource that has been created on the specified graphics device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Loads a Texture from a file.</summary>
      <param name="graphicsDevice">The GraphicsDevice to associate the texture with.</param>
      <param name="textureStream">The stream to load the texture from.</param>
      <param name="creationParameters">Parameters to use when creating the Texture.</param>
      <returns>The created Texture.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a texture resource from a file, specifying the parameters to be used in creation of the texture.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource. </param>
      <param name="filename">The name of the file containing the texture. </param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
      <returns>The texture resource that has been created on the specified graphics device. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream)">
      <summary>Creates a texture resource from a stream.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource. </param>
      <param name="textureStream">Stream that contains the texture data.</param>
      <returns>The texture resource that has been created on the specified graphics device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a texture resource from a file, specifying the width, height, and depth of the texture in pixels.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture. </param>
      <param name="width">The width of the texture, in pixels.</param>
      <param name="height">The height of the texture, in pixels.</param>
      <param name="depth">The depth of the texture, in pixels.</param>
      <returns>The texture resource that has been created on the specified graphics device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.IO.Stream,System.Int32,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>
    Loads a Texture from a file.
  </summary>
      <param name="graphicsDevice">
        The GraphicsDevice to associate the texture with.
      </param>
      <param name="textureStream">The stream to load the texture from.</param>
      <param name="numberBytes">The number of bytes in the stream.</param>
      <param name="creationParameters">
        Parameters to use when creating the Texture.
      </param>
      <returns>
        The created Texture.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.GenerateMipMaps(Microsoft.Xna.Framework.Graphics.TextureFilter)">
      <summary>Generate mipmap sublevels.</summary>
      <param name="filterType">Defines texture filtering modes for a texture stage.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.GetCreationParameters(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
      <summary>Loads texture creation parameters from a file.</summary>
      <param name="graphicsDevice">The GraphicsDevice to associate with the texture creation parameters.</param>
      <param name="filename">The name of the file to load the creation parameters from.</param>
      <returns>The texture creation parameters.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.GetTextureInformation(System.String)">
      <summary>Retrieves information about a given image file.</summary>
      <param name="filename">File name of image.</param>
      <returns>A description of the data in the source file.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.op_Inequality(Microsoft.Xna.Framework.Graphics.Texture,Microsoft.Xna.Framework.Graphics.Texture)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.Save(System.String,Microsoft.Xna.Framework.Graphics.ImageFileFormat,Microsoft.Xna.Framework.Graphics.PaletteEntry[])">
      <summary>Saves a texture to a file, specifying the color palette.</summary>
      <param name="filename">The file name of the destination image.</param>
      <param name="format">
        The file format to use when saving. This function supports saving to all ImageFileFormat  formats except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).
      </param>
      <param name="sourcePalette">Palette of 256 colors.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture.Save(System.String,Microsoft.Xna.Framework.Graphics.ImageFileFormat)">
      <summary>Saves a texture to a file.</summary>
      <param name="filename">The file name of the destination image.</param>
      <param name="format">
        The file format to use when saving. This function supports saving to all ImageFileFormat  formats except Portable Pixmap (.ppm) and Targa/Truevision Graphics Adapter (.tga).
      </param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture.LevelCount">
      <summary>Gets the number of texture levels in a multilevel texture.</summary>
      <returns>The number of texture levels in the multilevel texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture.LevelOfDetail">
      <summary>Gets or sets the most detailed level-of-detail for a managed texture. </summary>
      <returns>The most detailed level-of-detail for a managed texture. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture.Name">
      <summary>Gets or sets the name of this texture.</summary>
      <returns>The name of this texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture.Tag">
      <summary>Gets or sets the resource tags associated with this texture.</summary>
      <returns>Resource tags associated with this texture.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture">
      <summary>Manipulates a texture resource.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.ResourceUsage,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.ResourcePool)">
      <summary>Initializes a new instance of the Texture2D class.</summary>
      <param name="graphicsDevice">The GraphicsDevice used to display the texture.</param>
      <param name="width">The width of the texture, in pixels. If this value is 0, a value of 1 is used.</param>
      <param name="height">The height of the texture, in pixels. If this value is 0, a value of 1 is used.</param>
      <param name="numberLevels">The number of mip levels requested. If this value is 0, a complete mipmap chain is created.</param>
      <param name="usage">A ResourceUsage value specifying how to use the texture.</param>
      <param name="format">A SurfaceFormat value specifying the requested pixel format for the texture. The returned texture may be of a different format if the device does not support the requested format. Applications should check the format of the returned texture to ensure that it matches the requested format.</param>
      <param name="resourcePool">A ResourcePool value specifying the memory class for the resulting texture.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.Texture2D.Disposing">
      <summary>
        Occurs when Texture2D.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.AddDirtyRectangle(System.Nullable.{Microsoft.Xna.Framework.Rectangle})">
      <summary>Adds a dirty region to the texture. </summary>
      <param name="rect">A !Framework.Rectangle specifying the dirty region of the texture. A  value marks the entire texture as dirty.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the Texture2D and optionally releases the managed resources.
  </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises the Texture2D.Disposing event when called from within a derived class.</summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.op_Equality(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current Texture2D.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
      <summary>Creates a texture resource from a file.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <returns>The texture resource that has been created on the specified graphics device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Int32,System.Int32)">
      <summary>
    Creates a texture resource from a file, specifying the width and height of the texture in pixels.
  </summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <param name="width">The width of the texture, in pixels.</param>
      <param name="height">The height of the texture, in pixels.</param>
      <returns>The texture resource that has been created on the specified graphics device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a texture resource from a file, specifying the parameters to be used in creation of the texture.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource. </param>
      <param name="filename">The name of the file containing the texture. </param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
      <returns>The texture resource that has been created on the specified graphics device. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(System.Int32,System.Nullable.{Microsoft.Xna.Framework.Rectangle},`0[],System.Int32,System.Int32)">
      <summary>Copies texture data into an array.</summary>
      <param name="level">The mipmap level to copy from.</param>
      <param name="rect">The section of the texture to copy.   indicates the data will be copied from the entire texture.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(`0[])">
      <summary>Copies texture data into an array.</summary>
      <param name="data">The array to receive texture data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetData``1(`0[],System.Int32,System.Int32)">
      <summary>Copies texture data into an array.</summary>
      <param name="data">The array to receive texture data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.GetSurfaceLevel(System.Int32)">
      <summary>Returns the surface of the texture at a given level. </summary>
      <param name="level">The texture level of the desired surface. 0 is the top-level surface.</param>
      <returns>A Surface instance representing the texture surface at the level specified.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.op_Inequality(Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(System.Int32,System.Nullable.{Microsoft.Xna.Framework.Rectangle},`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture.</summary>
      <param name="level">The mipmap level where the data will be placed.</param>
      <param name="rect">The section of the texture where the data will be placed.   indicates the data will be copied over the entire texture.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(`0[])">
      <summary>Copies array data to the texture.</summary>
      <param name="data">The array of data to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.SetData``1(`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture.</summary>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">One or more SetDataOptions indicating the type of copy to perform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture2D.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Format">
      <summary>Gets the pixel format of this texture resource.</summary>
      <returns>The pixel format of this texture resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Height">
      <summary>Gets the height of this texture resource, in pixels.</summary>
      <returns>The height of this texture resource, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.MultiSampleQuality">
      <summary>Gets the multisample quality level of this texture resource.</summary>
      <returns>The multisample quality level. The valid range is from 0 to one less than the value returned by GraphicsAdapter.CheckDeviceMultiSampleType.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.MultiSampleType">
      <summary>Gets the multisample technique used for this texture resource.</summary>
      <returns>The multisample technique used for this texture resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Name">
      <summary>Gets or sets a name for this texture.</summary>
      <returns>The name of this texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.ResourcePool">
      <summary>Gets the class of memory allocated for this texture. </summary>
      <returns>The class of memory allocated for this texture. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.ResourceUsage">
      <summary>Gets a set of options identifying the behaviors of this resource.</summary>
      <returns>A set of options identifying the behaviors of this resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Tag">
      <summary>Gets and sets an object tag for this texture.</summary>
      <returns>The object tag for this texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture2D.Width">
      <summary>Gets the width of this texture resource, in pixels.</summary>
      <returns>The width of this texture resource, in pixels.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture2D">
      <summary>Represents a 2D texture.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.ResourceUsage,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.ResourcePool)">
      <summary>
    Initializes a new instance of the Texture3D class.
  </summary>
      <param name="graphicsDevice">The GraphicsDevice that will display the volume texture.</param>
      <param name="width">
        The width of the top-level of the volume texture, in pixels. This value must be a power of two if the GraphicsDeviceCapabilities.TextureCapabilities.SupportsVolumeMapPower2 is true. The pixel dimensions of subsequent levels will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by two results in 0 (zero), 1 will be taken instead. The maximum dimension that a driver supports (for width, height, and depth) can be found in GraphicsDeviceCapabilities.MaxVolumeExtent.
      </param>
      <param name="height">
        The height of the top-level of the volume texture, in pixels. This value must be a power of two if the GraphicsDeviceCapabilities.TextureCapabilities.SupportsVolumeMapPower2 is true. The pixel dimensions of subsequent levels will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by two results in 0 (zero), 1 will be taken instead. The maximum dimension that a driver supports (for width, height, and depth) can be found in GraphicsDeviceCapabilities.MaxVolumeExtent.
      </param>
      <param name="depth">
        The depth of the top-level of the volume texture, in pixels. This value must be a power of two if the GraphicsDeviceCapabilities.TextureCapabilities.SupportsVolumeMapPower2 is true. The pixel dimensions of subsequent levels will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by two results in 0 (zero), 1 will be taken instead. The maximum dimension that a driver supports (for width, height, and depth) can be found in GraphicsDeviceCapabilities.MaxVolumeExtent.
      </param>
      <param name="numberLevels">
        The number of levels in the texture. If this is zero, Direct3D will generate all texture sublevels down to 1Ã—1 pixels for hardware that supports mipmapped volume textures. Use Texture.LevelCount to see the number of levels generated.
      </param>
      <param name="usage">The desired ResourceUsage value, or ResourceUsage.</param>
      <param name="format">The format of all levels in the volume texture.</param>
      <param name="resourcePool">The memory class into which the volume texture should be placed.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.Texture3D.Disposing">
      <summary>
        Occurs when Texture3D.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.AddDirtyBox(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Adds a dirty region to a volume texture resource, specifying the dirty region to add.</summary>
      <param name="left">Position of the left side of the box on the x-axis.</param>
      <param name="top">Position of the top of the box on the y-axis.</param>
      <param name="right">Position of the right side of the box on the x-axis.</param>
      <param name="bottom">Position of the bottom of the box on the y-axis.</param>
      <param name="front">Position of the front of the box on the z-axis.</param>
      <param name="back">Position of the back of the box on the z-axis.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.AddDirtyBox">
      <summary>Adds a dirty region to a volume texture resource.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the Texture3D and optionally releases the managed resources.
  </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the Texture3D.Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.op_Equality(Microsoft.Xna.Framework.Graphics.Texture3D,Microsoft.Xna.Framework.Graphics.Texture3D)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current Texture3D.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
      <summary>Creates a volume texture resource from a file. </summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <returns>The texture resource that has been created on the specified graphics device. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a volume texture resource from a file, specifying the parameters to be used in creation of the texture.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
      <returns>The texture resource that has been created on the specified graphics device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Creates a volume texture resource from a file, specifying the width, height, and depth in pixels.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <param name="width">The width of the texture, in pixels.</param>
      <param name="height">The height of the texture, in pixels.</param>
      <param name="depth">The depth of the texture, in pixels.</param>
      <returns>The texture resource that has been created on the specified graphics device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Gets a copy of the texture data, specifying the level and dimensions of the volume texture to copy.</summary>
      <param name="level">The mipmap level where the data will be placed.</param>
      <param name="left">Position of the left side of the box on the x-axis.</param>
      <param name="top">Position of the top of the box on the y-axis.</param>
      <param name="right">Position of the right side of the box on the x-axis.</param>
      <param name="bottom">Position of the bottom of the box on the y-axis.</param>
      <param name="front">Position of the front of the box on the z-axis.</param>
      <param name="back">Position of the back of the box on the z-axis.</param>
      <param name="data">An array to fill with data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(`0[])">
      <summary>Gets a copy of the texture data.</summary>
      <param name="data">An array to fill with data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetData``1(`0[],System.Int32,System.Int32)">
      <summary>Gets a copy of the texture data, specifying the starting index and number of elements to copy. </summary>
      <param name="data">An array to fill with data.</param>
      <param name="startIndex">Index of the element in the array at which to start copying. </param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.GetVolumeLevel(System.Int32)">
      <summary>Gets the specified volume texture level.</summary>
      <param name="level">Level of the volume texture resource to get. </param>
      <returns>
        The volume level.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.op_Inequality(Microsoft.Xna.Framework.Graphics.Texture3D,Microsoft.Xna.Framework.Graphics.Texture3D)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.SetData``1(`0[])">
      <summary>Copies array data to the texture. </summary>
      <param name="data">The array of data to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.SetData``1(`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture, specifying the starting index and number of elements to copy. </summary>
      <param name="data">The array of data to copy. </param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">The type of copy to perform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.SetData``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture, specifying the dimensions of the volume and the mipmap level where the data is to be placed. </summary>
      <param name="level">The mipmap level where the data will be placed.</param>
      <param name="left">Position of the left side of the box on the x-axis.</param>
      <param name="top">Position of the top of the box on the y-axis.</param>
      <param name="right">Position of the right side of the box on the x-axis.</param>
      <param name="bottom">Position of the bottom of the box on the y-axis.</param>
      <param name="front">Position of the front of the box on the z-axis.</param>
      <param name="back">Position of the back of the box on the z-axis.</param>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">The type of copy to perform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3D.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Depth">
      <summary>Gets the depth of this volume texture resource, in pixels.</summary>
      <returns>The depth of this volume texture resource, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Format">
      <summary>Gets the pixel format for this texture resource. </summary>
      <returns>The pixel format of this texture resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Height">
      <summary>Gets the height of this texture resource, in pixels.</summary>
      <returns>The height of this texture resource, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Name">
      <summary>Gets or sets the name of a volume texture resource.</summary>
      <returns>Name of the volume texture resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.ResourcePool">
      <summary>Gets the class of memory allocated for this volume texture resource. </summary>
      <returns>The class of memory allocated for this volume texture resource. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.ResourceUsage">
      <summary>Gets a set of options identifying the behaviors of this resource.</summary>
      <returns>A set of options identifying the behaviors of this resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Tag">
      <summary>Gets or sets the resource manager tag for this texture.</summary>
      <returns>The resource manager tag for this texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3D.Width">
      <summary>Gets the width of this texture resource, in pixels.</summary>
      <returns>The width of this texture resource, in pixels.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture3D">
      <summary>Represents a volume texture.</summary>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.Texture3DVolume.Disposing">
      <summary>
        Occurs when Texture3DVolume.Dispose  is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the Texture3DVolume and optionally releases the managed resources.
  </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the Texture3DVolume.Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.op_Equality(Microsoft.Xna.Framework.Graphics.Texture3DVolume,Microsoft.Xna.Framework.Graphics.Texture3DVolume)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current Texture3DVolume.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.GetContainer``1">
      <summary>Gets the parent of the current Texture3DVolume.</summary>
      <returns>The parent of the current Texture3DVolume.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.GetData``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,`0[],System.Int32,System.Int32)">
      <summary>
    Gets a copy of the texture data, specifying the dimensions of the volume texture to copy.
  </summary>
      <param name="left">Position of the left side of the box on the x-axis.</param>
      <param name="top">Position of the top of the box on the y-axis.</param>
      <param name="right">Position of the right side of the box on the x-axis.</param>
      <param name="bottom">Position of the bottom of the box on the y-axis.</param>
      <param name="front">Position of the front of the box on the z-axis.</param>
      <param name="back">Position of the back of the box on the z-axis.</param>
      <param name="data">An array to fill with data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.GetData``1(`0[])">
      <summary>Gets a copy of the texture data.</summary>
      <param name="data">An array to fill with data. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.GetData``1(`0[],System.Int32,System.Int32)">
      <summary>Gets a copy of the texture data, specifying the starting index and number of elements to copy.</summary>
      <param name="data">An array to fill with data.</param>
      <param name="startIndex">The index of the element in the array at which to start copying. </param>
      <param name="elementCount">The number of elements to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.op_Inequality(Microsoft.Xna.Framework.Graphics.Texture3DVolume,Microsoft.Xna.Framework.Graphics.Texture3DVolume)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.SetData``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture, specifying the dimensions of the volume.</summary>
      <param name="left">Position of the left side of the box on the x-axis.</param>
      <param name="top">Position of the top of the box on the y-axis.</param>
      <param name="right">Position of the right side of the box on the x-axis.</param>
      <param name="bottom">Position of the bottom of the box on the y-axis.</param>
      <param name="front">Position of the front of the box on the z-axis.</param>
      <param name="back">Position of the back of the box on the z-axis.</param>
      <param name="data">The array of data to copy. </param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy. </param>
      <param name="options">The type of copy to perform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.SetData``1(`0[])">
      <summary>Copies array data to the texture. </summary>
      <param name="data">The array of data to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.SetData``1(`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture, specifying the starting index and number of elements to copy. </summary>
      <param name="data">The array of data to copy. </param>
      <param name="startIndex">The index of the element in the array at which to start copying.</param>
      <param name="elementCount">The number of elements to copy.</param>
      <param name="options">The type of copy to perform. </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Texture3DVolume.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3DVolume.Depth">
      <summary>Gets the depth of the volume, in pixels. </summary>
      <returns>Depth of the volume, in pixels. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3DVolume.Format">
      <summary>Gets the surface format of the volume. </summary>
      <returns>The surface format of the volume. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3DVolume.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with the current Texture3DVolume. </summary>
      <returns>
        The GraphicsDevice associated with the current Texture3DVolume.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3DVolume.Height">
      <summary>Gets the height of the volume, in pixels. </summary>
      <returns>Height of the volume, in pixels. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3DVolume.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3DVolume.Name">
      <summary>Gets and sets the name of the current Texture3DVolume.</summary>
      <returns>The name of the current Texture3DVolume.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3DVolume.ResourcePool">
      <summary>Gets the class of memory allocated for this volume. </summary>
      <returns>The class of memory allocated for this volume. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3DVolume.ResourceType">
      <summary>Gets the type of resource.</summary>
      <returns>The resource type, identifying this resource as a volume. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3DVolume.ResourceUsage">
      <summary>Gets options that identify how this resource is to be used.</summary>
      <returns>Options that identify how this resource is to be used.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3DVolume.Tag">
      <summary>Gets and sets the tag object for the current Texture3DVolume.</summary>
      <returns>
        The tag object for the current Texture3DVolume.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Texture3DVolume.Width">
      <summary>Gets the width of the volume in pixels.</summary>
      <returns>Width of the volume in pixels.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Texture3DVolume">
      <summary>Encapsulates a volume resource. </summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCollection.Item">
      <summary>Gets or sets the Texture at the spefified index.</summary>
      <param name="index">
      Index of the Texture to set or get.
    </param>
      <returns>The Texture at the specified index.
    </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureCollection">
      <summary>Represents a collection of Texture objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.ResourceUsage,Microsoft.Xna.Framework.Graphics.ResourcePool,Microsoft.Xna.Framework.Graphics.Color,Microsoft.Xna.Framework.Graphics.FilterOptions,Microsoft.Xna.Framework.Graphics.FilterOptions)">
      <summary>Creates a new instance of TextureCreationParameters.</summary>
      <param name="width">Width of the texture.</param>
      <param name="height">Height of the texture.</param>
      <param name="depth">Depth of the texture.</param>
      <param name="mipLevels">Number of mip levels in the texture.</param>
      <param name="format">The format of the texture.</param>
      <param name="resourceUsage">The resource usage of the texture.</param>
      <param name="resourcePool">The ResourcePool of the texture.</param>
      <param name="colorKey">The color key of the texture.</param>
      <param name="filter">The filter options for the texture to use.</param>
      <param name="mipFilter">The mip filter options for the texture to use.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.op_Equality(Microsoft.Xna.Framework.Graphics.TextureCreationParameters,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>
    Determines whether two instances of TextureCreationParameters are equal.
  </summary>
      <param name="left">The object to the left of the equality operator.</param>
      <param name="right">The object to the right of the equality operator.</param>
      <returns>true if left is equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Equals(System.Object)">
      <summary>
    Determines whether the specified System.Object is equal to the TextureCreationParameters.
  </summary>
      <param name="obj">
        The System.Object to compare with the current TextureCreationParameters.
      </param>
      <returns>true if the specified System.Object is equal to the current TextureCreationParameters; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>
        A hash code for the current TextureCreationParameters.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.op_Inequality(Microsoft.Xna.Framework.Graphics.TextureCreationParameters,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>
    Determines whether two instances of TextureCreationParameters are not equal.
  </summary>
      <param name="left">The object to the left of the inequality operator.</param>
      <param name="right">The object to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.ToString">
      <summary>
    Returns a System.String that represents the current TextureCreationParameters.
  </summary>
      <returns>System.String representation of the current TextureCreationParameters.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.ColorKey">
      <summary>Gets or sets the color value to replace with transparent black.</summary>
      <returns>Color value to replace with transparent black.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Default">
      <summary>Gets the default texture creation parameters.</summary>
      <returns>The default parameters.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Depth">
      <summary>Gets or sets the depth to create the Texture with.</summary>
      <returns>The depth.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Filter">
      <summary>Gets or sets a set of options controlling how the image is filtered.</summary>
      <returns>A set of options controlling how the image is filtered.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Format">
      <summary>Gets or sets the format to create a Texture with.</summary>
      <returns>The format of the Texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Height">
      <summary>
    Gets or sets the height to create a Texture with.
  </summary>
      <returns>The height.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.MipFilter">
      <summary>Gets or sets a set of options controlling how mipmaps are filtered.</summary>
      <returns>A set of options controlling how mipmaps are filtered.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.MipLevels">
      <summary>
    Gets or sets the number of mip levels to create a Texture with.
  </summary>
      <returns>The number of mip levels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.ResourcePool">
      <summary>Gets or sets the class of memory allocated into which to place the resource.</summary>
      <returns>A valid class of memory to allocate for the resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.ResourceUsage">
      <summary>Gets or sets a set of options identifying how this resource is to be used.</summary>
      <returns>A set of options identifying how this resource is to be used.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCreationParameters.Width">
      <summary>
    Gets or sets the width to create a Texture with.
  </summary>
      <returns>The width.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureCreationParameters">
      <summary>Describes the parameters to use when initializing a new instance of a texture.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.ResourceUsage,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.ResourcePool)">
      <summary>
    Initializes a new instance of the TextureCube class.
  </summary>
      <param name="graphicsDevice">
        The GraphicsDevice that will display the cube texture.
      </param>
      <param name="edgeLength">The size of the edges of all the top-level faces of the cube texture. The pixel dimensions of subsequent levels of each face will be the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by 2 results in 0 (zero), 1 will be taken instead.</param>
      <param name="numberLevels">The number of levels in each face of the cube texture. If this is zero, Direct3D will generate all cube texture sublevels down to 1Ã—1 pixels for each face for hardware that supports mipmapped cube textures. Use Texture.LevelCount to see the number of levels generated.</param>
      <param name="usage">
        The desired ResourceUsage value, or ResourceUsage.
      </param>
      <param name="format">The format of all levels in the cube texture.</param>
      <param name="resourcePool">The memory class into which the cube texture should be placed.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.TextureCube.Disposing">
      <summary>Occurs when the object is disposing.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.AddDirtyRectangle(Microsoft.Xna.Framework.Graphics.CubeMapFace,System.Nullable.{Microsoft.Xna.Framework.Rectangle})">
      <summary>Adds a dirty region to the TextureCube.</summary>
      <param name="faceType">The cube map face where the dirty region lies.</param>
      <param name="rect">A !Framework.Rectangle specifying the dirty region.  Pass null to expand the dirty region to the entire cube face.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.Dispose(System.Boolean)">
      <summary>
    Releases the unmanaged resources used by the TextureCube and optionally releases the managed resources.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
    Occurs when the TextureCube.Dispose method is called.
      </summary>
      <param name="value0">The source of the event. </param>
      <param name="value1">
        An System.EventArgs that contains no data.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.op_Equality(Microsoft.Xna.Framework.Graphics.TextureCube,Microsoft.Xna.Framework.Graphics.TextureCube)">
      <summary>
    Determines whether the specified cube textures are equal.
  </summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if left is equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.Equals(System.Object)">
      <summary>
    Determines whether the specified System.Object is equal to the TextureCube.
  </summary>
      <param name="compare">true if the specified System.Object is equal to the current TextureCube; false otherwise.
      </param>
      <returns>true if the specified System.Object is equal to the current TextureCube; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.Finalize">
      <summary>
    Allows a TextureCube to attempt to free resources and perform other cleanup operations before garbage collection reclaims the TextureCube.
  </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
      <summary>Creates a cube texture resource from a file.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture.</param>
      <returns>The texture resource that has been created on the specified graphics device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,System.Int32)">
      <summary>Creates a cube texture resource from a file, specifying the width and height of the texture in pixels.</summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource.</param>
      <param name="filename">The name of the file containing the texture. </param>
      <param name="size">Width and height of the cube texture, in pixels. </param>
      <returns>The texture resource that has been created on the specified graphics device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.FromFile(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String,Microsoft.Xna.Framework.Graphics.TextureCreationParameters)">
      <summary>Creates a cube texture resource from a file, specifying the parameters to be used in creation of the texture. </summary>
      <param name="graphicsDevice">The graphics device to use to create the texture resource. </param>
      <param name="filename">The name of the file containing the texture. </param>
      <param name="creationParameters">The parameters to use when creating this texture.</param>
      <returns>The texture resource that has been created on the specified graphics device.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetCubeMapSurface(Microsoft.Xna.Framework.Graphics.CubeMapFace,System.Int32)">
      <summary>Gets a cube texture map surface.</summary>
      <param name="faceType">The cube map face to return.</param>
      <param name="level">The level of the cube texture to get.</param>
      <returns>The specified map surface.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,`0[])">
      <summary>Returns a copy of the texture data.</summary>
      <param name="faceType">The type of face for the cube map.</param>
      <param name="data">The array into which to copy the data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,`0[],System.Int32,System.Int32)">
      <summary>Returns a copy of the texture data, specifying the start index and number of elements in the vertex buffer.</summary>
      <param name="faceType">The type of face for the cube map.</param>
      <param name="data">The array into which to copy the data.</param>
      <param name="startIndex">Index in the array at which to begin the copy.</param>
      <param name="elementCount">Number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,System.Int32,System.Nullable.{Microsoft.Xna.Framework.Rectangle},`0[],System.Int32,System.Int32)">
      <summary>Returns a copy of the texture data, specifying the start index, staring offset, number of elements, region to copy, and level where the data is to be placed.</summary>
      <param name="faceType">The type of face for the cube map.</param>
      <param name="level">The mipmap level where the data will be placed.</param>
      <param name="rect">The section of the texture where the data will be placed.  indicates the data will be copied over the entire texture.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>
        A hash code for the current TextureCube.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.op_Inequality(Microsoft.Xna.Framework.Graphics.TextureCube,Microsoft.Xna.Framework.Graphics.TextureCube)">
      <summary>
    Determines whether the specified cube textures are not equal.
  </summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.SetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,`0[])">
      <summary>Copies array data to the texture. </summary>
      <param name="faceType">The cube map face type.</param>
      <param name="data">The array of data to copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.SetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,System.Int32,System.Nullable.{Microsoft.Xna.Framework.Rectangle},`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture, specifying a start offset, mipmap level, and subregion to copy. </summary>
      <param name="faceType">The cube map face type.</param>
      <param name="level">The mipmap level where the data will be placed.</param>
      <param name="rect">The section of the texture where the data will be placed.  indicates the data will be copied over the entire texture.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.SetData``1(Microsoft.Xna.Framework.Graphics.CubeMapFace,`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Copies array data to the texture, specifying a start offset. </summary>
      <param name="faceType">The cube map face type.</param>
      <param name="data">The array of data to copy.</param>
      <param name="startIndex">Start offset in the array.</param>
      <param name="elementCount">Number of elements in the array.</param>
      <param name="options">The type of copy to perform.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureCube.ToString">
      <summary>
    Returns a System.String that represents the current TextureCube.
  </summary>
      <returns>
        A System.String that represents the current TextureCube.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.Format">
      <summary>Gets the pixel format for this texture resource.</summary>
      <returns>The pixel format of this texture resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.Height">
      <summary>Gets the height of this texture resource, in pixels.</summary>
      <returns>The height of this texture resource, in pixels.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.IsDisposed">
      <summary>
    Gets a value indicating whether the object has been disposed.
  </summary>
      <returns>true if the object has been disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.MultiSampleQuality">
      <summary>Gets the multisample quality level of this texture resource.</summary>
      <returns>
        The multisample quality level. The valid range is from 0 to one less than the value returned by GraphicsAdapter.CheckDeviceMultiSampleType.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.MultiSampleType">
      <summary>Gets the multisample technique used for this texture resource.</summary>
      <returns>The multisample technique used for this texture resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.Name">
      <summary>Gets or sets the name of this texture resource.</summary>
      <returns>The name of this texture resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.ResourcePool">
      <summary>Gets the class of memory allocated for this texture resource. </summary>
      <returns>The class of memory allocated for this texture resource. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.ResourceUsage">
      <summary>Gets a set of options identifying the behaviors of this resource. </summary>
      <returns>A set of options identifying the behaviors of this resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.Tag">
      <summary>Gets or sets the resource tags for this texture.</summary>
      <returns>Resource tags for this texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureCube.Width">
      <summary>Gets the width of this texture resource, in pixels.</summary>
      <returns>The width of this texture resource, in pixels.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureCube">
      <summary>Represents a cube texture resource.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureInformation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
      <summary>Initializes a new instance of the TextureInformation class.</summary>
      <param name="width">Width of the texture, in pixels.</param>
      <param name="height">Height of the texture, in pixels.</param>
      <param name="depth">Depth of the texture, in pixels.</param>
      <param name="mipLevels">Number of mip levels in original image.</param>
      <param name="format">Describes the data in the original image.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureInformation.op_Equality(Microsoft.Xna.Framework.Graphics.TextureInformation,Microsoft.Xna.Framework.Graphics.TextureInformation)">
      <summary>
    Determines whether two instances of TextureInformation are equal.
  </summary>
      <param name="left">The object to the left of the equality operator.</param>
      <param name="right">The object to the right of the equality operator.</param>
      <returns>true if left is equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureInformation.Equals(System.Object)">
      <summary>
    Determines whether the specified System.Object is equal to the TextureInformation.
  </summary>
      <param name="obj">
        The System.Object to compare with the current TextureInformation.
      </param>
      <returns>true if the specified System.Object is equal to the current TextureInformation; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureInformation.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>
        A hash code for the current TextureInformation.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureInformation.op_Inequality(Microsoft.Xna.Framework.Graphics.TextureInformation,Microsoft.Xna.Framework.Graphics.TextureInformation)">
      <summary>
    Determines whether two instances of TextureInformation are not equal.
  </summary>
      <param name="left">The object to the left of the inequality operator.</param>
      <param name="right">The object to the right of the inequality operator.</param>
      <returns>true if left is not equal to right; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TextureInformation.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.Depth">
      <summary>Gets or sets the depth of a texture.</summary>
      <returns>The depth of the texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.Format">
      <summary>Gets or sets the format of the texture.</summary>
      <returns>The format of the texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.Height">
      <summary>Gets or sets the height, in pixels, of a texture.</summary>
      <returns>The height, in pixels, of the texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.ImageFormat">
      <summary>Gets or sets a value that describes the data in the original image.</summary>
      <returns>A value that describes the data in the original image.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.MipLevels">
      <summary>Gets or sets the number of mip levels of a texture.</summary>
      <returns>The number of mip levels of the texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.ResourceType">
      <summary>Gets the type of this resource.</summary>
      <returns>The resource type, identifying this resource as a texture.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.TextureInformation.Width">
      <summary>Gets or sets the width, in pixels, of a texture.</summary>
      <returns>The width, in pixels, of the texture.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureInformation">
      <summary>Encapsulates information describing texture resources.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TooManyOperationsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TooManyOperationsException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.TooManyOperationsException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TooManyOperationsException">
      <summary>The exception that is thrown when the application is requesting more texture-filtering operations than the device supports.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedAlphaArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedAlphaArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedAlphaArgumentException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.UnsupportedAlphaArgumentException">
      <summary>The exception that is thrown when the device does not support a specified texture-blending argument for the alpha channel.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedAlphaOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedAlphaOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedAlphaOperationException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.UnsupportedAlphaOperationException">
      <summary>The exception that is thrown when the device does not support a specified texture-blending operation for the alpha channel.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedColorArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedColorArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedColorArgumentException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.UnsupportedColorArgumentException">
      <summary>The exception that is thrown when the device does not support a specified texture-blending argument for color values. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedColorOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedColorOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedColorOperationException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.UnsupportedColorOperationException">
      <summary>The exception that is thrown when the device does not support a specified texture-blending operation for color values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedFactorValueException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedFactorValueException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedFactorValueException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.UnsupportedFactorValueException">
      <summary>The exception that is thrown when the device does not support the specified texture factor value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedTextureFilterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedTextureFilterException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.UnsupportedTextureFilterException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.UnsupportedTextureFilterException">
      <summary>The exception that is thrown when the device does not support the specified texture filter.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,Microsoft.Xna.Framework.Graphics.ResourceUsage,Microsoft.Xna.Framework.Graphics.ResourcePool)">
      <summary>
    Initializes a new instance of the VertexBuffer class, specifying the size of the buffer, in bytes.
  </summary>
      <param name="graphicsDevice">The graphics device to associate with this vertex buffer.</param>
      <param name="sizeInBytes">The size, in bytes, of this vertex buffer.</param>
      <param name="usage">A set of options identifying how this resource is to be used.</param>
      <param name="resourcePool">A valid memory class to place the resource into.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Type,System.Int32,Microsoft.Xna.Framework.Graphics.ResourceUsage,Microsoft.Xna.Framework.Graphics.ResourcePool)">
      <summary>
    Initializes a new instance of the VertexBuffer class, specifying the type and number of vertices in the buffer.
  </summary>
      <param name="graphicsDevice">The graphics device to associate with this vertex buffer.</param>
      <param name="vertexType">The type of vertices in this vertex buffer.</param>
      <param name="elementCount">The number of elements in this vertex buffer.</param>
      <param name="usage">A set of options identifying how this resource is to be used.</param>
      <param name="resourcePool">A valid memory class to place the resource into.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.VertexBuffer.Disposing">
      <summary>
        Occurs when VertexBuffer.Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime (CLR).
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the VertexBuffer.Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.op_Equality(Microsoft.Xna.Framework.Graphics.VertexBuffer,Microsoft.Xna.Framework.Graphics.VertexBuffer)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
      The System.Object to compare with the current VertexBuffer.
    </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(System.Int32,`0[],System.Int32,System.Int32,System.Int32)">
      <summary>Returns a copy of the vertex buffer data, specifying the start index, starting offset, number of elements, and size of the vertex buffer elements.</summary>
      <param name="offsetInBytes">Starting offset.</param>
      <param name="data">The array into which to copy the vertex buffer data.</param>
      <param name="startIndex">Index of the element in the array at which to start copying.</param>
      <param name="elementCount">Number of elements in the array.</param>
      <param name="vertexStride">Size, in bytes, of an element in the vertex buffer.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(`0[])">
      <summary>Returns a copy of the vertex buffer data.</summary>
      <param name="data">The array into which to copy the vertex buffer data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetData``1(`0[],System.Int32,System.Int32)">
      <summary>Returns a copy of the vertex buffer data, specifying the start index and number of elements in the vertex buffer.</summary>
      <param name="data">The array into which to copy the vertex buffer data.</param>
      <param name="startIndex">Index of the element in the array at which to start copying.</param>
      <param name="elementCount">Number of elements in the array.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexBuffer,Microsoft.Xna.Framework.Graphics.VertexBuffer)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(System.Int32,`0[],System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Sets the vertex buffer data, specifying the start index, staring offset, number of elements, and size of the vertex buffer elements.</summary>
      <param name="offsetInBytes">Starting offset.</param>
      <param name="data">The array from which to copy the vertex buffer data.</param>
      <param name="startIndex">Index of the element in the array at which to start copying.</param>
      <param name="elementCount">Number of elements in the array.</param>
      <param name="vertexStride">Size, in bytes, of an element in the vertex buffer.</param>
      <param name="options">Options specifying how to lock the data during the copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(`0[])">
      <summary>Sets the vertex buffer data.</summary>
      <param name="data">The array from which to copy the vertex buffer data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.SetData``1(`0[],System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.SetDataOptions)">
      <summary>Sets the vertex buffer data, specifying the start index and number of elements in the vertex buffer.</summary>
      <param name="data">The array from which to copy the vertex buffer data.</param>
      <param name="startIndex">Index of the element in the array at which to start copying.</param>
      <param name="elementCount">Number of elements in the array.</param>
      <param name="options">Options specifying how to lock the data during the copy.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexBuffer.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.Name">
      <summary>Returns the name of this vertex buffer.</summary>
      <returns>Name of this vertex buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.ResourcePool">
      <summary>
    Gets the class of memory allocated to this VertexBuffer resource.
  </summary>
      <returns>
        The class of memory allocated to this VertexBuffer resource.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.ResourceType">
      <summary>Gets the type of this resource.</summary>
      <returns>The resource type, identifying this resource as a vertex buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.ResourceUsage">
      <summary>Gets a set of options identifying the behaviors of this resource.</summary>
      <returns>A set of options identifying the behaviors of this resource.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.SizeInBytes">
      <summary>Gets the size, in bytes, of this vertex buffer.</summary>
      <returns>The size, in bytes, of the vertex buffer.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexBuffer.Tag">
      <summary>Returns the resource tags for this vertex buffer.</summary>
      <returns>Resource tags of this vertex buffer.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexBuffer">
      <summary>Manipulates vertex buffer resources.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.VertexElement[])">
      <summary>    Initializes a new instance of the VertexDeclaration class.
</summary>
      <param name="graphicsDevice">The GraphicsDevice associated with the vertex elements.</param>
      <param name="elements">An array of vertex elements.</param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Disposing">
      <summary>
        Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.op_Equality(Microsoft.Xna.Framework.Graphics.VertexDeclaration,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current VertexDeclaration.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetVertexElements">
      <summary>Gets the vertex shader declaration.</summary>
      <returns>The array of vertex elements that make up the vertex shader declaration.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetVertexStrideSize(Microsoft.Xna.Framework.Graphics.VertexElement[],System.Int32)">
      <summary>Gets the size of a vertex from the vertex declaration. </summary>
      <param name="elements">The vertex declaration. </param>
      <param name="stream">
        The zero-based stream index.
      </param>
      <returns>The vertex declaration size, in bytes. </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GetVertexStrideSize(System.Int32)">
      <summary>Gets the size of a vertex from the vertex declaration. </summary>
      <param name="stream">The zero-based stream index.</param>
      <returns>The vertex declaration size, in bytes.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexDeclaration,Microsoft.Xna.Framework.Graphics.VertexDeclaration)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexDeclaration.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with this vertex declaration.</summary>
      <returns>The GraphicsDevice associated with this vertex declaration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Name">
      <summary>Returns the name of this vertex declaration.</summary>
      <returns>The name of this vertex declaration.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexDeclaration.Tag">
      <summary>Returns the resource tags for this vertex declaration.</summary>
      <returns>The resource tags for this vertex declaration.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexDeclaration">
      <summary>Represents a vertex declaration.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.#ctor(System.Int16,System.Int16,Microsoft.Xna.Framework.Graphics.VertexElementFormat,Microsoft.Xna.Framework.Graphics.VertexElementMethod,Microsoft.Xna.Framework.Graphics.VertexElementUsage,System.Byte)">
      <summary>Initializes a new instance of the VertexElement class.</summary>
      <param name="stream">Stream number (or index) to use.</param>
      <param name="offset">Offset (if any) from the beginning of the stream to the beginning of the vertex data.</param>
      <param name="declType">One of several predefined types that define the vertex data size.</param>
      <param name="declMethod">The tessellator processing method.  These methods determine how the tessellator interprets/operates on the vertex data.</param>
      <param name="declUsage">The intended use of the vertex data.</param>
      <param name="usageIndex">Modifies the usage data to allow the user to specify multiple usage types.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.op_Equality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">
        The System.Object to compare with the current VertexElement.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexElement,Microsoft.Xna.Framework.Graphics.VertexElement)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexElement.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.Offset">
      <summary>Retrieves or sets the offset (if any) from the beginning of the stream to the beginning of the vertex data.</summary>
      <returns>Offset, in bytes, to the start of the vertex data.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.Stream">
      <summary>Retrieves or sets the stream number (or index) to use.</summary>
      <returns>Stream number (or index) to use.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.UsageIndex">
      <summary>Modifies the usage data to allow the user to specify multiple usage types.</summary>
      <returns>Byte that represents the usage index.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementFormat">
      <summary>Gets or sets the format of this vertex element.</summary>
      <returns>The format of this vertex element.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementMethod">
      <summary>Gets or sets a value indicating which vertex data to calculate during tessellation.</summary>
      <returns>A value indicating which vertex data to calculate during tessellation.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexElement.VertexElementUsage">
      <summary>Gets or sets a value describing how the vertex element is to be used.</summary>
      <returns>A value describing how the vertex element is to be used.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElement">
      <summary>Defines input vertex data to the pipeline.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>Initializes a new instance of the VertexPositionColor class.</summary>
      <param name="position">The position of the vertex.</param>
      <param name="color">The color of the vertex.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColor.VertexElements">
      <summary>An array of two vertex elements describing the position, followed by the color, of this vertex.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.op_Equality(Microsoft.Xna.Framework.Graphics.VertexPositionColor,Microsoft.Xna.Framework.Graphics.VertexPositionColor)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">
        The System.Object to compare with the current VertexPositionColor.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexPositionColor,Microsoft.Xna.Framework.Graphics.VertexPositionColor)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColor.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionColor.Color">
      <summary>Gets or sets the vertex color.</summary>
      <returns>The vertex color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionColor.Position">
      <summary>Gets or sets the vertex position.</summary>
      <returns>Vector containing the transformed position.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionColor.SizeInBytes">
      <summary>Gets the size of the VertexPositionColor class.</summary>
      <returns>The size of the vertex, in bytes.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexPositionColor">
      <summary>Describes a custom vertex format structure that contains position and color information. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Color)">
      <summary>
    Initializes a new instance of the VertexPositionColorTexture class.
  </summary>
      <param name="position">Position of the vertex.</param>
      <param name="textureCoordinate">Texture coordinate of the vertex.</param>
      <param name="color">Color of the vertex.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.VertexElements">
      <summary>An array of three vertex elements describing the position, texture coordinate, and color of this vertex.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.op_Equality(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture,Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">
        The System.Object to compare with the current VertexPositionColorTexture.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture,Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.Color">
      <summary>Gets or sets the vertex color.</summary>
      <returns>The vertex color.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.Position">
      <summary>Gets or sets the vertex position.</summary>
      <returns>Vector containing the transformed position.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.SizeInBytes">
      <summary>
    Gets the size of the VertexPositionColorTexture class.
  </summary>
      <returns>The size of the vertex, in bytes.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture.TextureCoordinate">
      <summary>Gets or sets the texture coordinates.</summary>
      <returns>Vector that contains the texture coordinates.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexPositionColorTexture">
      <summary>Describes a custom vertex format structure that contains position, color, and one set of texture coordinates.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2)">
      <summary>
    Initializes a new instance of the VertexPositionNormalTexture class.
  </summary>
      <param name="position">Position of the vertex.</param>
      <param name="normal">The vertex normal.</param>
      <param name="textureCoordinate">The texture coordinate.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.VertexElements">
      <summary>An array of three vertex elements describing the position, normal, and texture coordinate of this vertex.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.op_Equality(Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture,Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">
        The System.Object to compare with the current VertexPositionNormalTexture.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture,Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.Normal">
      <summary>Gets or sets the vertex normal.</summary>
      <returns>Vector that contains the vertex normal.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.Position">
      <summary>Gets or sets the vertex position.</summary>
      <returns>Vector containing the transformed position.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.SizeInBytes">
      <summary>
    Gets the size of the VertexPositionNormalTexture class.
  </summary>
      <returns>The size of the vertex, in bytes.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture.TextureCoordinate">
      <summary>Gets or sets the texture coordinates.</summary>
      <returns>Vector that contains the texture coordinates.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture">
      <summary>Describes a custom vertex format structure that contains position, normal data, and one set of texture coordinates.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2)">
      <summary>
    Initializes a new instance of the VertexPositionTexture class.
  </summary>
      <param name="position">Position of the vertex.</param>
      <param name="textureCoordinate">Texture coordinate of the vertex.</param>
    </member>
    <member name="F:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.VertexElements">
      <summary>An array of two vertex elements describing the position, followed by the texture coordinate, of this vertex.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.op_Equality(Microsoft.Xna.Framework.Graphics.VertexPositionTexture,Microsoft.Xna.Framework.Graphics.VertexPositionTexture)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">
        The System.Object to compare with the current VertexPositionTexture.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexPositionTexture,Microsoft.Xna.Framework.Graphics.VertexPositionTexture)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.Position">
      <summary>Gets or sets the vertex position.</summary>
      <returns>Vector containing the transformed position.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.SizeInBytes">
      <summary>
    Gets the size of the VertexPositionTexture class.
  </summary>
      <returns>The size of the vertex, in bytes.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexPositionTexture.TextureCoordinate">
      <summary>Gets or sets the texture coordinates.</summary>
      <returns>Vector that contains the texture coordinates.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexPositionTexture">
      <summary>Describes a custom vertex format structure that contains position and one set of texture coordinates.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32[])">
      <summary>
    Initializes a new instance of the VertexShader class.
  </summary>
      <param name="graphicsDevice">The GraphicsDevice to associate with this VertexShader.</param>
      <param name="functionToken">An array of tokens that represents the vertex shader, including embedded debug and symbol table information.
    </param>
    </member>
    <member name="E:Microsoft.Xna.Framework.Graphics.VertexShader.Disposing">
      <summary>
        Occurs when Dispose is called or when this object is finalized and collected by the garbage collector of the Microsoft .NET common language runtime.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.Dispose(System.Boolean)">
      <summary>
        Immediately releases the unmanaged resources used by this object.
      </summary>
      <param name="">true to release both managed and unmanaged resources; false to release only unmanaged resources.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.Dispose">
      <summary>Immediately releases the unmanaged resources used by this object.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.raise_Disposing(System.Object,System.EventArgs)">
      <summary>
        Raises the Disposing event when called from within a derived class.
      </summary>
      <param name="value0">Invoking object reference; should be this object.</param>
      <param name="value1">Arguments to pass to the event handler.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.op_Equality(Microsoft.Xna.Framework.Graphics.VertexShader,Microsoft.Xna.Framework.Graphics.VertexShader)">
      <summary>Compares two objects to determine whether they are the same.</summary>
      <param name="left">Object to the left of the equality operator.</param>
      <param name="right">Object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">
        The System.Object to compare with the current VertexShader.
      </param>
      <returns>true if the objects are the same; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.Finalize">
      <summary>
        Allows this object to attempt to free resources and perform other cleanup operations before garbage collection reclaims the object.
      </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.GetFunction">
      <summary>Gets a buffer containing the shader data.</summary>
      <returns>The shader data.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.op_Inequality(Microsoft.Xna.Framework.Graphics.VertexShader,Microsoft.Xna.Framework.Graphics.VertexShader)">
      <summary>Compares two objects to determine whether they are different.</summary>
      <param name="left">Object to the left of the inequality operator.</param>
      <param name="right">Object to the right of the inequality operator.</param>
      <returns>true if the objects are different; false otherwise.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexShader.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexShader.GraphicsDevice">
      <summary>Gets the GraphicsDevice associated with this VertexShader. </summary>
      <returns>The GraphicsDevice associated with this VertexShader.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexShader.IsDisposed">
      <summary>Gets a value that indicates whether the object is disposed.</summary>
      <returns>true if the object is disposed; false otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexShader.Name">
      <summary>Gets the name of this vertex shader.</summary>
      <returns>The name of this vertex shader.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexShader.Tag">
      <summary>Gets the resource tags for this vertex shader.</summary>
      <returns>The resource tags for this vertex shader.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexShader">
      <summary>Encapsulates the functionality of a vertex shader.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexStream.SetFrequencyOfIndexData(System.Int32)">
      <summary>Sets the stream source frequency divider value for the index data. This may be used to draw several instances of geometry.</summary>
      <param name="frequency">Frequency of index data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexStream.SetFrequencyOfInstanceData(System.Int32)">
      <summary>Sets the stream source frequency divider value for the instance data. This may be used to draw several instances of geometry.</summary>
      <param name="frequency">Frequency of instance data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexStream.SetFrequency(System.Int32)">
      <summary>Sets the stream source frequency divider value. This may be used to draw several instances of geometry.</summary>
      <param name="frequency">Frequency divider value.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.VertexStream.SetSource(Microsoft.Xna.Framework.Graphics.VertexBuffer,System.Int32,System.Int32)">
      <summary>Sets the source of the vertex stream.</summary>
      <param name="vb">The vertex buffer source.</param>
      <param name="offsetInBytes">The starting offset.</param>
      <param name="vertexStride">The size, in bytes, of the elements in the vertex buffer.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexStream.OffsetInBytes">
      <summary>Gets the starting offset of the vertex stream.</summary>
      <returns>Starting offset of the vertex stream.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexStream.VertexBuffer">
      <summary>Gets the vertex buffer associated with this vertex stream.</summary>
      <returns>Vertex buffer associated with this vertex stream.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexStream.VertexStride">
      <summary>Gets the size, in bytes, of the elements in this vertex stream.</summary>
      <returns>Size, in bytes, of the elements in this vertex stream.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexStream">
      <summary>Represents a vertex stream.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.VertexStreamCollection.Item">
      <summary>Returns the VertexStream at the specified index.</summary>
      <param name="index">Index of the VertexStream to return.</param>
      <returns>The vertex stream at the requested index.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexStreamCollection">
      <summary>Collection of VertexStream objects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.Project(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Projects a 3D vector from object space into screen space.
  </summary>
      <param name="source">The vector to project.</param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <param name="world">The world matrix.</param>
      <returns>The vector in screen space.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.Viewport.Unproject(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
      <summary>
    Projects a vector from screen space into object space.
  </summary>
      <param name="source">The vector to project.</param>
      <param name="projection">The projection matrix.</param>
      <param name="view">The view matrix.</param>
      <param name="world">The world matrix.</param>
      <returns>The vector in object space.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Height">
      <summary>Gets or sets the height dimension of the viewport on the render-target surface, in pixels.</summary>
      <returns>The height, in pixels, of the viewport to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MaxDepth">
      <summary>Gets or sets the maximum depth of the clip volume.</summary>
      <returns>The maximum depth of the clipping volume.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.MinDepth">
      <summary>Gets or sets the minimum depth of the clip volume.</summary>
      <returns>The minimum depth of the clipping volume.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Width">
      <summary>Gets or sets the width dimension of the viewport on the render-target surface, in pixels.</summary>
      <returns>The width, in pixels, of the viewport to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.X">
      <summary>Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.</summary>
      <returns>The upper-left corner of the viewport to set or get.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.Viewport.Y">
      <summary>Gets or sets the pixel coordinate of the upper-left corner of the viewport on the render-target surface.</summary>
      <returns>The upper-left corner of the viewport to set or get.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Viewport">
      <summary>Defines the window dimensions of a render-target surface onto which a 3D volume projects.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.WasStillDrawingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.WasStillDrawingException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.WasStillDrawingException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.WasStillDrawingException">
      <summary>The exception that is thrown when the previous blit operation that is transferring information to or from this surface is incomplete. </summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.WrongTextureFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.WrongTextureFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.WrongTextureFormatException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.WrongTextureFormatException">
      <summary>The exception that is thrown when the pixel format of the texture surface is not valid.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.XFileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of this class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">A message that describes the error.</param>
      <param name="inner">
        The exception that is the cause of the current exception. If the inner parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.
      </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.XFileNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of this class with a specified error message.</summary>
      <param name="message">A message that describes the error.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.XFileNotFoundException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.XFileNotFoundException">
      <summary>The exception that is thrown when a valid handle could not be found for the specified file.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.BlendFunction">
      <summary>Defines the supported blend operations.</summary>
      <param name="Add">The result is the destination added to the source.Result = Source + Destination</param>
      <param name="Max">The result is the maximum of the source and destination.Result = max(Source, Destination)</param>
      <param name="Min">The result is the minimum of the source and destination.Result = min(Source, Destination)</param>
      <param name="RevSubtract">The result is the source subtracted from the destination.Result = Destinationâˆ’Source</param>
      <param name="Subtract">The result is the destination subtracted from the source.Result = Sourceâˆ’Destination</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Blend">
      <summary>Defines the supported color blend. </summary>
      <param name="BlendFactor">Constant color blending factor used by the frame-buffer blender.</param>
      <param name="BothInverseSourceAlpha">
        Source blend factor is (1 âˆ’ As, 1 âˆ’ As, 1 âˆ’ As, 1 âˆ’ As), and destination blend factor is (As, As, As, As); the destination blend selection is overridden. This blend mode is supported only for the RenderState.SourceBlend render state.
    </param>
      <param name="BothSourceAlpha">
      This mode is obsolete. For DirectX 6 and later, you can achieve the same effect by setting the source and destination blend factors to SourceAlpha and InvSourceAlpha in separate calls.
    </param>
      <param name="DestinationAlpha">
      The DestinationAlpha blend factor is (Ad, Ad, Ad, Ad), where Ad is the destination alpha value.
    </param>
      <param name="DestinationColor">
      The DestinationColor blend factor is (Rd, Gd, Bd, Ad), where R, G, B, and A respectively stand for red, green, blue, and alpha destination values.
    </param>
      <param name="InverseBlendFactor">
      Inverted constant color-blending factor used by the frame-buffer blender. This blend mode is supported only if GraphicsDeviceCapabilities.BlendCapabilities.SupportsBlendFactor is true in the GraphicsDeviceCapabilities.SourceBlendCapabilities or GraphicsDeviceCapabilities.DestinationBlendCapabilities properties.
    </param>
      <param name="InverseDestinationAlpha">
      The InvDestinationAlpha blend factor is (1 âˆ’ Ad, 1 âˆ’ Ad, 1 âˆ’ Ad, 1 âˆ’ Ad), where Ad is the alpha destination value.
  </param>
      <param name="InverseDestinationColor">
    The InvDestinationColor blend factor is (1 âˆ’ Rd, 1 âˆ’ Gd, 1 âˆ’ Bd, 1 âˆ’ Ad), where Rd, Gd, Bd, and Ad respectively stand for the red, green, blue, and alpha destination values.
</param>
      <param name="InverseSourceAlpha">
  The InvSourceAlpha blend factor is (1 âˆ’ As, 1 âˆ’ As, 1 âˆ’ As, 1 âˆ’ As), where As is the alpha destination value.
      </param>
      <param name="InverseSourceColor">
        The InvSourceColor blend factor is (1 âˆ’ Rs, 1 âˆ’ Gs, 1 âˆ’ Bs, 1 âˆ’ As) where R, G, B, and A respectively stand for the red, green, blue, and alpha destination values.
      </param>
      <param name="One">
        The One blend factor is (1, 1, 1, 1).
      </param>
      <param name="SourceAlpha">
        The SourceAlpha blend factor is (As, As, As, As), where As is the alpha source value.
      </param>
      <param name="SourceAlphaSat">
        The SourceAlphaSat blend factor is (f, f, f, 1), where f = min(A, 1 âˆ’ Ad).
      </param>
      <param name="SourceColor">
        The SourceColor blend factor is (Rs, Gs, Bs, As), where R, G, B, and A respectively stand for the red, green, blue, and alpha source values.
      </param>
      <param name="Zero">
        The Zero blend factor is (0, 0, 0, 0).
      </param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ClearOptions">
      <summary>Specifies the buffer to use when calling GraphicsDevice.Clear.</summary>
      <param name="DepthBuffer">A depth buffer.</param>
      <param name="Stencil">A stencil buffer.</param>
      <param name="Target">A render target.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ColorWriteEnable">
      <summary>Defines values that are used to specify a channel in a RenderState.</summary>
      <param name="All">All buffer channels.</param>
      <param name="Alpha">Alpha channel of a buffer.</param>
      <param name="Blue">Blue channel of a buffer.</param>
      <param name="Green">Green channel of a buffer.</param>
      <param name="None">No channel selected.</param>
      <param name="Red">Red channel of a buffer.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompareFunction">
      <summary>Defines the supported compare functions in the RenderState class type.</summary>
      <param name="Always">Always pass the test.</param>
      <param name="Equal">Accept the new pixel if its value is equal to the value of the current pixel.</param>
      <param name="Greater">Accept the new pixel if its value is greater than the value of the current pixel. </param>
      <param name="GreaterEqual">Accept the new pixel if its value is greater than or equal to the value of the current pixel.</param>
      <param name="Less">Accept the new pixel if its value is less than the value of the current pixel.</param>
      <param name="LessEqual">Accept the new pixel if its value is less than or equal to the value of the current pixel. </param>
      <param name="Never">Always fail the test.</param>
      <param name="NotEqual">Accept the new pixel if its value does not equal the value of the current pixel.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompilerIncludeHandlerType">
      <summary>Defines an include file.</summary>
      <param name="Local">A local resource.</param>
      <param name="System">A system resource.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CompilerOptions">
      <summary>Compiler options are used by the effect system to optimize shader and effect code compilation.</summary>
      <param name="AvoidFlowControl">Hints to the compiler to avoid using flow-control instructions.</param>
      <param name="Debug">Inserts debug file name, line numbers, and type and symbol information during shader compile.</param>
      <param name="ForcePixelShaderSoftwareNoOptimizations">Forces the compiler to compile against the next highest available software target for pixel shaders. This flag also turns optimizations off and debugging on.</param>
      <param name="ForceVertexShaderSoftwareNoOptimizations">Forces the compiler to compile against the next highest available software target for vertex shaders. This flag also turns optimizations off and debugging on.</param>
      <param name="None">No options specified.</param>
      <param name="NoPreShader">Disables preshaders. The compiler will not pull out static expressions for evaluation on the host CPU. Additionally, the compiler will not loft any expressions when compiling standalone functions.</param>
      <param name="NotCloneable">Indicates the effect will be non-cloneable and will not contain any shader binary data. Setting this flag reduces effect memory usage by about 50 percent because it eliminates the need for the effect system to keep a copy of the shaders in memory.</param>
      <param name="PackMatrixColumnMajor">Unless explicitly specified, matrices will be packed in column major order (each vector will be in a single column) when passed to and from the shader. This is generally more efficient because it allows vector-matrix multiplication to be performed using a series of dot products.</param>
      <param name="PackMatrixRowMajor">Unless explicitly specified, matrices will be packed in row major order (each vector will be in a single row) when passed to or from the shader.</param>
      <param name="PartialPrecision">Forces all computations in the resulting shader to occur at partial precision. This may result in faster evaluation of shaders on some hardware.</param>
      <param name="PreferFlowControl">Hints to the compiler to prefer using flow-control instructions.</param>
      <param name="SkipOptimization">Instructs the compiler to skip optimization steps during code generation. Unless you are trying to isolate a problem in your code and you suspect the compiler, using this option is not recommended.</param>
      <param name="SkipValidation">Do not validate the generated code against known capabilities and constraints. This option is recommended only when compiling shaders that are known to work (that is, shaders that have compiled before without this option). Shaders are always validated by the runtime before they are set to the device.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CreateOptions">
      <summary>Options to use when creating a device.</summary>
      <param name="HardwareVertexProcessing">Specifies hardware vertex processing.</param>
      <param name="MixedVertexProcessing">Specifies mixed vertex processing (both software and hardware).</param>
      <param name="None">No options specified.</param>
      <param name="NoWindowChanges">Indicates to the Microsoft Direct3D runtime not to alter the focus window in any way. Use with caution! The burden of supporting focus management events (ALT+TAB, and so on) falls on the application, and appropriate responses (switching display mode, and so on) should be coded.</param>
      <param name="SinglePrecision">Forces single-precision processing, setting the floating-point unit to single-precision round-to-nearest mode.</param>
      <param name="SingleThreaded">Forces single-threaded processing.</param>
      <param name="SoftwareVertexProcessing">Specifies software vertex processing.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CubeMapFace">
      <summary>Defines the faces of a cube map in the TextureCube class type.</summary>
      <param name="NegativeX">Negative x-face of the cube map.</param>
      <param name="NegativeY">Negative y-face of the cube map.</param>
      <param name="NegativeZ">Negative z-face of the cube map.</param>
      <param name="PositiveX">Positive x-face of the cube map.</param>
      <param name="PositiveY">Positive y-face of the cube map.</param>
      <param name="PositiveZ">Positive z-face of the cube map.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.CullMode">
      <summary>Defines supported culling modes.</summary>
      <param name="CullClockwiseFace">Cull back faces with clockwise vertices. </param>
      <param name="CullCounterClockwiseFace">Cull back faces with counterclockwise vertices. </param>
      <param name="None">Do not cull back faces. </param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DepthFormat">
      <summary>Defines depth buffer formats.</summary>
      <param name="Depth15Stencil1">A 16-bit depth-buffer bit depth in which 15 bits are reserved for the depth channel and 1 bit is reserved for the stencil channel.</param>
      <param name="Depth16">A 16-bit depth-buffer bit depth.</param>
      <param name="Depth16Lockable">A 16-bit depth-buffer bit depth.</param>
      <param name="Depth24">A 32-bit depth-buffer bit depth that uses 24 bits for the depth channel.</param>
      <param name="Depth24Stencil4">A 32-bit depth-buffer bit depth that uses 24 bits for the depth channel and 4 bits for the stencil channel.</param>
      <param name="Depth24Stencil8">A nonlockable format that contains 24 bits of depth (in a 24-bit floating-point format âˆ’ 20E4) and 8 bits of stencil. </param>
      <param name="Depth24Stencil8Single">A 32-bit depth-buffer bit depth that uses 24 bits for the depth channel and 8 bits for the stencil channel.</param>
      <param name="Depth32">a 32-bit depth-buffer bit depth.</param>
      <param name="Depth32SingleLockable">A lockable format in which the depth value is represented as a standard IEEE floating-point number.</param>
      <param name="Unknown">Format is unknown.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DeviceType">
      <summary>Specifies a device type.</summary>
      <param name="Hardware">Hardware rasterization. Shading is done with software, hardware, or mixed transform and lighting.</param>
      <param name="NullReference">A null version of the reference rasterizer.</param>
      <param name="Reference">Microsoft Direct3D features are implemented in software; however, the reference rasterizer uses special CPU instructions whenever possible.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.DisplacementMap">
      <summary>Identifies a texture sampler stage.</summary>
      <param name="Sampler">Internal constant used by the texture sampler in the tessellator.</param>
      <param name="VertexTextureSampler0">Texture sampler stage 0.</param>
      <param name="VertexTextureSampler1">Texture sampler stage 1.</param>
      <param name="VertexTextureSampler2">Texture sampler stage 2.</param>
      <param name="VertexTextureSampler3">Texture sampler stage 3.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterClass">
      <summary>Defines constants that can be used as parameters.</summary>
      <param name="MatrixColumns">Constant is a column major matrix.</param>
      <param name="MatrixRows">Constant is a row major matrix.</param>
      <param name="Object">Constant is either a texture, a shader, or a string.</param>
      <param name="Scalar">Constant is a scalar.</param>
      <param name="Struct">Constant is a structure.</param>
      <param name="Vector">Constant is a vector.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectParameterType">
      <summary>Defines types that can be used for parameters.</summary>
      <param name="Bool">
        Parameter is a Boolean. Any nonzero value passed in will be mapped to 1 (TRUE) before being written into the constant table; otherwise, the value will be set to 0 in the constant table.
      </param>
      <param name="Int32">
        Parameter is an integer. Any floating-point values passed in will be rounded off (to zero decimal places) before being written into the constant table.
      </param>
      <param name="PixelShader">Parameter is a pixel shader.</param>
      <param name="Sampler">Parameter is a sampler.</param>
      <param name="Sampler1D">Parameter is a 1D sampler.</param>
      <param name="Sampler2D">Parameter is a 2D sampler.</param>
      <param name="Sampler3D">Parameter is a 3D sampler.</param>
      <param name="SamplerCube">Parameter is a cube sampler.</param>
      <param name="Single">Parameter is a floating-point number.</param>
      <param name="String">Parameter is a string.</param>
      <param name="Texture">Parameter is a texture.</param>
      <param name="Texture1D">Parameter is a 1D texture.</param>
      <param name="Texture2D">Parameter is a 2D texture.</param>
      <param name="Texture3D">Parameter is a 3D texture.</param>
      <param name="TextureCube">Parameter is a cube texture.</param>
      <param name="VertexShader">Parameter is a vertex shader.</param>
      <param name="Void">Parameter is a void pointer.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.EffectStateOptions">
      <summary>Defines options for saving and creating effects.</summary>
      <param name="Default">Specifies default options for saving and creating effects.</param>
      <param name="DoNotSaveSamplerState">A state block saves state when calling Effect.Begin and restores state when calling Effect.End.</param>
      <param name="DoNotSaveShaderState">A state block saves state (except shaders and shader constants) when calling Effect.Begin and restores state when calling Effect.End.</param>
      <param name="DoNotSaveState">No state is saved when calling Effect.Begin or restored when calling Effect.End. </param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.FillMode">
      <summary>Defines constants that describe the fill mode.</summary>
      <param name="Point">Fill points.</param>
      <param name="Solid">Fill solids.</param>
      <param name="WireFrame">Fill wireframes.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.FilterOptions">
      <summary>Defines modes describing how to filter an image when it is minified or magnified to fit a set of vertices.</summary>
      <param name="Box">Each pixel is computed by averaging a 2Ã—2(Ã—2) box of pixels from the source image. This filter works only when the dimensions of the destination are half those of the source, as is the case with mipmaps.</param>
      <param name="Dither">Resulting image must be dithered using a 4Ã—4 ordered dither algorithm.  This happens when converting from one format to another.
      </param>
      <param name="DitherDiffusion">Do diffuse dithering on the image when changing from one format to another.</param>
      <param name="Linear">Bilinear interpolation filtering is used as a texture magnification or minification filter. A weighted average of a 2Ã—2 area of texels surrounding the desired pixel is used. The texture filter to use between mipmap levels is trilinear mipmap interpolation. The rasterizer interpolates pixel color in a linear manner, using the texels of the two nearest textures.</param>
      <param name="Mirror">Same as specifying the MirrorU, MirrorV, and MirrorW flags. This flag is always used internally for this function.</param>
      <param name="MirrorU">Pixels off the edge of the texture on the u-axis should be mirrored, not wrapped.</param>
      <param name="MirrorV">Pixels off the edge of the texture on the v-axis should be mirrored, not wrapped.</param>
      <param name="MirrorW">Pixels off the edge of the texture on the w-axis should be mirrored, not wrapped.</param>
      <param name="None">Mipmapping disabled. The rasterizer uses the magnification filter instead.</param>
      <param name="Point">Each destination pixel is computed by sampling the nearest pixel from the source image.</param>
      <param name="Srgb">Same as specifying SrgbIn | SrgbOut.</param>
      <param name="SrgbIn">Input data is in sRGB (gamma 2.2) color space.</param>
      <param name="SrgbOut">Output data is in sRGB (gamma 2.2) color space.</param>
      <param name="Triangle">Each pixel in the source image contributes equally to the destination image. This is the slowest of the filters.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.FogMode">
      <summary>Defines constants that describe the fog mode.</summary>
      <param name="Exponent">Fog effect intensifies in a linear manner between the start and end points, according to the following formula.</param>
      <param name="ExponentSquared">Fog effect intensifies exponentially with the square of the distance, according to the following formula.</param>
      <param name="Linear">Fog effect intensifies exponentially, according to the following formula.</param>
      <param name="None">No fog effect.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.GraphicsDeviceStatus">
      <summary>Status of the device.</summary>
      <param name="Lost">The device has been lost.</param>
      <param name="Normal">The device is normal.</param>
      <param name="NotReset">The device has not been reset.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ImageFileFormat">
      <summary>Defines the supported image file formats.</summary>
      <param name="Bitmap">Microsoft Windows bitmap file format.</param>
      <param name="Dds">DirectDrawSurface file format.</param>
      <param name="Dib">Microsoft Windows bitmap file format.</param>
      <param name="Hdr">High dynamic-range file format.</param>
      <param name="Jpg">Joint Photographic Experts Group (JPEG) compressed file format. </param>
      <param name="Pfm">Portable float map file format.</param>
      <param name="Png">Portable Network Graphics file format.</param>
      <param name="Ppm">Portable pixmap file format.</param>
      <param name="Tga">Truevision Targa image file format.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.IndexElementSize">
      <summary>Defines the bit size of an index buffer.</summary>
      <param name="SixteenBits">Sixteen bits.</param>
      <param name="ThirtyTwoBits">Thirty-two bits.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.MultiSampleType">
      <summary>Defines the levels of full-scene multisampling that the device can apply.</summary>
      <param name="SixteenSamples">Enables 16 levels of full-scene multisampling.</param>
      <param name="FifteenSamples">Enables 15 levels of full-scene multisampling.</param>
      <param name="FourteenSamples">Enables 14 levels of full-scene multisampling.</param>
      <param name="ThirteenSamples">Enables 13 levels of full-scene multisampling.</param>
      <param name="TwelveSamples">Enables 12 levels of full-scene multisampling.</param>
      <param name="ElevenSamples">Enables 11 levels of full-scene multisampling.</param>
      <param name="TenSamples">Enables 10 levels of full-scene multisampling.</param>
      <param name="NineSamples">Enables 9 levels of full-scene multisampling.</param>
      <param name="EightSamples">Enables 8 levels of full-scene multisampling.</param>
      <param name="SevenSamples">Enables 7 levels of full-scene multisampling.</param>
      <param name="SixSamples">Enables 6 levels of full-scene multisampling.</param>
      <param name="FiveSamples">Enables 5 levels of full-scene multisampling. </param>
      <param name="FourSamples">Enables 4 levels of full-scene multisampling.</param>
      <param name="ThreeSamples">Enables 3 levels of full-scene multisampling.</param>
      <param name="TwoSamples">Enables 2 levels of full-scene multisampling.</param>
      <param name="NonMaskable">Enables the multisample quality value.</param>
      <param name="None">
        Specifies no full-scene multisampling, and enables swap effects other than  SwapEffect.Discard.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ParameterFlags">
      <summary>Defines shader and effect constants.</summary>
      <param name="Annotation">The parameter is marked as an annotation.</param>
      <param name="Literal">The parameter is marked as a literal value. Literal parameters cannot change after compile, allowing the compiler to optimize their usage. Shared parameters cannot be marked as a literal.</param>
      <param name="Shared">The value of a parameter will be shared by all effects in the same namespace. Changing the value in one effect changes it in all shared effects.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PresentFlag">
      <summary>Defines flags that control a GraphicsDevice.Present operation.</summary>
      <param name="DeviceClip">Clips a windowed GraphicsDevice.Present blit into the window client area, within the monitor screen area of the video adapter that created the Microsoft Direct3D device. This flag works only on Microsoft Windows 2000 and Windows XP.</param>
      <param name="DiscardDepthStencil">Enables z-buffer discarding if set when the device or swap chain is created. When this flag is set, the contents of the depth stencil buffer are invalid after either GraphicsDevice.Present or GraphicsDevice.DepthStencilSurface is called.Discarding z-buffer data can increase performance and is dependent on the driver. The debug runtime enforces discarding by clearing the z-buffer to some constant value after calling either GraphicsDevice.Present or GraphicsDevice.DepthStencilSurface with a different depth surface.Discarding z-buffer data is illegal for all lockable formats, DepthFormat, and DepthFormat. Using the GraphicsDevice constructor to specify a lockable format and z-buffer discarding will result in failure.</param>
      <param name="LockableBackBuffer">Gives the application the ability to lock the back buffer directly. Note that back buffers are not lockable unless the application specifies LockableBackBuffer when calling the GraphicsDevice constructor or GraphicsDevice.Reset. Lockable back buffers incur a performance cost on some graphics hardware configurations.Performing a lock operation (or using GraphicsDevice.UpdateSurface to write on the lockable back buffer) decreases performance on many cards. In this case, consider using textured triangles to move data to the back buffer.</param>
      <param name="None">Use no presentation flags.</param>
      <param name="Video">Informs the driver that the back buffers contain video data.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PresentInterval">
      <summary>Defines flags that describe the relationship between the adapter refresh rate and the rate at which GraphicsDevice.Present operations are completed.</summary>
      <param name="Default">Equivalent to setting One.</param>
      <param name="One">The driver waits for the vertical retrace period (the runtime will beam trace to prevent tearing). GraphicsDevice.Present operations are not affected more frequently than the screen refresh rate; the runtime completes one GraphicsDevice.Present operation per adapter refresh period, at most. This option is always available for both windowed and full-screen swap chains.</param>
      <param name="Two">The driver waits for the vertical retrace period. GraphicsDevice.Present operations are not affected more frequently than every second screen refresh. Check the GraphicsDeviceCapabilities.PresentInterval property to determine whether the driver supports this option.</param>
      <param name="Three">The driver waits for the vertical retrace period. GraphicsDevice.Present operations are not affected more frequently than every third screen refresh. Check the GraphicsDeviceCapabilities.PresentInterval property to determine whether the driver supports this option.</param>
      <param name="Four">The driver waits for the vertical retrace period. GraphicsDevice.Present operations are not affected more frequently than every fourth screen refresh. Check the GraphicsDeviceCapabilities.PresentInterval property to determine whether the driver supports this option.</param>
      <param name="Immediate">The runtime updates the window client area immediately, and might do so more than once during the adapter refresh period. GraphicsDevice.Present operations might be affected immediately. This option is always available for both windowed and full-screen swap chains.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.Present">
      <summary>Defines flags that allow the application to request that the SwapChain.Present method return immediately when the driver reports that it cannot schedule a presentation.</summary>
      <param name="BackBuffersMax">Returns the maximum number of back buffers supported.</param>
      <param name="DoNotWait">Performs the presentation operation without waiting. If the hardware is busy processing or waiting for a vertical sync interval, the method throws WasStillDrawingException.</param>
      <param name="LinearContent">Performs gamma correction from linear space to sRGB for windowed swap chains. This flag takes effect only when the driver exposes GraphicsDeviceCapabilities.DriverCapabilities.SupportsLinearToSrgbPresentation.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PrimitiveType">
      <summary>Defines the primitives supported by Microsoft Direct3D.</summary>
      <param name="LineList">Renders the vertices as a list of isolated straight line segments. Calls that use this primitive type fail if the count is less than two or is odd.</param>
      <param name="LineStrip">Renders the vertices as a single polyline. Calls that use this primitive type fail if the count is less than two. </param>
      <param name="PointList">Renders the vertices as a collection of isolated points. This value is unsupported for indexed primitives.</param>
      <param name="TriangleFan">Renders the vertices as a triangle fan. </param>
      <param name="TriangleList">Renders the specified vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. Back-face culling is affected by the current winding-order render state.</param>
      <param name="TriangleStrip">Renders the vertices as a triangle strip. The back-face culling flag is flipped automatically on even-numbered triangles.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.QueryUsage">
      <summary>Defines options for querying device resource formats.</summary>
      <param name="Filter">Query the resource format to see if it supports texture filter types other than TextureFilter (which is always supported). </param>
      <param name="LegacyBumpMap">Query the resource about a legacy bump map.</param>
      <param name="None">No option specified.</param>
      <param name="PostPixelShaderBlending">Query the resource to verify support for post pixel shader blending support, including alpha test, pixel fog, render-target blending, color write enable, and dithering.</param>
      <param name="SrgbRead">Query the resource to verify if a texture supports gamma correction during a read operation.</param>
      <param name="SrgbWrite">Query the resource to verify if a texture supports gamma correction during a write operation.</param>
      <param name="VertexTexture">Query the resource to verify support for vertex shader texture sampling.</param>
      <param name="WrapAndMip">Query the resource to verify support for texture wrapping and mipmapping.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourcePool">
      <summary>Defines the memory class that holds the buffers for a resource.</summary>
      <param name="Default">
          Resources are placed in the memory pool most appropriate for the set of usages requested for the given resource. This is usually video memory, including both local video memory and AGP memory. The Default pool is separate from Managed and System Memory, and it specifies that the resource is placed in the preferred memory for device access. Note that Default never indicates that either Managed or SystemMemory should be chosen as the memory pool type for this resource. Textures placed in the Default pool cannot be locked unless they are dynamic textures or they are private, FOURCC, driver formats. To access unlockable textures, you must use functions such as GraphicsDevice.UpdateSurface, GraphicsDevice.UpdateTexture, GraphicsDevice.CopyFrontBuffer, and GraphicsDevice.GetRenderTarget. Managed is probably a better choice than Default for most applications. Note that some textures created in driver-proprietary pixel formats, unknown to the Direct3D runtime, can be locked. Also note thatâ€”unlike texturesâ€”swap chain back buffers, render targets, vertex buffers, and index buffers can be locked. When a device is lost, resources created using Default must be released before calling GraphicsDevice.Reset.
        
          When creating resources with Default, if video card memory is already committed, managed resources will be evicted to free enough memory to satisfy the request.
        </param>
      <param name="Managed">Resources are copied automatically to device-accessible memory as needed. Managed resources are backed by system memory and do not need to be recreated when a device is lost. Managed resources can be locked. Only the system-memory copy is directly modified. Direct3D copies your changes to driver-accessible memory as needed.</param>
      <param name="Scratch">Resources are placed in system RAM and do not need to be recreated when a device is lost. These resources are not bound by device size or format restrictions. Because of this, these resources cannot be accessed by the Direct3D device nor set as textures or render targets. However, these resources can always be created, locked, and copied.</param>
      <param name="SystemMemory">
        Resources are placed in memory that is not typically accessible by the Direct3D device. This memory allocation consumes system RAM but does not reduce pageable RAM. These resources do not need to be recreated when a device is lost. Resources in this pool can be locked and can be used as the source for a GraphicsDevice.UpdateSurface or GraphicsDevice.UpdateTexture operation to a memory resource created with Default.
      </param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceType">
      <summary>Defines resource types.</summary>
      <param name="IndexBuffer">An index buffer resource.</param>
      <param name="Surface">A surface resource.</param>
      <param name="Texture2D">A 2-dimensional texture resource.</param>
      <param name="Texture3D">A 3-dimensional texture resource.</param>
      <param name="Texture3DVolume">A 3-D volume texture resource.</param>
      <param name="TextureCube">A cube texture resource.</param>
      <param name="VertexBuffer">A vertex buffer resource.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ResourceUsage">
      <summary>Options that identify the behavior of a resource.</summary>
      <param name="AutoGenerateMipMap">The resource will automatically generate mipmaps. Automatic generation of mipmaps is not supported for volume textures and depth stencil surfaces/textures.</param>
      <param name="DepthStencil">The resource will be a depth stencil buffer. </param>
      <param name="DisplacementMap">The resource will be a displacement map.</param>
      <param name="DoNotClip">Indicates that the vertex buffer content will never require clipping.</param>
      <param name="Dynamic">
          Indicates that the vertex buffer requires dynamic memory use. This is useful for drivers because it enables them to decide where to place the buffer. In general, static vertex buffers are placed in video memory and dynamic vertex buffers are placed in AGP memory. Note that there is no separate static use. If you do not specify Dynamic, the vertex buffer is made static.
        Textures can specify Dynamic. However, managed textures cannot use Dynamic.</param>
      <param name="None">None.</param>
      <param name="Points">Indicates that the vertex or index buffer will be used for drawing point sprites. The buffer will be loaded in system memory if software vertex processing is needed to emulate point sprites.</param>
      <param name="RenderTarget">The resource will be a render target.</param>
      <param name="SoftwareProcessing">If this flag is used, vertex processing is done in software. If this flag is not used, vertex processing is done in hardware.</param>
      <param name="WriteOnly">Informs the system that the application writes only to the vertex buffer. Using this flag enables the driver to choose the best memory location for efficient write operations and rendering. Attempts to read from a vertex buffer that is created with this capability will fail.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SetDataOptions">
      <summary>Describes the type of lock to perform.</summary>
      <param name="Discard">The application overwrites (with a write-only operation) every location within the locked surface. This is a valid option when using dynamic textures, dynamic vertex buffers, and dynamic index buffers. You may not use this option to update a portion of a surface.For vertex and index buffers, the application discards the entire buffer. A pointer to a new memory area is returned so that the direct memory access (DMA) and rendering from the previous area do not stall.For textures, the application overwrites (with a write-only operation) every location within the region being locked.</param>
      <param name="None">No locking options specified.</param>
      <param name="NoOverwrite">The application promises not to overwrite any data in the vertex and index buffers. Specifying this flag allows the driver to return immediately and continue rendering, using this buffer. If this flag is not used, the driver must finish rendering before returning from locking.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderProfile">
      <summary>Defines vertex and pixel shader versions.</summary>
      <param name="PS_1_1">Pixel shader version ps_1_1.</param>
      <param name="PS_1_2">Pixel shader version ps_1_2.</param>
      <param name="PS_1_3">Pixel shader version ps_1_3.</param>
      <param name="PS_1_4">Pixel shader version ps_1_4.</param>
      <param name="PS_2_0">Pixel shader version ps_2_0.</param>
      <param name="PS_2_A">Pixel shader version ps_2_a.</param>
      <param name="PS_2_B">Pixel shader version ps_2_b.</param>
      <param name="PS_2_SW">Pixel software shader version ps_2_sw.</param>
      <param name="PS_3_0">Pixel shader version ps_3_0.</param>
      <param name="Unknown">Unknown pixel shader version.</param>
      <param name="VS_1_1">Vertex shader version v_1_1.</param>
      <param name="VS_2_0">Vertex shader version v_2_0.</param>
      <param name="VS_2_A">Vertex shader version v_2_a.</param>
      <param name="VS_2_SW">Vertex software shader version v_2_sw.</param>
      <param name="VS_3_0">Vertex shader version vs_3_0.</param>
      <param name="XPS_3_0">Vertex shader version xps_3_0.</param>
      <param name="XVS_3_0">Vertex shader version xvs_3_0.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.ShaderRegisterSet">
      <summary>Defines types of shader registers.</summary>
      <param name="Boolean">Boolean value.</param>
      <param name="Float4">4D floating-point number.</param>
      <param name="Int4">4D integer number.</param>
      <param name="Sampler">The register contains 4D sampler data.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteBlendMode">
      <summary>
    The following flags are used to specify sprite blending rendering options to the flags parameter in SpriteBatch.Begin:
  </summary>
      <param name="Additive">Enable additive blending.</param>
      <param name="AlphaBlend">Enable alpha blending.</param>
      <param name="InverseColor">Enable inverse color blending.</param>
      <param name="None">No blending specified.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteEffects">
      <summary>
    The following flags are used to specify sprite rotation rendering options to the flags parameter in SpriteBatch.Begin:
  </summary>
      <param name="FlipHorizontally">Rotate 180 degrees about the Y axis before rendering.</param>
      <param name="FlipVertically">Rotate 180 degrees about the X axis before rendering.</param>
      <param name="None">No rotations specified.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteSortOptions">
      <summary>The following flags are used to specify sprite sort rendering options to the flags parameter in SpriteBatch.Begin:</summary>
      <param name="BackToFront">Sprites are sorted by depth in back-to-front order prior to drawing. This procedure is recommended when drawing transparent sprites of varying depths.
          You may combine BackToFront with Texture to sort first by depth, and second by texture.
        </param>
      <param name="FrontToBack">Sprites are sorted by depth in front-to-back order prior to drawing. This procedure is recommended when drawing opaque sprites of varying depths.
          You may combine FrontToBack with Texture to sort first by depth, and second by texture.
        </param>
      <param name="None">No sprite sort options specified.</param>
      <param name="Texture">
        Sort sprites by texture prior to drawing. This can improve performance when drawing non-overlapping sprites of uniform depth.

        You may also combine Texture2D with either FrontToBack or BackToFront. This will sort the list of sprites by depth first and texture second.
      </param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SpriteStateOptions">
      <summary>The following flags are used to specify sprite rendering options to the flags parameter in SpriteBatch.Begin:</summary>
      <param name="DoNotModifyState">The device render state is not to be changed when SpriteBatch.Begin is called. The device is assumed to be in a valid state to draw vertices containing VertexElement.UsageIndex = 0 in the VertexElementUsage, VertexElementUsage, and VertexElementUsage data.</param>
      <param name="DoNotSaveState">The device state is not to be saved or restored when SpriteBatch.Begin or SpriteBatch.End is called.</param>
      <param name="None">No options specified.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.StateBlockType">
      <summary>Defines device state to capture in a StateBlock.</summary>
      <param name="All">Captures all device states.</param>
      <param name="PixelState">Captures the current pixel shader and its constants.</param>
      <param name="VertexState">Captures the current vertex shader and its constants, all current lights, and the texture stage states specified by TextureWrapCoordinates and TextureWraps.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.StencilOperation">
      <summary>Defines the supported stencil operations.</summary>
      <param name="Decrement">Decrements the stencil-buffer entry, wrapping to the maximum value if the new value is less than 0.</param>
      <param name="DecrementSaturation">Decrements the stencil-buffer entry, clamping to 0.</param>
      <param name="Increment">Increments the stencil-buffer entry, wrapping to 0 if the new value exceeds the maximum value.</param>
      <param name="IncrementSaturation">Increments the stencil-buffer entry, clamping to the maximum value.</param>
      <param name="Invert">Inverts the bits in the stencil-buffer entry.</param>
      <param name="Keep">Does not update the stencil-buffer entry. This is the default value.</param>
      <param name="Replace">Replaces the stencil-buffer entry with a reference value.</param>
      <param name="Zero">Sets the stencil-buffer entry to 0.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SurfaceFormat">
      <summary>Defines various types of surface formats.</summary>
      <param name="Alpha8">(Unsigned format) 8-bit alpha only.</param>
      <param name="Bgr233">(Unsigned format) 8-bit RGB texture format using 3 bits for red, 3 bits for green, and 2 bits for blue.</param>
      <param name="Bgr24">(Unsigned format) 24-bit RGB pixel format with 8 bits per channel.</param>
      <param name="Bgr32">(Unsigned format) 32-bit RGB pixel format, where 8 bits are reserved for each color.</param>
      <param name="Bgr444">(Unsigned format) 16-bit RGB pixel format using 4 bits for each color.</param>
      <param name="Bgr555">(Unsigned format) 16-bit pixel format where 5 bits are reserved for each color.</param>
      <param name="Bgr565">(Unsigned format) 16-bit RGB pixel format with 5 bits for red, 6 bits for green, and 5 bits for blue.</param>
      <param name="Bgra1010102">(Unsigned format) 32-bit pixel format using 10 bits each for red, green, and blue, and 2 bits for alpha.</param>
      <param name="Bgra2338">(Unsigned format) 16-bit ARGB texture format using 8 bits for alpha, 3 bits each for red and green, and 2 bits for blue.</param>
      <param name="Bgra4444">(Unsigned format) 16-bit ARGB pixel format with 4 bits for each channel.</param>
      <param name="Bgra5551">(Unsigned format) 16-bit pixel format where 5 bits are reserved for each color and 1 bit is reserved for alpha.</param>
      <param name="Color">(Unsigned format) 32-bit ARGB pixel format with alpha, using 8 bits per channel.</param>
      <param name="Depth15Stencil1">(Buffer format) 16-bit z-buffer bit depth where 15 bits are reserved for the depth channel and 1 bit is reserved for the stencil channel.</param>
      <param name="Depth16">(Buffer format) 16-bit z-buffer bit depth.</param>
      <param name="Depth16Lockable">(Buffer format) 16-bit z-buffer bit depth.</param>
      <param name="Depth24">(Buffer format) 32-bit z-buffer bit depth using 24 bits for the depth channel.</param>
      <param name="Depth24Stencil4">(Buffer format) 32-bit z-buffer bit depth using 24 bits for the depth channel and 4 bits for the stencil channel.</param>
      <param name="Depth24Stencil8">(Buffer format) 32-bit z-buffer bit depth using 24 bits for the depth channel and 8 bits for the stencil channel.</param>
      <param name="Depth24Stencil8Single">(Buffer format) A non-lockable format that contains 24 bits of depth (in a 24-bit floating-point format âˆ’ 20e4) and 8 bits of stencil.</param>
      <param name="Depth32">(Buffer format) 32-bit z-buffer bit depth.</param>
      <param name="Depth32SingleLockable">(Buffer format) A lockable format where the depth value is represented as a standard IEEE floating-point number.</param>
      <param name="Dxt1">DXT1 compression texture format.</param>
      <param name="Dxt2">DXT2 compression texture format.</param>
      <param name="Dxt3">DXT3 compression texture format.</param>
      <param name="Dxt4">DXT4 compression texture format.</param>
      <param name="Dxt5">DXT5 compression texture format.</param>
      <param name="HalfSingle">(Floating-point format) 16-bit float format using 16 bits for the red channel.</param>
      <param name="HalfVector2">(Floating-point format) 32-bit float format using 16 bits for the red channel and 16 bits for the green channel.</param>
      <param name="HalfVector4">(Floating-point format) 64-bit float format using 16 bits for each channel (alpha, blue, green, red).</param>
      <param name="Luminance16">(Unsigned format) 16-bit luminance only.</param>
      <param name="Luminance8">(Unsigned format) 8-bit luminance only.</param>
      <param name="LuminanceAlpha16">(Unsigned format) 16-bit using 8 bits each for alpha and luminance.</param>
      <param name="LuminanceAlpha8">(Unsigned format) 8-bit using 4 bits each for alpha and luminance.</param>
      <param name="Multi2Bgra32">MultiElement texture (not compressed)</param>
      <param name="NormalizedAlpha1010102">(Mixed format) 32-bit bump-map format using 2 bits for alpha and 10 bits each for w, v, and u.</param>
      <param name="NormalizedByte2">(Signed format) 16-bit bump-map format using 8 bits each for u and v data.</param>
      <param name="NormalizedByte2Computed">(Signed format) 16-bit normal compression format. The texture sampler computes the C channel from: C = sqrt(1 âˆ’ U2âˆ’ V2).</param>
      <param name="NormalizedByte4">(Signed format) 32-bit bump-map format using 8 bits for each channel.</param>
      <param name="NormalizedLuminance16">(Mixed format) 16-bit bump-map format with luminance using 6 bits for luminance, and 5 bits each for v and u.</param>
      <param name="NormalizedLuminance32">(Mixed format) 32-bit bump-map format with luminance using 8 bits for each channel.</param>
      <param name="NormalizedShort2">(Signed format) 32-bit bump-map format using 16 bits for each channel.</param>
      <param name="NormalizedShort4">(Signed format) 64-bit bump-map format using 16 bits for each component.</param>
      <param name="Palette8">(Unsigned format) 8-bit color indexed.</param>
      <param name="PaletteAlpha16">(Unsigned format) 8-bit color indexed with 8 bits of alpha.</param>
      <param name="Rg32">Two 16-bit unsigned normalized values, ranging from 0 to 1. </param>
      <param name="Rgb32">(Unsigned format) 32-bit RGB pixel format, where 8 bits are reserved for each color.</param>
      <param name="Rgba1010102">(Unsigned format) 32-bit pixel format using 10 bits for each color and 2 bits for alpha.</param>
      <param name="Rgba32">(Unsigned format) 32-bit ARGB pixel format with alpha, using 8 bits per channel.</param>
      <param name="Rgba64">(Unsigned format) 64-bit pixel format using 16 bits for each component.</param>
      <param name="Single">(IEEE format) 32-bit float format using 32 bits for the red channel.</param>
      <param name="Unknown">Surface format is unknown.</param>
      <param name="Vector2">(IEEE format) 64-bit float format using 32 bits for the red channel and 32 bits for the green channel.</param>
      <param name="Vector4">(IEEE format) 128-bit float format using 32 bits for each channel (alpha, blue, green, red).</param>
      <param name="VideoGrGb">A 16-bit packed RGB format analogous to VideoYuYv (U0Y0, V0Y1, U2Y2, and so on). It requires a pixel pair in order to properly represent the color value. The first pixel in the pair contains 8 bits of green (in the low 8 bits) and 8 bits of red (in the high 8 bits). The second pixel contains 8 bits of green (in the low 8 bits) and 8 bits of blue (in the high 8 bits). Together, the two pixels share the red and blue components, while each has a unique green component (R0G0, B0G1, R2G2, and so on). The texture sampler does not normalize the colors when looking up into a pixel shader; they remain in the range of 0.0f to 255.0f. This is true for all programmable pixel shader models. For the fixed-function pixel shader, the hardware should normalize to the 0.f to 1.f range and essentially treat it as the VideoUyVy texture. Hardware that exposes this format must have GraphicsDeviceCapabilities.PixelShader1xMaxValue set to a value capable of handling that range.</param>
      <param name="VideoRgBg">A 16-bit packed RGB format analogous to VideoUyVy (Y0U0, Y1V0, Y2U2, and so on). It requires a pixel pair in order to properly represent the color value. The first pixel in the pair contains 8 bits of green (in the high 8 bits) and 8 bits of red (in the low 8 bits). The second pixel contains 8 bits of green (in the high 8 bits) and 8 bits of blue (in the low 8 bits). Together, the two pixels share the red and blue components, while each has a unique green component (G0R0, G1B0, G2R2, and so on). The texture sampler does not normalize the colors when looking up into a pixel shader; they remain in the range of 0.0f to 255.0f. This is true for all programmable pixel shader models. For the fixed-function pixel shader, the hardware should normalize to the 0.f to 1.f range and essentially treat it as the VideoUyVy texture. Hardware that exposes this format must have GraphicsDeviceCapabilities.PixelShader1xMaxValue set to a value capable of handling that range.</param>
      <param name="VideoUyVy">YUY2 format (PC98 compliance)</param>
      <param name="VideoYuYv">VideoYuYv format (PC98 compliance)</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.SwapEffect">
      <summary>Defines swap effects.</summary>
      <param name="Copy">This swap effect can be specified only for a swap chain that comprises a single back buffer.Whether the swap chain is windowed or full-screen, the runtime guarantees the semantics implied by a copy-based GraphicsDevice.Present operation; specifically, that the operation leaves the content of the back buffer unchanged, instead of replacing it with the content of the front buffer as a flip-based GraphicsDevice.Present operation would.For a windowed swap chain, a GraphicsDevice.Present operation causes the back buffer content to be copied immediately to the client area of the target window. No attempt is made to synchronize the copy with the vertical retrace period of the display adapter, so tearing effects may be observed.For a full-screen swap chain, the runtime uses a combination of flip and copy operations, which are supported by hidden back buffers if necessary, to accomplish the GraphicsDevice.Present operation. Accordingly, the presentation is synchronized with the display adapter's vertical retrace and its rate is constrained by the chosen presentation interval. A swap chain specified with the PresentInterval.Immediate flag is the only exception. (For more information, see PresentationParameters.PresentationInterval.) In this case, a GraphicsDevice.Present operation copies the back buffer content directly to the front buffer without waiting for the vertical retrace.</param>
      <param name="Discard">When a swap chain is created with a swap effect of Flip or Copy, the runtime guarantees that a GraphicsDevice.Present operation will not affect the content of any of the back buffers. However, meeting this guarantee can involve substantial video memory or processing overheads, especially when implementing flip semantics for a windowed swap chain or copy semantics for a full-screen swap chain.An application can use the Discard swap effect to avoid these overheads and to enable the display driver to choose the most efficient presentation technique for the swap chain.Discard is also the only swap effect that can be used when specifying a value other than None for PresentationParameters.MultiSampleType. Like a swap chain that uses Flip, a swap chain that uses Discard might include more than one back buffer, any of which can be accessed using GraphicsDevice.GetBackBuffer or SwapChain.GetBackBuffer.The swap chain is essentially a queue where 0 always indexes the back buffer that will be displayed by the next GraphicsDevice.Present operation and from which buffers are discarded once they have been displayed. An application that uses this swap effect should update an entire back buffer before invoking a GraphicsDevice.Present operation that displays it.The debug version of the runtime overwrites the contents of discarded back buffers with random data, to enable developers to verify that their applications are updating the entire back buffer surface correctly.For a full-screen swap chain, the presentation rate is determined by the value assigned to PresentationParameters.PresentationInterval when the device or swap chain is created. Unless this value is PresentInterval.Immediate, the presentation is synchronized with the vertical sync of the monitor. For a windowed swap chain, the presentation is implemented by means of copy operations, and always occurs immediately.</param>
      <param name="Flip">The swap chain might include multiple back buffers and is essentially a circular queue that includes the front buffer. Within this queue, the back buffers are always numbered sequentially from 0 to (n - 1), where n is the number of back buffers, so that 0 denotes the least recently presented buffer.
      When GraphicsDevice.Present is invoked, the queue is rotated so that the front buffer becomes the back buffer (n - 1), while the back buffer 0 becomes the new front buffer.For a full-screen swap chain, the presentation rate is determined by the value assigned to the PresentationParameters.PresentationInterval when the device or swap chain is created. Unless this value is PresentInterval.Immediate, the presentation is synchronized with the vertical sync of the monitor.For a windowed swap chain, the flipping is implemented by means of copy operations, and the presentation always occurs immediately.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TangentOptions">
      <summary>Defines settings used for mesh tangent frame computations.</summary>
      <param name="CalculateNormals">Compute the per-vertex normal vector for each triangle of the input mesh, and ignore any normal vectors already in the input mesh.</param>
      <param name="DontNormalizePartials">Do not normalize partial derivatives with respect to texture coordinates. If not normalized, the scale of the partial derivatives is proportional to the scale of the 3D model divided by the scale of the triangle in (u, v) space. This scale value provides a measure of how much the texture is stretched in a given direction. The resulting vector length is a weighted sum of the lengths of the partial derivatives.</param>
      <param name="DontOrthogonalize">Transform texture coordinates to orthogonal Cartesian coordinates. Mutually exclusive with OrthogonalizeFromU and OrthogonalizeFromV.</param>
      <param name="GenerateInPlace">The results are stored in the original input mesh, and the output mesh is not used.</param>
      <param name="OrthogonalizeFromU">Compute the partial derivative with respect to texture coordinate u independently for each vertex, and then compute the partial derivative with respect to v as the cross product of the normal vector and the partial derivative with respect to u. Mutually exclusive with DontOrthogonalize and OrthogonalizeFromV.</param>
      <param name="OrthogonalizeFromV">Compute the partial derivative with respect to texture coordinate v independently for each vertex, and then compute the partial derivative with respect to u as the cross-product of the partial derivative with respect to v and the normal vector. Mutually exclusive with DontOrthogonalize and OrthogonalizeFromU.</param>
      <param name="WeightByArea">Weight the direction of the computed per-vertex normal or partial derivative vector according to the areas of triangles attached to that vertex. Mutually exclusive with WeightEqual.</param>
      <param name="WeightEqual">Compute a unit-length normal vector for each triangle of the input mesh. Mutually exclusive with WeightByArea.</param>
      <param name="WindClockwise">Vertices are ordered in a clockwise direction around each triangle. The computed normal vector direction is therefore inverted 180 degrees from the direction computed using counterclockwise vertex ordering.</param>
      <param name="WrapU">Texture coordinate values in the u direction are between 0 and 1. In this case, a texture coordinate set will be chosen that minimizes the perimeter of the triangle.</param>
      <param name="WrapUV">Texture coordinate values in both u and v directions are between 0 and 1. In this case, a texture coordinate set will be chosen that minimizes the perimeter of the triangle.</param>
      <param name="WrapV">Texture coordinate values in the v direction are between 0 and 1. In this case, a texture coordinate set will be chosen that minimizes the perimeter of the triangle.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureAddressMode">
      <summary>Defines constants that describe supported texture-addressing modes</summary>
      <param name="Border">Texture coordinates outside the range [0.0, 1.0] are set to the border color.</param>
      <param name="Clamp">Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.</param>
      <param name="Mirror">Similar to Wrap, except that the texture is flipped at every integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again, and so on.</param>
      <param name="MirrorOnce">Similar to Mirror and Clamp. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. The most common usage is for volume textures, where support for the full MirrorOnce texture-addressing mode is not necessary, but the data is symmetrical around the one axis.</param>
      <param name="Wrap">Tile the texture at every integer junction. For example, for u values between 0 and 3, the texture is repeated three times; no mirroring is performed. </param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureArgument">
      <summary>Defines supported texture arguments.</summary>
      <param name="AlphaReplicate">Replicates the alpha value to the color components. During sampling, AlphaReplicate acts as a read modifier.</param>
      <param name="Complement">Takes the complement, or 1.0 âˆ’ x. This is a read modifier.</param>
      <param name="Constant">Selects a constant from a texture stage.</param>
      <param name="Current">Gets the current element in the collection.</param>
      <param name="Diffuse">Specifies the diffuse color interpolated from vertex components during Gouraud shading. If the vertex does not contain a diffuse color, the default color is 0xFFFFFFFF. Permissions are read-only.</param>
      <param name="SelectMask">Mask value for all arguments; not used when setting texture arguments.</param>
      <param name="Specular">Specifies the specular color interpolated from vertex components during Gouraud shading. If the vertex does not contain a specular color, the default color is 0xFFFFFFFF. Permissions are read-only.</param>
      <param name="Temp">Specifies a temporary register color for read or write. Temp is supported if the GraphicsDeviceCapabilities.PrimitiveCapabilities.SupportsTextureStageStateArgumentTemp device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0). Permissions are read/write.</param>
      <param name="Texture2D">Contains the texture color for the current texture stage. Permissions are read-only.</param>
      <param name="TextureFactor">Specifies the texture factor set in the RenderState.TextureFactor property. Permissions are read-only.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureFilter">
      <summary>Defines texture filtering modes for a texture stage.</summary>
      <param name="Anisotropic">Anisotropic texture filtering used as a texture magnification or minification filter. This type of filtering compensates for distortion caused by the difference in angle between the texture polygon and the plane of the screen.</param>
      <param name="GaussianQuad">A 4-sample Gaussian filter used as a texture magnification or minification filter.</param>
      <param name="Linear">Bilinear interpolation filtering used as a texture magnification or minification filter. A weighted average of a 2Ã—2 area of texels surrounding the desired pixel is used. The texture filter used between mipmap levels is trilinear mipmap interpolation, in which the rasterizer performs linear interpolation on pixel color, using the texels of the two nearest mipmap textures.</param>
      <param name="None">Mipmapping disabled. The rasterizer uses the magnification filter instead.</param>
      <param name="Point">Point filtering used as a texture magnification or minification filter. The texel with coordinates nearest to the desired pixel value is used. The texture filter used between mipmap levels is based on the nearest point; that is, the rasterizer uses the color from the texel of the nearest mipmap texture.</param>
      <param name="PyramidalQuad">A 4-sample tent filter used as a texture magnification or minification filter.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureWrapCoordinates">
      <summary>Defines supported wrap coordinates.</summary>
      <param name="Zero">U texture wrapping (wrapping in the direction of the first dimension).</param>
      <param name="One">V texture wrapping (wrapping in the direction of the second dimension).</param>
      <param name="Two">W texture wrapping (wrapping in the direction of the third dimension).</param>
      <param name="Three">Texture wrapping in the direction of the fourth dimension.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.TextureWraps">
      <summary>Defines texture wrapping.</summary>
      <param name="U">U texture wrapping (wrapping in the direction of the first dimension).</param>
      <param name="V">V texture wrapping (wrapping in the direction of the second dimension).</param>
      <param name="W">W texture wrapping (wrapping in the direction of the third dimension).</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementFormat">
      <summary>Defines vertex element formats.</summary>
      <param name="Byte4">4D unsigned byte.</param>
      <param name="Color">4D packed unsigned bytes, mapped to 0 to 1 range. Input is in Int32 format (ARGB) expanded to (R, G, B, A).</param>
      <param name="HalfVector2">Two 16-bit floating-point values expanded to (value, value, 0, 1). This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="HalfVector4">Four 16-bit floating-point values expanded to (value, value, value, value). This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="Normalized101010">3D signed 10 10 10 format, normalized and expanded to (v[0]/511.0, v[1]/511.0, v[2]/511.0, 1).</param>
      <param name="NormalizedShort2">Normalized, 2D signed short, expanded to (first byte/32767.0, second byte/32767.0, 0, 1). This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="NormalizedShort4">Normalized, 4D signed short, expanded to (first byte/32767.0, second byte/32767.0, third byte/32767.0, fourth byte/32767.0). This type is valid for vertex shader version 2.0 or higher. </param>
      <param name="Rg32">Normalized, 2D unsigned short, expanded to (first byte/65535.0, second byte/65535.0, 0, 1). This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="Rgba32">Each of four bytes is normalized by dividing to 255.0. This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="Rgba64">Normalized, 4D unsigned short, expanded to (first byte/65535.0, second byte/65535.0, third byte/65535.0, fourth byte/65535.0). This type is valid for vertex shader version 2.0 or higher.</param>
      <param name="Short2">2D signed short, expanded to (value, value, 0, 1).</param>
      <param name="Short4">4D signed short, expanded to (value, value, value, value).</param>
      <param name="Single">1D float, expanded to (float, 0, 0, 1).</param>
      <param name="UInt101010">3D unsigned 10 10 10 format, expanded to (value, value, value, 1).</param>
      <param name="Unused">Type field in the declaration is unused. This is designed for use with VertexElementMethod.UV and VertexElementMethod.LookUpPresampled.</param>
      <param name="Vector2">2D float, expanded to (float, float, 0, 1).</param>
      <param name="Vector3">3D float, expanded to (float, float, float, 1).</param>
      <param name="Vector4">4D float, expanded to (float, float, float, float).</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementMethod">
      <summary>Defines the declaration methods for a vertex element.</summary>
      <param name="Default">Default value. The tessellator copies the vertex data (or the spline data if it is operating on a patch) without performing additional calculations on it. The input and output types can be any value. When the tessellator is used, this element is interpolated; otherwise, vertex data is copied into the input register.</param>
      <param name="LookUp">Looks up a displacement map. The input type can be VertexElementFormat, VertexElementFormat, or VertexElementFormat. Only the .x and .y components are used for the texture map lookup. The output type is always VertexElementFormat. The device must support displacement mapping. This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled.</param>
      <param name="LookUpPresampled">Looks up a presampled displacement map. The input type must be set to VertexElementFormat.Unused, and the stream index and stream offset must be set to 0. The output type for this operation is always VertexElementFormat. The device must support displacement mapping. This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled.</param>
      <param name="UV">Copies out the u and v values at a point on the rectangle or triangle patch. This results in a 2D float. The input type must be set to VertexElementFormat; the output type is always VertexElementFormat. The input stream and offset also are unused, but must be set to 0.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.VertexElementUsage">
      <summary>Defines usage for vertex elements.</summary>
      <param name="Binormal">Vertex binormal data.</param>
      <param name="BlendIndices">Blending indices data. (BlendIndices with VertexElement.UsageIndex = 0) specifies matrix indices for fixed-function vertex processing using indexed paletted skinning.</param>
      <param name="BlendWeight">Blending weight data. (BlendWeight with VertexElement.UsageIndex = 0) specifies the blend weights in fixed-function vertex processing.</param>
      <param name="Color">Vertex data contains diffuse or specular color. (Color with VertexElement.UsageIndex = 0) specifies the diffuse color in the fixed-function vertex shader and in pixel shaders prior to ps_3_0. (Color with VertexElement.UsageIndex = 1) specifies the specular color in the fixed-function vertex shader and in pixel shaders prior to ps_3_0.</param>
      <param name="Depth">Vertex data contains depth data.</param>
      <param name="Fog">Vertex data contains fog data. (Fog with VertexElement.UsageIndex = 0) specifies a fog blend value to use after pixel shading is finished. This flag applies to pixel shaders prior to version ps_3_0.</param>
      <param name="Normal">Vertex normal data. (Normal with VertexElement.UsageIndex = 0) specifies vertex normals for fixed-function vertex processing and the N-patch tessellator. (Normal with VertexElement.UsageIndex = 1) specifies vertex normals for fixed-function vertex processing for skinning.</param>
      <param name="PointSize">Point size data. (PointSize with VertexElement.UsageIndex = 0) specifies the point-size attribute used by the setup engine of the rasterizer to expand a point into a quad for the point-sprite functionality.</param>
      <param name="Position">Position data. (Position with VertexElement.UsageIndex = 0 ) specifies the nontransformed position in fixed-function vertex processing and the N-patch tessellator. (Position with VertexElement.UsageIndex = 1) specifies the nontransformed position in the fixed-function vertex shader for skinning.</param>
      <param name="PositionTransformed">Vertex data contains transformed position data.(PositionTransformed with VertexElement.UsageIndex = 0) specifies the transformed position. When a declaration that contains this flag is set, the pipeline does not perform vertex processing.</param>
      <param name="Sample">Vertex data contains sampler data. (Sample with VertexElement.UsageIndex = 0) specifies the displacement value to look up. This flag can be used only with VertexElementMethod.LookUpPresampled or VertexElementMethod.LookUp.</param>
      <param name="Tangent">Vertex tangent data.</param>
      <param name="TessellateFactor">Single, positive floating-point value. (TessellateFactor with VertexElement.UsageIndex = 0) specifies a tessellation factor used in the tessellation unit to control the rate of tessellation.</param>
      <param name="TextureCoordinate">Texture coordinate data. (TextureCoordinate, n) specifies texture coordinates in fixed-function vertex processing and in pixel shaders prior to ps_3_0. These coordinates can be used to pass user-defined data.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetCapabilities(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Retrieves the capabilities of an Xbox 360 Controller.</summary>
      <param name="playerIndex">Index of the controller to query.</param>
      <returns>The capabilities of the controller.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.GetState(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Gets the current state of an Xbox 360 Controller.</summary>
      <param name="playerIndex">Player index for the controller you want to query.</param>
      <returns>The current state of the controller.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePad.SetVibration(Microsoft.Xna.Framework.PlayerIndex,System.Single,System.Single)">
      <summary>Sets the vibration motor speeds on an Xbox 360 Controller.</summary>
      <param name="playerIndex">Player index that identifies the controller to set.</param>
      <param name="leftMotor">The speed of the left motor, between 0.0 and 1.0. This motor is a low-frequency motor.</param>
      <param name="rightMotor">The speed of the right motor, between 0.0 and 1.0. This motor is a high-frequency motor.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePad">
      <summary>Allows retrieval of user interaction with an Xbox 360 Controller and setting of controller vibration motors.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.op_Equality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)">
      <summary>Determines whether two GamePadButtons instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.op_Inequality(Microsoft.Xna.Framework.Input.GamePadButtons,Microsoft.Xna.Framework.Input.GamePadButtons)">
      <summary>Determines whether two GamePadButtons instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadButtons.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.A">
      <summary>Identifies whether the A button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.Back">
      <summary>Identifies whether the BACK button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.B">
      <summary>Identifies whether the B button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.LeftShoulder">
      <summary>Identifies whether the left shoulder (bumper) button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.LeftStick">
      <summary>Identifies whether the left stick button on the Xbox 360 Controller is pressed (the stick is "clicked" in).</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.RightShoulder">
      <summary>Identifies whether the right shoulder (bumper) button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.RightStick">
      <summary>Identifies whether the right stick button on the Xbox 360 Controller is pressed (the stick is "clicked" in).</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.Start">
      <summary>Identifies whether the START button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.X">
      <summary>Identifies whether the X button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadButtons.Y">
      <summary>Identifies whether the Y button on the Xbox 360 Controller is pressed.</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadButtons">
      <summary>Identifies whether the buttons on an Xbox 360 Controller are pressed or released.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.GamePadType">
      <summary>Gets the type of controller.</summary>
      <returns>Enumerated value describing the controller type.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.HasVoiceSupport">
      <summary>Gets a value that indicates whether the controller supports voice.</summary>
      <returns>true if the controller supports voice; false otherwise. </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadCapabilities.IsConnected">
      <summary>Indicates whether the Xbox 360 Controller is connected.</summary>
      <returns>true if the controller is connected; false otherwise.
      </returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadCapabilities">
      <summary>Describes the capabilities of an Xbox 360 Controller, including controller type and whether the controller supports voice.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.op_Equality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)">
      <summary>Determines whether two GamePadDPad instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.op_Inequality(Microsoft.Xna.Framework.Input.GamePadDPad,Microsoft.Xna.Framework.Input.GamePadDPad)">
      <summary>Determines whether two GamePadDPad instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadDPad.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Down">
      <summary>Identifies whether the Down direction on the Xbox 360 Controller directional pad is pressed.</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Left">
      <summary>Identifies whether the Left direction on the Xbox 360 Controller directional pad is pressed.</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Right">
      <summary>Identifies whether the Right direction on the Xbox 360 Controller directional pad is pressed.</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadDPad.Up">
      <summary>Identifies whether the Up direction on the Xbox 360 Controller directional pad is pressed.</summary>
      <returns>ButtonState if the button is pressed; ButtonState otherwise.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadDPad">
      <summary>Identifies which directions on the directional pad of an Xbox 360 Controller are being pressed.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.op_Equality(Microsoft.Xna.Framework.Input.GamePadState,Microsoft.Xna.Framework.Input.GamePadState)">
      <summary>Determines whether two GamePadState instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.op_Inequality(Microsoft.Xna.Framework.Input.GamePadState,Microsoft.Xna.Framework.Input.GamePadState)">
      <summary>Determines whether two GamePadState instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadState.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.Buttons">
      <summary>Returns a structure that identifies what buttons on the Xbox 360 Controller are pressed.</summary>
      <returns>A structure that identifies buttons pressed on the controller.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.DPad">
      <summary>Returns a structure that identifies what directions of the directional pad on the Xbox 360 Controller are pressed.</summary>
      <returns>Structure that identifies what directional pad directions are pressed.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.IsConnected">
      <summary>Indicates whether the Xbox 360 Controller is connected.</summary>
      <returns>true if the controller is connected; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.PacketNumber">
      <summary>Gets the packet number associated with this state.</summary>
      <returns>The packet number associated with this state.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.ThumbSticks">
      <summary>Returns a structure that indicates the position of the Xbox 360 Controller sticks (thumbsticks).</summary>
      <returns>Structure that indicates the position of the sticks.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadState.Triggers">
      <summary>Returns a structure that identifies the position of triggers on the Xbox 360 Controller.</summary>
      <returns>Structure that identifies the position of the triggers.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadState">
      <summary>Represents specific information about the state of an Xbox 360 Controller, including the current state of buttons and sticks.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Equality(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadThumbSticks)">
      <summary>Determines whether two GamePadThumbSticks instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.op_Inequality(Microsoft.Xna.Framework.Input.GamePadThumbSticks,Microsoft.Xna.Framework.Input.GamePadThumbSticks)">
      <summary>Determines whether two GamePadThumbSticks instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadThumbSticks.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Left">
      <summary>Returns the position of the left Xbox 360 Controller stick (thumbstick) as a 2D vector.</summary>
      <returns>Two-dimensional vector that identifies the position of the left stick. Each axis is represented as a floating-point value from âˆ’1.0 to 1.0.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadThumbSticks.Right">
      <summary>Returns the position of the right Xbox 360 Controller stick (thumbstick) as a 2D vector.</summary>
      <returns>Two-dimensional vector that identifies the position of the right stick. Each axis is represented as a floating-point value from âˆ’1.0 to 1.0.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadThumbSticks">
      <summary>Structure that represents the position of left and right sticks (thumbsticks) on an Xbox 360 Controller.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Equality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)">
      <summary>Determines whether two GamePadTriggers instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.op_Inequality(Microsoft.Xna.Framework.Input.GamePadTriggers,Microsoft.Xna.Framework.Input.GamePadTriggers)">
      <summary>Determines whether two GamePadTriggers instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.GamePadTriggers.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadTriggers.Left">
      <summary>Identifies the position of the left trigger on the Xbox 360 Controller.</summary>
      <returns>Position of the left trigger, as a value between 0.0 and 1.0.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.GamePadTriggers.Right">
      <summary>Identifies the position of the right trigger on the Xbox 360 Controller.</summary>
      <returns>Position of the right trigger, as a value between 0.0 and 1.0.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadTriggers">
      <summary>Structure that defines the position of the left and right triggers on an Xbox 360 Controller.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Keyboard.GetState">
      <summary>Returns the current keyboard state.</summary>
      <returns>The current keyboard state.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Keyboard">
      <summary>Allows retrieval of keystrokes from a keyboard input device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.GetPressedKeys">
      <summary>Gets an array of values that correspond to the keyboard keys that are currently being pressed.</summary>
      <returns>The keys that are currently pressed.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
      <summary>Returns whether a specified key is currently being pressed.</summary>
      <param name="key">Enumerated value that specifies the key to query.</param>
      <returns>true if the key specified by key is being held down; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.KeyboardState.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)">
      <summary>Returns whether a specified key is currently not pressed.</summary>
      <param name="key">Enumerated value that specifies the key to query.</param>
      <returns>true if the key specified by key is not pressed; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.KeyboardState.Item">
      <summary>Returns the state of a particular key.</summary>
      <param name="key">Enumerated value representing the key to query.</param>
      <returns>The state of the key specified by key.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.KeyboardState">
      <summary>Represents a state of keystrokes recorded by a keyboard input device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.Mouse.GetState">
      <summary>Gets the current state of the mouse, including mouse position and buttons pressed.</summary>
      <returns>Current state of the mouse.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.Mouse.IsCaptured">
      <summary>Sets or gets whether mouse events are being captured.</summary>
      <returns>true if mouse events are being captured and reported; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.Mouse.WindowHandle">
      <summary>Sets or gets the window handle that mouse data will be captured within.</summary>
      <returns>Handle to a window.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Mouse">
      <summary>Allows retrieval of position and button clicks from a mouse input device.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.op_Equality(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState)">
      <summary>Determines whether two MouseState instances are equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the instances are equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">Object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>Hash code for this object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.op_Inequality(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState)">
      <summary>Determines whether two MouseState instances are not equal.</summary>
      <param name="left">Object on the left of the equal sign.</param>
      <param name="right">Object on the right of the equal sign.</param>
      <returns>true if the objects are not equal; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Input.MouseState.ToString">
      <summary>Retrieves a string representation of this object.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.LeftButton">
      <summary>Returns the state of the left mouse button.</summary>
      <returns>State of the left mouse button.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.MiddleButton">
      <summary>Returns the state of the middle mouse button.</summary>
      <returns>State of the middle mouse button.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.RightButton">
      <summary>Returns the state of the right mouse button.</summary>
      <returns>State of the right mouse button.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.ScrollWheelValue">
      <summary>Gets the mouse scroll wheel value reported by the system.</summary>
      <returns>The scroll wheel value.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.XButton1">
      <summary>Returns the state of XBUTTON1.</summary>
      <returns>The state of XBUTTON1.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.XButton2">
      <summary>Returns the state of XBUTTON2.</summary>
      <returns>The state of XBUTTON2.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.X">
      <summary>Specifies the horizontal position of the mouse cursor.</summary>
      <returns>Horizontal position of the mouse cursor.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Input.MouseState.Y">
      <summary>Specifies the vertical position of the mouse cursor.</summary>
      <returns>Vertical position of the mouse cursor.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.MouseState">
      <summary>Represents the state of a mouse input device, including mouse cursor position and buttons pressed.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.ButtonState">
      <summary>Identifies the state of a mouse button or Xbox 360 Controller button.</summary>
      <param name="Pressed">The button is pressed.</param>
      <param name="Released">The button is released.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.GamePadType">
      <summary>Describes the type of a given Xbox 360 controller.</summary>
      <param name="ArcadeStick">Controller is an arcade stick.</param>
      <param name="DancePad">Controller is a dance pad.</param>
      <param name="FlightStick">Controller is a flight stick.</param>
      <param name="GamePad">Controller is the Xbox 360 Controller.</param>
      <param name="Wheel">Controller is a wheel.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.KeyState">
      <summary>Identifies the state of a keyboard key.</summary>
      <param name="Down">The key is pressed.</param>
      <param name="Up">The key is released.</param>
    </member>
    <member name="T:Microsoft.Xna.Framework.Input.Keys">
      <summary>Identifies a particular key on a keyboard.</summary>
      <param name="A">A key</param>
      <param name="Add">Add key</param>
      <param name="Alt">ALT key</param>
      <param name="Apps">Applications key </param>
      <param name="Attn">Attn key</param>
      <param name="B">B key</param>
      <param name="Back">BACKSPACE key</param>
      <param name="BrowserBack">Windows 2000/XP: Browser Back key</param>
      <param name="BrowserFavorites">Windows 2000/XP: Browser Favorites key</param>
      <param name="BrowserForward">Windows 2000/XP: Browser Forward key</param>
      <param name="BrowserHome">Windows 2000/XP: Browser Start and Home key</param>
      <param name="BrowserRefresh">Windows 2000/XP: Browser Refresh key</param>
      <param name="BrowserSearch">Windows 2000/XP: Browser Search key </param>
      <param name="BrowserStop">Windows 2000/XP: Browser Stop key</param>
      <param name="C">C key</param>
      <param name="Cancel">Control-break processing</param>
      <param name="Capital">CAPS LOCK key</param>
      <param name="CapsLock">CAPS LOCK key</param>
      <param name="Clear">CLEAR key</param>
      <param name="Control">CTRL key</param>
      <param name="ControlKey">CTRL key</param>
      <param name="Crsel">CrSel key</param>
      <param name="D">D key</param>
      <param name="D0">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D1">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D2">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D3">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D4">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D5">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D6">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D7">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D8">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="D9">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="Decimal">Decimal key</param>
      <param name="Delete">DEL key</param>
      <param name="Divide">Divide key</param>
      <param name="Down">DOWN ARROW key</param>
      <param name="E">E key</param>
      <param name="End">END key</param>
      <param name="Enter">ENTER key</param>
      <param name="EraseEof">Erase EOF key</param>
      <param name="Escape">ESC key</param>
      <param name="Execute">EXECUTE key</param>
      <param name="Exsel">ExSel key</param>
      <param name="F">F key</param>
      <param name="F1">F1 key</param>
      <param name="F10">F10 key</param>
      <param name="F11">F11 key</param>
      <param name="F12">F12 key</param>
      <param name="F13">F13 key</param>
      <param name="F14">F14 key</param>
      <param name="F15">F15 key</param>
      <param name="F16">F16 key</param>
      <param name="F17">F17 key</param>
      <param name="F18">F18 key</param>
      <param name="F19">F19 key</param>
      <param name="F2">F2 key</param>
      <param name="F20">F20 key</param>
      <param name="F21">F21 key</param>
      <param name="F22">F22 key</param>
      <param name="F23">F23 key</param>
      <param name="F24">F24 key</param>
      <param name="F3">F3 key</param>
      <param name="F4">F4 key</param>
      <param name="F5">F5 key</param>
      <param name="F6">F6 key</param>
      <param name="F7">F7 key</param>
      <param name="F8">F8 key</param>
      <param name="F9">F9 key</param>
      <param name="FinalMode">IME final mode</param>
      <param name="G">G key</param>
      <param name="H">H key</param>
      <param name="HanguelMode">IME Hanguel mode (maintained for compatibility; use HangulMode)</param>
      <param name="HangulMode">IME Hangul mode</param>
      <param name="HanjaMode">IME Hanja mode</param>
      <param name="Help">HELP key</param>
      <param name="Home">HOME key</param>
      <param name="I">I key</param>
      <param name="IMEAccept">IME accept</param>
      <param name="IMEAceept">IME accept</param>
      <param name="IMEConvert">IME convert</param>
      <param name="IMEModeChange">IME mode change request</param>
      <param name="IMENonconvert">IME nonconvert</param>
      <param name="Insert">INS key</param>
      <param name="J">J key</param>
      <param name="JunjaMode">IME Junja mode</param>
      <param name="K">K key</param>
      <param name="KanaMode">Input Method Editor (IME) Kana mode</param>
      <param name="KanjiMode">IME Kanji mode</param>
      <param name="KeyCode">Reserved</param>
      <param name="L">L key</param>
      <param name="LaunchApplication1">Windows 2000/XP: Start Application 1 key</param>
      <param name="LaunchApplication2">Windows 2000/XP: Start Application 2 key</param>
      <param name="LaunchMail">Windows 2000/XP: Start Mail key</param>
      <param name="LButton">Left mouse button</param>
      <param name="LControlKey">Left CONTROL key</param>
      <param name="Left">LEFT ARROW key</param>
      <param name="LineFeed">Reserved</param>
      <param name="LMenu">Left MENU key</param>
      <param name="LShiftKey">Left SHIFT key</param>
      <param name="LWin">Left Windows key </param>
      <param name="M">M key</param>
      <param name="MButton">Middle mouse button (three-button mouse)</param>
      <param name="MediaNextTrack">Windows 2000/XP: Next Track key</param>
      <param name="MediaPlayPause">Windows 2000/XP: Play/Pause Media key</param>
      <param name="MediaPreviousTrack">Windows 2000/XP: Previous Track key</param>
      <param name="MediaStop">Windows 2000/XP: Stop Media key</param>
      <param name="Menu">ALT key</param>
      <param name="Modifiers">Reserved</param>
      <param name="Multiply">Multiply key</param>
      <param name="N">N key</param>
      <param name="Next">PAGE DOWN key</param>
      <param name="NoName">Reserved</param>
      <param name="None">Reserved</param>
      <param name="NumLock">NUM LOCK key</param>
      <param name="NumPad0">Numeric keypad 0 key</param>
      <param name="NumPad1">Numeric keypad 1 key</param>
      <param name="NumPad2">Numeric keypad 2 key</param>
      <param name="NumPad3">Numeric keypad 3 key</param>
      <param name="NumPad4">Numeric keypad 4 key</param>
      <param name="NumPad5">Numeric keypad 5 key</param>
      <param name="NumPad6">Numeric keypad 6 key</param>
      <param name="NumPad7">Numeric keypad 7 key</param>
      <param name="NumPad8">Numeric keypad 8 key</param>
      <param name="NumPad9">Numeric keypad 9 key</param>
      <param name="O">O key</param>
      <param name="Oem1">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="Oem102">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="Oem2">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="Oem3">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="Oem4">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="Oem5">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="Oem6">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="Oem7">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="Oem8">Used for miscellaneous characters; it can vary by keyboard.</param>
      <param name="OemBackslash">Windows 2000/XP: For any country/region, the '\' key</param>
      <param name="OemClear">Clear key</param>
      <param name="OemCloseBrackets">Windows 2000/XP: For any country/region, the ']' key</param>
      <param name="Oemcomma">Windows 2000/XP: For any country/region, the ',' key</param>
      <param name="OemMinus">Windows 2000/XP: For any country/region, the '-' key</param>
      <param name="OemOpenBrackets">Windows 2000/XP: For any country/region, the '[' key</param>
      <param name="OemPeriod">Windows 2000/XP: For any country/region, the '.' key</param>
      <param name="OemPipe">Windows 2000/XP: For any country/region, the '|' key</param>
      <param name="Oemplus">Windows 2000/XP: For any country/region, the '+' key</param>
      <param name="OemQuestion">Windows 2000/XP: For any country/region, the '?' key</param>
      <param name="OemQuotes">Windows 2000/XP: For any country/region, the '"' key</param>
      <param name="OemSemicolon">Windows 2000/XP: For any country/region, the ';' key</param>
      <param name="Oemtilde">Windows 2000/XP: For any country/region, the '~' key</param>
      <param name="P">P key</param>
      <param name="Pa1">PA1 key</param>
      <param name="Packet">Windows 2000/XP: Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods.</param>
      <param name="PageDown">PAGE DOWN key</param>
      <param name="PageUp">PAGE UP key</param>
      <param name="Pause">PAUSE key</param>
      <param name="Play">Play key</param>
      <param name="Print">PRINT key</param>
      <param name="PrintScreen">PRINT SCREEN key</param>
      <param name="Prior">PAGE UP key</param>
      <param name="ProcessKey">Windows 95/98/Me, Windows NT 4.0, Windows 2000/XP: IME PROCESS key</param>
      <param name="Q">Q key</param>
      <param name="R">R key</param>
      <param name="RButton">Right mouse button</param>
      <param name="RControlKey">Right CONTROL key</param>
      <param name="Return">ENTER key</param>
      <param name="Right">RIGHT ARROW key</param>
      <param name="RMenu">Right MENU key</param>
      <param name="RShiftKey">Right SHIFT key</param>
      <param name="RWin">Right Windows key </param>
      <param name="S">S key</param>
      <param name="Scroll">SCROLL LOCK key</param>
      <param name="Select">SELECT key</param>
      <param name="SelectMedia">Windows 2000/XP: Select Media key</param>
      <param name="Separator">Separator key</param>
      <param name="Shift">SHIFT key</param>
      <param name="ShiftKey">SHIFT key</param>
      <param name="Sleep">Computer Sleep key</param>
      <param name="Snapshot">PRINT SCREEN key</param>
      <param name="Space">SPACEBAR</param>
      <param name="Subtract">Subtract key</param>
      <param name="T">T key</param>
      <param name="Tab">TAB key</param>
      <param name="U">U key</param>
      <param name="Up">UP ARROW key</param>
      <param name="V">V key</param>
      <param name="VolumeDown">Windows 2000/XP: Volume Down key</param>
      <param name="VolumeMute">Windows 2000/XP: Volume Mute key</param>
      <param name="VolumeUp">Windows 2000/XP: Volume Up key</param>
      <param name="W">W key</param>
      <param name="X">X key</param>
      <param name="XButton1">Windows 2000/XP: X1 mouse button</param>
      <param name="XButton2">Windows 2000/XP: X2 mouse button</param>
      <param name="Y">Y key</param>
      <param name="Z">Z key</param>
      <param name="Zoom">Zoom key</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.#ctor(System.Single)">
      <summary>Initializes a new instance of the Alpha8 structure.</summary>
      <param name="alpha">The initial value for the Alpha8 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8,Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.
</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8,Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representaion from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToAlpha">
      <summary>Expands the packed representation to a System.Single.</summary>
      <returns>The expanded Alpha8.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Alpha8">
      <summary>Packed vector type containing a single 8 bit normalized W value in the range of 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of the Bgr565 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Bgr565 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Bgr565 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565,Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565,Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.ToVector3">
      <summary>Expands the packed representation into a !Framework.Vector3.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgr565">
      <summary>Packed vector type containing unsigned normalized values ranging from 0 to 1.  The x and z components use 5 bits, and the y component uses 6 bits.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Bgra5551 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Bgra5551 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Bgra5551 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551,Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !Framework.Vector4.
</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Bgra5551">
      <summary>Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 5 bits each for x, y, and z, and 1 bit for w.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Byte4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Byte4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Byte4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Byte4,Microsoft.Xna.Framework.Graphics.PackedVector.Byte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !Framework.Vector4</summary>
      <param name="vector">The vector to create packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Byte4">
      <summary>Packed vector type containing four 8-bit unsigned integer values, ranging from 0 to 255.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.#ctor(System.Single)">
      <summary>Initializes a new instance of the HalfSingle structure.</summary>
      <param name="value">The initial value of the HalfSingle structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle,Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle,Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !.Framework.Vector4.
</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.ToSingle">
      <summary>Expands the HalfSingle to a System.Single.</summary>
      <returns>The expanded HalfSingle.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfSingle">
      <summary>Packed vector type containing a single 16 bit floating point value.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the HalfVector2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the HalfVector2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the HalfVector2 structure.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !.Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.ToVector2">
      <summary>Expands the HalfVector2 to a Vector2.</summary>
      <returns>The expanded HalfVector2.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector2">
      <summary>Packed vector type containing two 16-bit floating-point values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the HalfVector4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the HalfVector4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the HalfVector4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4,Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !.Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.HalfVector4">
      <summary>Packed vector type containing four 16-bit floating-point values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector">
      <summary>
    Interface that converts packed vector types to and from !Framework.Vector4 values,
    allowing multiple encodings to be manipulated in a generic way.</summary>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.IPackedVector`1">
      <summary>Converts packed vector types to and from !Framework.Vector4 values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of the Normalized101010 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Normalized101010 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Normalized101010 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010,Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010,Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !.Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.ToVector3">
      <summary>Expands the packed representation into a !Framework.Vector3. </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Normalized101010">
      <summary>Packed vector type containing signed normalized values,
    ranging from âˆ’1 to 1, using 10 bits each for x, y, and z, and 2 bits for w.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the NormalizedByte2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedByte2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedByte2 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !.Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.ToVector2">
      <summary>Expands the packed representation to a vector.</summary>
      <returns>The expanded NormalizedByte2.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte2">
      <summary>Packed vector type containing two 8-bit signed normalized values, ranging from âˆ’1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the NormalizedByte4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedByte4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedByte4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !.Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedByte4">
      <summary>Packed vector type containing four 8-bit signed normalized values, ranging from âˆ’1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the NormalizedShort2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedShort2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedShort2 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !.Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.ToVector2">
      <summary>Expands the packed representation to a vector.</summary>
      <returns>The expanded NormalizedShort2.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort2">
      <summary>Packed vector type containing two 16-bit signed normalized values, ranging from âˆ’1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the NormalizedShort4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the NormalizedShort4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the NormalizedShort4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4,Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !.Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.NormalizedShort4">
      <summary>Packed vector type containing four 16-bit signed normalized values, ranging from âˆ’1 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the Rg32 structure.</summary>
      <param name="vector">The vector containing the initial values for the components of the Rg32 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the Rg32 structure.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32,Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rg32,Microsoft.Xna.Framework.Graphics.PackedVector.Rg32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !Framework.Vector4</summary>
      <param name="vector">The vector to create packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.ToVector2">
      <summary>Expands the packed vector representation into a !Framework.Vector2.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rg32">
      <summary>Packed vector type containing two 16-bit unsigned normalized values, ranging from  0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Rgba1010102 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Rgba1010102 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Rgba1010102 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the left of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !Framework.Vector4</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba1010102">
      <summary>Packed vector type containing unsigned normalized values, ranging from 0 to 1, using 10 bits each for x, y, and z, and 2 bits for w.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Rgba32 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Rgba32 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Rgba32 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !.Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba32">
      <summary>Packed vector type containing four 8-bit unsigned normalized values, ranging from  0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Rgba64 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Rgba64 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Rgba64 structure.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64,Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !Framework.Vector4.
</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Rgba64">
      <summary>Packed vector type containing four 16-bit unsigned normalized values, ranging from 0 to 1.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.#ctor(Microsoft.Xna.Framework.Vector2)">
      <summary>Initializes a new instance of the Short2 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Short2 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the Short2 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Short2,Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Short2,Microsoft.Xna.Framework.Graphics.PackedVector.Short2)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !.Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.ToVector2">
      <summary>Expands the packed representation to a vector.</summary>
      <returns>The expanded Short2.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.IPackedVector.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Short2.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short2">
      <summary>Packed vector type containing two 16-bit signed integer values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(Microsoft.Xna.Framework.Vector4)">
      <summary>Initializes a new instance of the Short4 structure.</summary>
      <param name="vector">A vector containing the initial values for the components of the Short4 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the Short4 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
      <param name="w">Initial value for the w component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.Short4,Microsoft.Xna.Framework.Graphics.PackedVector.Short4)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !.Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.Short4.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.Short4">
      <summary>Packed vector type containing four 16-bit signed integer values.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.#ctor(Microsoft.Xna.Framework.Vector3)">
      <summary>Initializes a new instance of the UInt101010 class.</summary>
      <param name="vector">A vector containing the initial values for the components of the UInt101010 structure.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the UInt101010 class.</summary>
      <param name="x">Initial value for the x component.</param>
      <param name="y">Initial value for the y component.</param>
      <param name="z">Initial value for the z component.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.op_Equality(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010,Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are the same; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.Equals(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="other">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="obj">The object with which to make the comparison.</param>
      <returns>true if the current instance is equal to the specified object; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.GetHashCode">
      <summary>Gets the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.op_Inequality(Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010,Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="a">The object to the left of the equality operator.</param>
      <param name="b">The object to the right of the equality operator.</param>
      <returns>true if the objects are different; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.IPackedVector.PackFromVector4(Microsoft.Xna.Framework.Vector4)">
      <summary>Sets the packed representation from a !.Framework.Vector4.</summary>
      <param name="vector">The vector to create the packed representation from.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.ToString">
      <summary>Returns a string representation of the current instance.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.ToVector3">
      <summary>
    Expands the packed representation into a !Framework.Vector3.
  </summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.ToVector4">
      <summary>Expands the packed representation into a !Framework.Vector4.</summary>
      <returns>The expanded vector.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010.PackedValue">
      <summary>Directly gets or sets the packed representation of the value.</summary>
      <returns>The packed representation of the value.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Graphics.PackedVector.UInt101010">
      <summary>Packed vector type containing unsigned integer values, using 10 bits
    each for x, y, and z (ranging from 0 to 1023), and 2 bits for w (ranging from 0 to 3).</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.CopyFile(System.String,System.String,System.Boolean)">
      <summary>Copies a file, overwriting the destination file if desired.</summary>
      <param name="sourceFileName">Location of the file to copy.</param>
      <param name="destinationFileName">Location where the copy of the file will be placed.</param>
      <param name="overwrite">true to overwrite any existing file at destFileName; false otherwise.
    </param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.CopyFile(System.String,System.String)">
      <summary>Copies a file.</summary>
      <param name="sourceFileName">Location of the file to copy.</param>
      <param name="destinationFileName">Location where the copy of the file will be placed.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.CreateFile(System.String,System.Int32,System.IO.FileOptions)">
      <summary>
    Creates a buffered System.IO.FileStream object for a given file, with advanced options.
  </summary>
      <param name="name">The name of the file to create.</param>
      <param name="bufferSize">The number of bytes to buffer for reads and writes to the file.</param>
      <param name="options">A System.IO.FileOptions value describing how to create or overwrite the file.</param>
      <returns>A System.IO.FileStream representing the newly created file.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.CreateFile(System.String)">
      <summary>
    Creates a System.IO.FileStream object for a given file.
  </summary>
      <param name="name">The name of the file to create.</param>
      <returns>
        A System.IO.FileStream representing the newly created file.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.CreateFile(System.String,System.Int32)">
      <summary>
    Creates a buffered System.IO.FileStream object for a given file.
  </summary>
      <param name="name">The name of the file to create.</param>
      <param name="bufferSize">The number of bytes to buffer for reads and writes to the file.</param>
      <returns>
        A System.IO.FileStream representing the newly created file.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.DeleteAllFiles">
      <summary>Deletes all of the files in the container.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.DeleteFile(System.String)">
      <summary>Deletes a file with a specified name from the container.</summary>
      <param name="name">Name of the file.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.Delete">
      <summary>Deletes the storage container.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.FileExists(System.String)">
      <summary>Indicates whether a file with the specified name exists in the container.</summary>
      <param name="name">Name of the file.</param>
      <returns>true if the specified file exists; false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.GetFiles">
      <summary>Gets a list of files in the container.</summary>
      <returns>A collection of file names.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>
    Opens a System.IO.FileStream on a file with read/write access.
  </summary>
      <param name="name">The name of the file.</param>
      <param name="mode">A System.IO.FileMode value specifying file creation and overwrite options.</param>
      <param name="access">A System.IO.FileAccess value specifying which operations can be performed on the file.</param>
      <returns>
        A System.IO.FileStream representing the newly opened file.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.OpenFile(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>
    Opens a System.IO.FileStream on a file with read/write access.
  </summary>
      <param name="name">The name of the file.</param>
      <param name="mode">
        A System.IO.FileMode value specifying file creation and overwrite options.
      </param>
      <param name="access">
        A System.IO.FileAccess value specifying which operations can be performed on the file.
      </param>
      <param name="share">A System.IO.FileShare value specifying what type of access other threads will have to the file.</param>
      <returns>
        A System.IO.FileStream representing the newly opened file.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.OpenFile(System.String,System.IO.FileMode)">
      <summary>
    Opens a System.IO.FileStream on a file with read/write access.
  </summary>
      <param name="name">The name of the file.</param>
      <param name="mode">
        A System.IO.FileMode value specifying file creation and overwrite options.
      </param>
      <returns>
        A System.IO.FileStream representing the newly opened file.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.OpenRead(System.String)">
      <summary>Opens a file for reading.</summary>
      <param name="name">The name of the file.</param>
      <returns>
        A System.IO.FileStream representing the newly opened file.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.OpenWrite(System.String)">
      <summary>Opens a file for writing.</summary>
      <param name="name">The name of the file.</param>
      <returns>
        A System.IO.FileStream representing the newly opened file.
      </returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.RenameFile(System.String,System.String,System.Boolean)">
      <summary>Renames an existing file, overwriting if desired.</summary>
      <param name="sourceFileName">File to rename.</param>
      <param name="destinationFileName">Name of the destination file.</param>
      <param name="overwrite">true to overwrite any existing file with the same name as the destination file; false otherwise.</param>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageContainer.RenameFile(System.String,System.String)">
      <summary>Renames an existing file.</summary>
      <param name="sourceFileName">File to rename.</param>
      <param name="destinationFileName">Name of the destination file.</param>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.PlayerIndex">
      <summary>Gets a !Framework.PlayerIndex specifying which player owns games saved in this container.</summary>
      <returns>
        The !Framework.PlayerIndex specifying which player owns games saved in this container.
      </returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.StorageDevice">
      <summary>Gets the StorageDevice that holds the files in this container.</summary>
      <returns>The StorageDevice that holds the files in this container.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.TitleLocation">
      <summary>Gets the file path to the location of the title storage space.</summary>
      <returns>The title's install location based on the current platform.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageContainer.TitleName">
      <summary>Gets the name of the title.</summary>
      <returns>The name of the title.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Storage.StorageContainer">
      <summary>Represents a logical collection of storage files.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDevice.BeginShowStorageDeviceGuide(Microsoft.Xna.Framework.PlayerIndex,System.AsyncCallback,System.Object)">
      <summary>Asynchronously displays the device selector UI to allow users to select a device to save data.  Has no effect on Windows.</summary>
      <param name="playerIndex">The !Framework.PlayerIndex of the user associated with the local port (input port).</param>
      <param name="callback">The method to be called once the user has selected the device.</param>
      <param name="stateObject">A user-created object that uniquely identifies this request.</param>
      <returns>An System.IAsyncResult used to track the progress of the method.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDevice.EndShowStorageDeviceGuide(System.IAsyncResult)">
      <summary>Ends the device selection UI.</summary>
      <param name="asyncResult">The System.IAsyncResult returned from StorageDevice.BeginShowStorageDeviceGuide.</param>
      <returns>The storage device selected by the user.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDevice.OpenContainer(System.String)">
      <summary>Opens a StorageContainer containing any files for the specified title.</summary>
      <param name="titleName">The name of the title.</param>
      <returns>A StorageContainer containing any files for the title.</returns>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDevice.ShowStorageDeviceGuide(Microsoft.Xna.Framework.PlayerIndex)">
      <summary>Displays the device selector UI to allow users to select a device to save data.  Has no effect on Windows.</summary>
      <param name="playerIndex">The !Framework.PlayerIndex of the user associated with the local port (input port).</param>
      <returns>The storage device selected by the user.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageDevice.FreeSpace">
      <summary>Gets the amount of free space on the device.</summary>
      <returns>Free space on the device, in bytes.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageDevice.IsConnected">
      <summary>Gets whether the device is connected.</summary>
      <returns>true if the device is connected; false otherwise.</returns>
    </member>
    <member name="P:Microsoft.Xna.Framework.Storage.StorageDevice.TotalSpace">
      <summary>Gets the amount of free space on the device.</summary>
      <returns>Free space on the device, in bytes.</returns>
    </member>
    <member name="T:Microsoft.Xna.Framework.Storage.StorageDevice">
      <summary>Represents a storage device for user data, such as a memory unit or hard drive.</summary>
    </member>
    <member name="M:Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException.#ctor">
      <summary>Initializes a new instance of this class.</summary>
    </member>
    <member name="T:Microsoft.Xna.Framework.Storage.StorageDeviceNotConnectedException">
      <summary>The exception that is thrown when the requested StorageDevice is not connected.</summary>
    </member>
  </members>
</doc>