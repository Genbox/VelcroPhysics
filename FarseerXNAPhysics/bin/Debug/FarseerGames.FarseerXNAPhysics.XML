<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FarseerGames.FarseerXNAPhysics</name>
    </assembly>
    <members>
        <member name="T:FarseerGames.FarseerXNAPhysics.Dynamics.Body">
             <summary>
             <para>
             Body is at the core of the Rigid Body System.  It is a <see cref="T:FarseerGames.FarseerXNAPhysics.Dynamics.RigidBody">RigidBody</see>
             without the geometry.</para>
             <para>
             The Body handles all the physics of motion: position, velocity, acceleration
             forces, torques, etc...</para>
            <list type="number">
            <listheader>
             The Body is integrated every timestep (which should be fixed) by the <see cref="T:FarseerGames.FarseerXNAPhysics.PhysicsSimulator">PhysicsSimulator</see> in the following manner:</listheader> 
             <item>-Set forces and torques (gravity, springs, user input...)</item>
             <item>-Apply forces and torques (updating velocity only)</item>
             <item>-Update positions and orientations</item>
            </list>
             <para>In technical terms, this is known as Symplectic Euler Integration because
             velocity is updated prior to position (The reverse of simple Euler Integration)</para>
             </summary>
        </member>
        <member name="T:FarseerGames.FarseerXNAPhysics.IIsDisposable">
            <summary>
            Extends IDisposable to include the boolean check 'IsDisposed'.
            <para><c>if(object.IsDisposed){return;}</c></para>
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerXNAPhysics.Dynamics.Body.Mass">
            <summary>
            The mass of the Body
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerXNAPhysics.Dynamics.Body.InverseMass">
            <summary>
            The inverse of the mass of the body (1/Mass)
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerXNAPhysics.Dynamics.Body.MomentOfInertia">
            <summary>
            The moment of inertia of the body. 
            <para>The moment of intertia of a body in 2d is a scalar value that represents how
            difficult (or not difficult) it is to rotate a body about the center of mass.</para>
            <para>The moment of inertia is varies by the shape of the body.  For basic shapes like
            circles and rectangles, forumulas exist for computing the moment of interia based on
            the shape properties (radius of the circle, or length and width of the rectangle)</para>
            <para>For bodies that are not basic, it is usually good enough to estimate the moment of
            intertia by picking a basic shape that is close to the same shape. It is also possible
            using more advance calculus techniques to compute the actual moment of intertia of 
            non-basic shapes.</para>
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerXNAPhysics.Dynamics.Body.InverseMomentOfInertia">
            <summary>
            The inverse of the moment of inertia of the body (1/MomentOfInertia)
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerXNAPhysics.Dynamics.Body.IsStatic">
            <summary>
            Indicates this body is fixed within the world and will not move no matter what forces are applied.
            <para>Bodies that represent land or world borders are a good examples of static bodies.</para>
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerXNAPhysics.Dynamics.Body.RestitutionCoefficient">
            <summary>
            The coefficient of restitution of the body.
            <para>This parameter controls how bouncy an object is when it collides with other
            bodies. Valid values range from 0 to 1 inclusive.  1 implies 100% restitution (think of a really good bouncing)
            0 implies no restitution (think a ball of clay)</para>
            <para>NOTE: In this engine, he RestitutionCoefficient is not the only thing that can cause "bounce"
            Because of the way collision response is handle (allowing some penetration between objects) fast moving
            objects may bounce even when their RestitutionCoefficent is set to zero. Hopefully in future versions this
            can be fixed or at least minamized</para>
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerXNAPhysics.Dynamics.Body.FrictionCoefficient">
            <summary>
            Controls the amount of friction a body has when in contact with another body. A value of zero implies
            no friction.
            </summary>
        </member>
        <member name="P:FarseerGames.FarseerXNAPhysics.Dynamics.Body.LinearDragCoefficient">
            <summary>
            Linear drag can be thought of as "air drag". The LinearDragCoefficient controls how much linear (non-rotational) drag
            a body is subject to. 
            <para>Linear drag causes a force to be applied to the body always in the direction opposite its velocity vector.
            The magnitude of this force is the speed of the body squared multiplied by its LinearDragCoefficent. 
            <c>force = velocity*velocity*LinearDragCoeficcent</c></para>
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerXNAPhysics.Dynamics.Arbiter">
            <summary>
            Much of the code and ideas in this class were taken from a paper entitled
            "Fast and Simple Physics using Sequential Impulses" by Erin Catto
            </summary>
        </member>
        <member name="T:FarseerGames.FarseerXNAPhysics.Collisions.Geometry">
            <remark>
            The geometry class is the unit of collision detection.
            </remark>
        </member>
    </members>
</doc>
